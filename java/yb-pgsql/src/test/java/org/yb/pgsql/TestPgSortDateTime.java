// Copyright (c) YugabyteDB, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

package org.yb.pgsql;

import java.sql.Statement;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.yb.YBTestRunner;

import static org.yb.AssertionWrappers.*;

@RunWith(value=YBTestRunner.class)
public class TestPgSortDateTime extends BasePgSortingOrderTest {
  private static final Logger LOG = LoggerFactory.getLogger(TestPgSortDateTime.class);

  // All typename MUST be in upper case for comparison purpose.
  static String testTypes[] = {
    "DATE",
    "TIME",        // TIME WITHOUT TIME ZONE
    "TIMESTAMP",   // TIMESTAMP WITHOUT TIME ZONE
    "TIMESTAMPTZ", // TIMESTAMP WITH TIME ZONE
  };

  static String[][] testValues = {
    // DATE
    { "'1999-01-31'", "'2099-01-31'", "'1819-01-31'", "'1999-02-28'", "'1999-01-15'",
      "'5874897-12-31'", "'1-01-01'", "'00002-01-01'",
      "'January 23, 1999'", "'1/22/1999'", "'01/21/09'", "'1999-Jan-20'",
      "'Jan-19-1999'", "'18-Jan-1999'", "'17-Jan-99'", "'Jan-16-99'", "'19990114'",
      "'990113'", "'1999.012'", "'J2451190'", "'January 10, 99 BC'"  },

    // TIME
    { "'00:00:00'", "'01:00:00'", "'00:01:00'", "'00:00:01'", "'23:59:59'", "'24:00:00'",
      "'01:02:03.456'",  "'01:02'", "'010203'", "'02:03 AM'", "'02:03 PM'",
      "'03:03:04.567-8'", "'03:03:04-08:00'", "'03:03-08:00'", "'030305-08'",
      "'03:04:05 PST'", "'2019-07-25 03:04:06 PST'", "'03:04:07 -8:00'", "'03:04:08 -800'",
      "'03:04:09 -8'", "'03:04:10 zulu'", "'03:04:11 z'",
      "'04:04:05PST'", "'2019-07-25 04:04:06PST'", "'04:04:07-8:00'", "'04:04:08-800'",
      "'04:04:09-8'", "'04:04:10zulu'", "'04:04:11z'" },

    // TIMESTAMP
    { "'2019-07-25 01:02:03'", "'2020-07-25 01:02:03'", "'2019-06-25 01:02:03'",
      "'2019-07-26 01:02:03'", "'2019-07-25 00:02:03'", "'2019-07-25 01:03:03'",
      "'2019-07-25 01:02:02'", "'2019-07-25 07:08:09 -8:00'",
      "'January 1 02:03:04 2019 PST'", "TIMESTAMP '2019-07-20 01:02:03'",
      "TIMESTAMP '2019-07-20 01:02:04+02'", "TIMESTAMP WITH TIME ZONE '2019-07-20 01:02:04+02'",
      "'2019-07-25 01:02:05.678'", "'2019-07-25 23:59:59'", "'2019-07-01 24:00:00'",
      "'2019-07-03 00:00:00'", "'2019-07-04 01:02'", "'2019-07-05 010203'",
      "'2019-07-06 01:02 AM'", "'2019-07-06 02:02 PM'", "'2019-07-06 03:03:04.567-8'",
      "'2019-07-06 03:03:04-08:00'", "'2019-07-06 03:03-08:00'", "'2019-07-06 030305-08'",
      "'2019-07-06 03:04:05 PST'", "'2019-07-06 03:04:07 -8:00'", "'2019-07-06 03:04:08 -800'",
      "'2019-07-06 03:04:09 -8'", "'2019-07-06 03:04:10 zulu'", "'2019-07-06 03:04:11 z'",
      "'2019-07-06 04:04:05PST'", "'2019-07-25 04:04:06PST'", "'2019-07-06 04:04:07-8:00'",
      "'2019-07-06 04:04:08-800'", "'2019-07-06 04:04:09-8'", "'2019-07-06 04:04:10zulu'",
      "'2019-07-06 04:04:11z'",
      "'2019-08-24 -1:00:00'", "'2019-10-24 00:-1:00'", "'2019-07-24 00:00:-1'",
      "'2018-08-24 -01:00:00'", "'2018-10-24 00:-01:00'", "'2018-07-24 00:00:-01'",
      "'2019-07-23 -00:00:00'", "'2019-07-22 03:04:05 pst'",
      "'2019-09-24 00:00:60'", "'99999-07-21 03:04:05 PST'" },

    // TIMESTAMPTZ
    { "'2019-07-25 01:02:03'", "'2020-07-25 01:02:03'", "'2019-06-25 01:02:03'",
      "'2019-07-26 01:02:03'", "'2019-07-25 00:02:03'", "'2019-07-25 01:03:03'",
      "'2019-07-25 01:02:02'", "'2019-07-25 07:08:09 -8:00'",
      "'January 1 02:03:04 2019 PST'", "TIMESTAMP '2019-07-20 01:02:03'",
      "TIMESTAMP '2019-07-20 01:02:04+02'", "TIMESTAMP WITH TIME ZONE '2019-07-20 01:02:04+02'",
      "'2019-07-25 01:02:05.678'", "'2019-07-25 23:59:59'", "'2019-07-01 24:00:00'",
      "'2019-07-03 00:00:00'", "'2019-07-04 01:02'", "'2019-07-05 010203'",
      "'2019-07-06 01:02 AM'", "'2019-07-06 02:02 PM'", "'2019-07-06 03:03:04.567-8'",
      "'2019-07-06 03:03:04-08:00'", "'2019-07-06 03:03-08:00'", "'2019-07-06 030305-08'",
      "'2019-07-06 03:04:05 PST'", "'2019-07-06 03:04:07 -8:00'", "'2019-07-06 03:04:08 -800'",
      "'2019-07-06 03:04:09 -8'", "'2019-07-06 03:04:10 zulu'", "'2019-07-06 03:04:11 z'",
      "'2019-07-06 04:04:05PST'", "'2019-07-25 04:04:06PST'", "'2019-07-06 04:04:07-8:00'",
      "'2019-07-06 04:04:08-800'", "'2019-07-06 04:04:09-8'", "'2019-07-06 04:04:10zulu'",
      "'2019-07-06 04:04:11z'",
      "'2019-08-24 -1:00:00'", "'2019-10-24 00:-1:00'", "'2019-07-24 00:00:-1'",
      "'2018-08-24 -01:00:00'", "'2018-10-24 00:-01:00'", "'2018-07-24 00:00:-01'",
      "'2019-07-23 -00:00:00'", "'2019-07-22 03:04:05 pst'",
      "'2019-09-24 00:00:60'", "'99999-07-21 03:04:05 PST'" },
  };

  static String[][] testInvalidValues = {
    // DATE
    { "NULL", "'5874898-01-01'", "'00-01-01'", "'99-Jan-23'",
      "'2019-13-01'", "'2019-01-32'", "'2019-00-01'","'2019-01-00'" },

    // TIME
    { "NULL", "'25:00:00'", "'00:60:00'", "'00:00:60'", "'-1:00:00'", "'00:-1:00'", "'00:00:-1'",
      "'-01:00:00'", "'00:-01:00'", "'00:00:-01'", "'-00:00:00'", "'24:00:01'",
      "'03:04:05 AAA'", "'03:04:05 pst'", "'03:04 05:06'",
      "'9999-07-25 03:04:05 PST'", "'2019-13-01 03:04:05 PST'", "'2019-01-32 03:04:05 PST'",
      "'0-01-01 03:04:05 PST'", "'2019-00-01 03:04:05 PST'","'2019-01-00 03:04:05 PST'",
      "'04:04:04 America/New_York'", "'05:05:05 PST8PDT'", "'2019-07-25 02:02 03:03'",
      "'03:04:05:06'", "'2019-01-01-01 03:04:05'" },

    // TIMESTAMP
    { "NULL", "'2019-07-25 25:00:00'", "'2019-07-25 00:60:00'", "'2019-07-25 24:00:01'",
      "'2019-07-25 03:04:05 AAA'", "'2019-07-25 03:04 05:06'", "'2019-07-25 03:04:05:06'",
      "'999999-07-25 03:04:05 PST'", "'2019-13-01 03:04:05 PST'", "'2019-01-32 03:04:05 PST'",
      "'0-01-01 03:04:05 PST'", "'2019-00-01 03:04:05 PST'","'2019-01-00 03:04:05 PST'",
      "'04:04:04 America/New_York'", "'05:05:05 PST8PDT'",
      "'2019-07-25 02:02 03:03'", "'2019-07-25 03:04:05:06'", "'2019-01-01-01 03:04:05'" },

    // TIMESTAMPTZ
    { "NULL", "'2019-07-25 25:00:00'", "'2019-07-25 00:60:00'", "'2019-07-25 24:00:01'",
      "'2019-07-25 03:04:05 AAA'", "'2019-07-25 03:04 05:06'", "'2019-07-25 03:04:05:06'",
      "'999999-07-25 03:04:05 PST'", "'2019-13-01 03:04:05 PST'", "'2019-01-32 03:04:05 PST'",
      "'0-01-01 03:04:05 PST'", "'2019-00-01 03:04:05 PST'","'2019-01-00 03:04:05 PST'",
      "'04:04:04 America/New_York'", "'05:05:05 PST8PDT'",
      "'2019-07-25 02:02 03:03'", "'2019-07-25 03:04:05:06'", "'2019-01-01-01 03:04:05'" },
  };

  // Testing sorting order for the listed types.
  @Test
  public void testSort() throws Exception {
    runSortingOrderTest(testTypes, testValues, testInvalidValues);

    // Test invalid type names.
    createTablesWithInvalidPrimaryKey("TIMETZ", "TIME WITH TIME ZONE", "INTERVAL");
  }
}
