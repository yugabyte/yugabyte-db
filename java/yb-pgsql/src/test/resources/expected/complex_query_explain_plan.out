plan:
Limit  (cost=15492405236.63..15492405249.38 rows=100 width=192) ()
  CTE employee_hierarchy
    ->  Recursive Union  (cost=0.00..29062.15 rows=501000 width=44) (never executed)
          ->  Seq Scan on employees  (cost=0.00..100.00 rows=1000 width=44) (never executed)
                Storage Filter: (manager_id IS NULL)
          ->  Merge Join  (cost=1014.21..1894.21 rows=50000 width=44) (never executed)
                Merge Cond: (e.manager_id = eh_1.id)
                ->  Sort  (cost=149.83..152.33 rows=1000 width=40) (never executed)
                      Sort Key: e.manager_id
                      ->  Seq Scan on employees e  (cost=0.00..100.00 rows=1000 width=40) (never executed)
                ->  Sort  (cost=864.39..889.39 rows=10000 width=8) (never executed)
                      Sort Key: eh_1.id
                      ->  WorkTable Scan on employee_hierarchy eh_1  (cost=0.00..200.00 rows=10000 width=8) (never executed)
  ->  GroupAggregate  (cost=15492376174.49..16379563674.49 rows=6958333333 width=192) ()
        Group Key: o.order_date, ss.rank, c.name, p.name, cat.name, w.location, i.stock, eh.name, eh.level, ss.total_sold
        Filter: (count(*) > 1)
        ->  Sort  (cost=15492376174.49..15544563674.49 rows=20875000000 width=192) ()
              Sort Key: o.order_date DESC, ss.rank, c.name, p.name, cat.name, w.location, i.stock, eh.name, eh.level, ss.total_sold
              Sort Method: quicksort  Memory: 25kB
              ->  Merge Join  (cost=42032412.33..355574994.83 rows=20875000000 width=192) ()
                    Merge Cond: (oi.product_id = ss.id)
                    ->  Merge Join  (cost=932.57..952.57 rows=25000 width=156) ()
                          Merge Cond: (oi.product_id = p.id)
                          ->  Sort  (cost=359.00..361.50 rows=1000 width=44) ()
                                Sort Key: oi.product_id
                                Sort Method: quicksort  Memory: 25kB
                                ->  YB Batched Nested Loop Join  (cost=0.00..309.17 rows=1000 width=44) ()
                                      Join Filter: (o.customer_id = c.id)
                                      ->  YB Batched Nested Loop Join  (cost=0.00..210.83 rows=1000 width=16) ()
                                            Join Filter: (o.id = oi.order_id)
                                            ->  Seq Scan on order_items oi  (cost=0.00..100.00 rows=1000 width=8) ()
                                                  Storage Table Read Requests: 3
                                                  Storage Table Read Execution Time: 0.000 ms
                                            ->  Index Scan using orders_pkey on orders o  (cost=0.00..0.13 rows=1 width=16) (never executed)
                                                  Index Cond: (id = ANY (ARRAY[oi.order_id, $3, $4, ..., $1025]))
                                                  Filter: (order_date >= (CURRENT_TIMESTAMP - '1 year'::interval))
                                      ->  Index Scan using customers_pkey on customers c  (cost=0.00..0.11 rows=1 width=36) (never executed)
                                            Index Cond: (id = ANY (ARRAY[o.customer_id, $1027, $1028, ..., $2049]))
                          ->  Sort  (cost=573.58..576.08 rows=1000 width=112) (never executed)
                                Sort Key: p.id
                                ->  YB Batched Nested Loop Join  (cost=210.83..523.75 rows=1000 width=112) (never executed)
                                      Join Filter: (i.warehouse_id = w.id)
                                      ->  YB Batched Nested Loop Join  (cost=210.83..425.42 rows=1000 width=84) (never executed)
                                            Join Filter: (pc.category_id = cat.id)
                                            ->  Hash Join  (cost=210.83..327.08 rows=1000 width=56) (never executed)
                                                  Hash Cond: (i.product_id = p.id)
                                                  ->  Seq Scan on inventory i  (cost=0.00..102.50 rows=1000 width=12) (never executed)
                                                        Storage Filter: (stock < 100)
                                                  ->  Hash  (cost=198.33..198.33 rows=1000 width=44) (never executed)
                                                        ->  YB Batched Nested Loop Join  (cost=0.00..198.33 rows=1000 width=44) (never executed)
                                                              Join Filter: (p.id = pc.product_id)
                                                              ->  Seq Scan on product_categories pc  (cost=0.00..100.00 rows=1000 width=8) (never executed)
                                                              ->  Index Scan using products_pkey on products p  (cost=0.00..0.11 rows=1 width=36) (never executed)
                                                                    Index Cond: (id = ANY (ARRAY[pc.product_id, $2051, $2052, ..., $3073]))
                                            ->  Index Scan using categories_pkey on categories cat  (cost=0.00..0.11 rows=1 width=36) (never executed)
                                                  Index Cond: (id = ANY (ARRAY[pc.category_id, $3075, $3076, ..., $4097]))
                                      ->  Index Scan using warehouses_pkey on warehouses w  (cost=0.00..0.11 rows=1 width=36) (never executed)
                                            Index Cond: (id = ANY (ARRAY[i.warehouse_id, $4099, $4100, ..., $5121]))
                    ->  Materialize  (cost=42031479.75..42866479.75 rows=167000000 width=56) (never executed)
                          ->  Sort  (cost=42031479.75..42448979.75 rows=167000000 width=56) (never executed)
                                Sort Key: ss.id
                                ->  Nested Loop  (cost=391.91..2099196.91 rows=167000000 width=56) (never executed)
                                      ->  CTE Scan on employee_hierarchy eh  (cost=0.00..11272.50 rows=167000 width=36) (never executed)
                                            Filter: (level <= 3)
                                      ->  Materialize  (cost=391.91..426.91 rows=1000 width=20) (never executed)
                                            ->  Subquery Scan on ss  (cost=391.91..421.91 rows=1000 width=20) (never executed)
                                                  ->  WindowAgg  (cost=391.91..411.91 rows=1000 width=56) (never executed)
                                                        ->  Sort  (cost=391.91..394.41 rows=1000 width=48) (never executed)
                                                              Sort Key: pc_1.category_id, (sum(oi_1.quantity)) DESC
                                                              ->  HashAggregate  (cost=332.08..342.08 rows=1000 width=48) (never executed)
                                                                    Group Key: p_1.id, pc_1.category_id
                                                                    ->  Hash Join  (cost=210.83..324.58 rows=1000 width=44) (never executed)
                                                                          Hash Cond: (pc_1.product_id = p_1.id)
                                                                          ->  Seq Scan on product_categories pc_1  (cost=0.00..100.00 rows=1000 width=8) (never executed)
                                                                          ->  Hash  (cost=198.33..198.33 rows=1000 width=44) (never executed)
                                                                                ->  YB Batched Nested Loop Join  (cost=0.00..198.33 rows=1000 width=44) (never executed)
                                                                                      Join Filter: (p_1.id = oi_1.product_id)
                                                                                      ->  Seq Scan on order_items oi_1  (cost=0.00..100.00 rows=1000 width=8) (never executed)
                                                                                      ->  Index Scan using products_pkey on products p_1  (cost=0.00..0.11 rows=1 width=36) (never executed)
                                                                                            Index Cond: (id = ANY (ARRAY[oi_1.product_id, $5123, $5124, ..., $6145]))
