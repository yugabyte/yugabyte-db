# Create soft-link for Python if needed
if [[ {{ os_family }} == suse || {{ os_distribution }} == ubuntu ]]; then
  if [[ -e /usr/bin/python3 && ! -e /usr/bin/python ]]; then
    ln -s /usr/bin/python3 /usr/bin/python
  else
    echo "Not creating soft-link from /usr/bin/python3 to /usr/bin/python"
  fi
fi

# Install python3 on CentOS 8 machines
if [[ {{ os_family }} == almaLinux && {{ os_version }} == 8 && {{ is_airgap }} == 'False' ]]; then
  rpm --import https://repo.almalinux.org/almalinux/RPM-GPG-KEY-AlmaLinux
fi

if [[ {{ os_distribution }} == RedHat && {{ os_version }} == 8 && {{ is_airgap }} == 'False' ]]; then
  if [[ -e /usr/bin/dnf && ! -e /usr/bin/python ]]; then
    dnf install -y python36 && alternatives --set python /usr/bin/python3
  else
    echo "Python already installed or not CentOS 8"
  fi
fi

if [[ {{ os_distribution }} == RedHat && {{ os_version }} == 9 && {{ is_airgap }} == 'False' ]]; then
  if [[ -e /usr/bin/dnf ]]; then
    dnf install -y polkit
  fi
fi

if [[ -n "{{ ssh_user }}" || -n "{{ yb_server_ssh_user }}" || -n "{{ user_name }}" ]]; then
  touch /etc/sudoers.d/yb_sudoers
  chmod 0440 /etc/sudoers.d/yb_sudoers

  # Collect the defined users and create the necessary sudoers entries
  users=()
  for user in "{{ ssh_user }}" "{{ yb_server_ssh_user }}" "{{ user_name }}"; do
    if [[ -n "$user" ]]; then
      users+=("$user")
    fi
  done

  # Remove duplicate users and generate the sudoers lines
  sudoers_content=""
  for user in $(printf "%s\n" "${users[@]}" | sort -u); do
    sudoers_content+="Defaults:${user} !requiretty\n"
  done

  # Write the content to /etc/sudoers.d/yb_sudoers
  echo -e "$sudoers_content" | sudo tee /etc/sudoers.d/yb_sudoers > /dev/null
fi

# Pre-provisioning tasks on Ubuntu
if [[ {{ os_distribution }} == ubuntu ]]; then
  if systemctl is-enabled --quiet apt-daily.timer; then
    systemctl disable --now apt-daily.timer && echo disabled
  fi

  if systemctl is-enabled --quiet apt-daily-upgrade.timer; then
    systemctl disable --now apt-daily-upgrade.timer && echo disabled
  fi

  systemctl daemon-reload
  systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true

  if [[ -f /etc/apt/apt.conf.d/20auto-upgrades ]]; then
    sed -i '/Unattended-Upgrade/s/"1"/"0"/' /etc/apt/apt.conf.d/20auto-upgrades
  fi

  apt-get -y update

  if [[ {{ os_version }} == 18 ]]; then
    apt-get install -y python-minimal
  fi
fi

# Fix google-cloud yum repo settings for GCP VM
{% if cloud_type is defined and cloud_type != '' %}
  if [ -n "{{ cloud_type }}" ]; then
    if [[ {{ cloud_type }} == gcp && {{ os_family }} == centos && {{ os_version }} == 7 ]]; then
      sed -i 's/repo_gpgcheck=1/repo_gpgcheck=0/' /etc/yum.repos.d/google-cloud.repo
    fi
  fi
{% endif %}

# Install policycoreutils-python on CentOS 7
if [[ {{ os_family }} == RedHat && {{ os_version }} == 7 && {{ is_airgap }} == 'False' ]]; then
  if ! rpm -q policycoreutils-python &>/dev/null; then
    yum install -y policycoreutils-python
  fi
fi

# Install policycoreutils-python-utils on CentOS 8 and up
if [[ {{ os_family }} == RedHat && {{ os_version }} != 7 && {{ is_airgap }} == 'False' ]]; then
  if ! rpm -q policycoreutils-python-utils &>/dev/null; then
    yum install -y policycoreutils-python-utils
  fi
fi

# Accept target in firewalld on Oracle Linux
if [[ {{ os_distribution }} == oraclelinux ]]; then
  firewall-cmd --set-target=ACCEPT --permanent && systemctl restart firewalld
fi

# Clean dnf and reinstall SELinux policy on Oracle Linux 8
if [[ {{ os_distribution }} == oraclelinux && {{ os_version }} == 8 && {{ is_airgap }} == 'False' ]]; then
  dnf clean all
  for i in {1..10}; do
    dnf reinstall --refresh -y selinux-policy && break || sleep 5
  done
fi

# Generate UTF-8 locales on RedHat family (excluding version 7)
{% if install_locales is defined and install_locales != '' %}
    if [[ {{ install_locales }} == 'True' && {{ os_family }} == Redhat && {{ os_distribution }} != 7 ]]; then
    yum install -y glibc-locale-source glibc-langpack-en
    languages=("en_US" "de_DE" "es_ES" "fr_FR" "it_IT" "ja_JP" "ko_KR" "pl_PL" "ru_RU" "sv_SE" "tr_TR" "zh_CN")
    for lang in "${languages[@]}"; do
        localedef --quiet --force --inputfile="${lang}" --charmap=UTF-8 "${lang}.UTF-8"
    done
    fi
{% endif %}
