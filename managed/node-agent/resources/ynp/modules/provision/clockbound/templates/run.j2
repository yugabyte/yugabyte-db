# Find and set maxclockerror to chrony.conf if not already present
if [[ -f /etc/chrony.conf ]]; then
    CHRONY_CONF="/etc/chrony.conf"
elif [[ -f /etc/chrony/chrony.conf ]]; then
    CHRONY_CONF="/etc/chrony/chrony.conf"
else
    echo "chrony.conf not found in /etc/chrony.conf or /etc/chrony/chrony.conf"
    exit 1
fi
if ! grep -Fxq "maxclockerror 50" "${CHRONY_CONF}"; then
    echo "Setting 'maxclockerror 50' in ${CHRONY_CONF}"
    echo 'maxclockerror 50' >> "${CHRONY_CONF}"
fi

{#
If selinux is enforcing, configure chrony selinux context to
allow clockbound to communicate with it over unix datagram
socket. Selinux module generated by audit2allow.
#}
SE_LINUX_STATUS=$(getenforce 2>/dev/null || echo "")
if [[ -z "${SE_LINUX_STATUS}" || "${SE_LINUX_STATUS}" == "Disabled" ]]; then
    echo "Selinux is not used, skipping selinux configuration"
elif [[ "${SE_LINUX_STATUS}" == "Enforcing" || "${SE_LINUX_STATUS}" == "Permissive" ]]; then
    module_name=chrony_uds_access
    version=1.0

    cat <<EOF > "${module_name}.te"
module ${module_name} ${version};

require {
    type bin_t;
    type chronyd_t;
    type unconfined_service_t;
    class unix_dgram_socket { sendto };
}

allow bin_t chronyd_t:unix_dgram_socket sendto;
allow chronyd_t unconfined_service_t:unix_dgram_socket sendto;
EOF

    checkmodule -M -m -o "${module_name}.mod" "${module_name}.te"
    semodule_package -o "${module_name}.pp" -m "${module_name}.mod"
    semodule -i "${module_name}.pp"

    rm -f "${module_name}".pp "${module_name}".mod "${module_name}".te
fi


# Configure clockbound
arch=$(uname -m)
if [[ "${arch}" != "x86_64" && "${arch}" != "aarch64" ]]; then
    echo "Unknown arch-type ${arch}"
    exit 1
fi
clockbound_gz="clockbound-linux-${arch}.tar.gz"
echo "Using clockbound package ${clockbound_gz}"

local_path="/usr/local"
local_bin_path="/usr/local/bin"
clockbound_binary="clockbound"
clockbound_check_binary="clockbound-check"

echo "Extracting clockbound and clockbound-check binary"
tar -xvzf {{ package_path }}/"${clockbound_gz}" -C "${local_path}"

echo "Linking clockbound and clockbound-check to ${local_bin_path}"
ln -sf "${local_path}/${clockbound_binary}" "${local_bin_path}/${clockbound_binary}"
ln -sf "${local_path}/${clockbound_check_binary}" "${local_bin_path}/${clockbound_check_binary}"

# Find chrony user
if pgrep -u chrony chronyd > /dev/null 2>&1; then
    chrony_user="chrony"
elif pgrep -u _chrony chronyd > /dev/null 2>&1; then
    chrony_user="_chrony"
else
    echo "chrony user neither chrony nor _chrony, exiting"
    exit 1
fi
echo "Making ${chrony_user} owner of ${local_bin_path}/${clockbound_binary}"
chown "${chrony_user}":"${chrony_user}" "${local_bin_path}/${clockbound_binary}"

# Add systemd unit file for clockbound
cat <<EOF > /etc/systemd/system/clockbound.service
[Unit]
Description=ClockBound

[Service]
Type=simple
Restart=always
RestartSec=10
ExecStart=/usr/local/bin/clockbound --max-drift-rate 50
RuntimeDirectory=clockbound
RuntimeDirectoryPreserve=yes
WorkingDirectory=/run/clockbound
User=${chrony_user}
Group=${chrony_user}

[Install]
WantedBy=multi-user.target
EOF

# Systemd restart chrony and enable, start clockbound
systemctl daemon-reload
systemctl enable clockbound
systemctl restart chronyd
systemctl start clockbound
