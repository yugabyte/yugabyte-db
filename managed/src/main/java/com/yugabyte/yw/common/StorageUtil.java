// Copyright (c) YugaByte, Inc.

package com.yugabyte.yw.common;

import static play.mvc.Http.Status.PRECONDITION_FAILED;

import com.yugabyte.yw.common.backuprestore.BackupUtil;
import com.yugabyte.yw.common.backuprestore.ybc.YbcBackupUtil;
import com.yugabyte.yw.common.backuprestore.ybc.YbcBackupUtil.YbcBackupResponse;
import com.yugabyte.yw.forms.BackupTableParams;
import com.yugabyte.yw.forms.RestorePreflightResponse;
import com.yugabyte.yw.forms.backuprestore.AdvancedRestorePreflightParams;
import com.yugabyte.yw.models.Universe;
import com.yugabyte.yw.models.configs.CustomerConfig;
import com.yugabyte.yw.models.configs.data.CustomerConfigData;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import org.apache.commons.collections4.CollectionUtils;
import org.yb.ybc.CloudStoreSpec;

public interface StorageUtil {

  /**
   * Create YBC CloudStoreSpec for backup/incremental backups.
   *
   * @param region The node region to create spec for
   * @param commonDir The common directory generated by YBA
   * @param previousBackupLocation Previous backup location for incremental backup
   * @param configData The storage config object
   * @param universe The universe object
   * @return The CloudStoreSpec object
   */
  public CloudStoreSpec createCloudStoreSpec(
      String region,
      String commonDir,
      String previousBackupLocation,
      CustomerConfigData configData,
      Universe universe);

  /**
   * Generate CloudStoreSpec for success marker download with default location
   *
   * @param cloudDir The backup location string provided during restore
   * @param configData The storage config data object
   * @param universe The universe object
   * @return The CloudStoreSpec object
   */
  public default CloudStoreSpec createDsmCloudStoreSpec(
      String backupLocation, CustomerConfigData configData, Universe universe) {
    return createRestoreCloudStoreSpec(
        YbcBackupUtil.DEFAULT_REGION_STRING,
        backupLocation,
        configData,
        true /* isDsm */,
        universe);
  }

  public default org.yb.ybc.ProxyConfig createYbcProxyConfig(
      Universe universe, CustomerConfigData configData) {
    return null;
  }

  /**
   * Generate CloudStoreSpec for restore/success marker download
   *
   * @param region The region to generate CloudStoreSpec of. This is either 'default_region' or
   *     actual regions.
   * @param cloudDir The cloudDir string. This is dependent on spec usage type
   * @param configData The storage config data object
   * @param isDsm Boolean identifier for restore/success marker download type task
   * @param universe The universe object
   * @return The CloudStoreSpec object
   */
  public CloudStoreSpec createRestoreCloudStoreSpec(
      String region,
      String cloudDir,
      CustomerConfigData configData,
      boolean isDsm,
      Universe universe);

  /**
   * Generate map with key-value pair as regions and corresponding locations. For default region, we
   * use the key "default_region".
   *
   * @param configData The Storage config data object
   * @return
   */
  public Map<String, String> getRegionLocationsMap(CustomerConfigData configData);

  /**
   * Plain config validation. Mainly used pre-backup.
   *
   * @param configData The storage config data object
   */
  public default void validateStorageConfig(CustomerConfigData configData) {
    Map<String, String> configLocationMap = getRegionLocationsMap(configData);
    // TODO: Check all permissions instead of listing here.
    if (!canCredentialListObjects(configData, configLocationMap)) {
      throw new PlatformServiceException(
          PRECONDITION_FAILED, "Storage config credentials cannot list objects");
    }
  }

  /**
   * Validate storage config with default locations. This is used for validating storage config with
   * default backup locations provided during restore.
   *
   * @param configData The storage config data object
   * @param locations List of default locations to check
   * @param checkBucketInPrefix Match bucket when matching prefix
   */
  public default void validateStorageConfigOnDefaultLocationsList(
      CustomerConfigData configData, Collection<String> locations, boolean checkBucketInPrefix) {
    if (CollectionUtils.isEmpty(locations)) {
      throw new RuntimeException("Empty locations list provided to validate");
    }
    for (String location : locations) {
      Map<String, String> locationsMap = new HashMap<>();
      locationsMap.put(YbcBackupUtil.DEFAULT_REGION_STRING, location);
      checkConfigTypeAndBackupLocationSame(location);
      // Default no-op. Works only for NFS.
      checkStoragePrefixValidity(
          configData, YbcBackupUtil.DEFAULT_REGION_STRING, location, checkBucketInPrefix);
      if (!canCredentialListObjects(configData, locationsMap)) {
        throw new PlatformServiceException(
            PRECONDITION_FAILED, "Storage config credentials cannot list objects");
      }
    }
  }

  /**
   * Used for storage config validation against a given backup. Utility of this is for during
   * incremental backup/backup deletion/update backup.
   *
   * @param configData The storage config data object
   * @param params The collection of backup params containing default/regional locations.
   */
  public default void validateStorageConfigOnBackup(
      CustomerConfigData configData, Collection<BackupTableParams> params) {
    Map<String, String> configLocationMap = getRegionLocationsMap(configData);
    if (CollectionUtils.isNotEmpty(params)) {
      params.stream()
          .forEach(
              bP -> {
                Map<String, String> regionLocationsMap = BackupUtil.getLocationMap(bP);
                regionLocationsMap.forEach(
                    (r, l) -> {
                      if (!configLocationMap.containsKey(r)) {
                        throw new PlatformServiceException(
                            PRECONDITION_FAILED,
                            String.format("Storage config does not contain %s region", r));
                      }
                      checkConfigTypeAndBackupLocationSame(l);
                      // Default no-op. Works only for NFS.
                      checkStoragePrefixValidity(configData, r, l, false);
                    });
                if (!canCredentialListObjects(configData, regionLocationsMap)) {
                  throw new PlatformServiceException(
                      PRECONDITION_FAILED, "Storage config credentials cannot list objects");
                }
              });
    }
  }

  /**
   * Check if storage config can list objects in the given locations. The locations should be of the
   * exact format as present in cloud storage. For eg: s3://test/foo/bar
   *
   * @param configData The Storage config data object
   * @param locations Map of storage config region and corresponding locations
   * @return
   */
  public default boolean canCredentialListObjects(
      CustomerConfigData configData, Map<String, String> locations) {
    return true;
  }

  /**
   * Check if storage config can list objects for the given YBC Success marker's cloud store spec.
   * The ResponseCloudStoreSpec object contains the region-locations mapping from the backup.
   *
   * <p>Ignored for NFS.
   *
   * @param configData Storage config to use. The buckets are taken from this.
   * @param csSpec The ResponseCloudStoreSpec object
   */
  public default void checkListObjectsWithYbcSuccessMarkerCloudStore(
      CustomerConfigData configData, YbcBackupResponse.ResponseCloudStoreSpec csSpec) {}

  /**
   * Check if storage config type used is compatible with backup location
   *
   * <p>Ignored for NFS
   *
   * @param configData Storage config
   * @param location The backup location
   */
  public default void checkConfigTypeAndBackupLocationSame(String location) {
    // default empty fall-through stub
  }

  /**
   * Validate config and backup location prefix is same for NFS.
   *
   * @param configData The storage config data object
   * @param region The config region to use
   * @param backupLocation The actual backup location
   * @param checkBucket Whether to check bucket when matching prefix
   */
  public default void checkStoragePrefixValidity(
      CustomerConfigData configData, String region, String backupLocation, boolean checkBucket) {
    // default empty fall-through stub
  }

  // Only for NFS
  public default void validateStorageConfigOnUniverseNonRpc(
      CustomerConfig config, Universe universe) {
    // default empty fall-through stub
  }

  public boolean checkFileExists(
      CustomerConfigData configData,
      Set<String> locations,
      String fileName,
      UUID universeUUID,
      boolean checkExistsOnAll);

  // Generate RestorePreflightResponse for yb_backup.py backup locations.
  public RestorePreflightResponse generateYBBackupRestorePreflightResponseWithoutBackupObject(
      AdvancedRestorePreflightParams preflightParams, CustomerConfigData configData);
}
