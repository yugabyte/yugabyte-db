# Copyright 2022 YugaByte, Inc. and Contributors
#
# Licensed under the Polyform Free Trial License 1.0.0 (the "License"); you
# may not use this file except in compliance with the License. You
# may obtain a copy of the License at
#
# https://github.com/YugaByte/yugabyte-db/blob/master/licenses/POLYFORM-FREE-TRIAL-LICENSE-1.0.0.txt

- name: Ensure we have the proper vars
  assert:
    that:
      - cloud_type is defined
      - mount_points is defined
      - systemd_option is defined
      - pg_max_mem_mb is defined
      - use_chrony is defined
      - configure_ybc is defined
      - lun_indexes is defined

- block:
  - name: Install and configure chrony with given server list
    include_role:
      name: ansible-chrony
    vars:
      chrony_server: # Necessary to remove default
      chrony_server_list: "{{ ntp_servers }}"
    when: ntp_servers is defined
  - name: Install and configure chrony to cloud defaults
    block:
    - name: Set up default GCP NTP configuration
      include_role:
        name: ansible-chrony
      vars:
        chrony_server: "metadata.google.internal iburst minpoll 4 maxpoll 4"
      when: "{{ cloud_type == 'gcp' }}"
    - name: Set up default AWS NTP configuration
      include_role:
        name: ansible-chrony
      vars:
        chrony_server: "169.254.169.123 iburst minpoll 4 maxpoll 4"
      when: "{{ cloud_type == 'aws' }}"
    - name: Set up default Azure NTP configuratoin
      include_role:
        name: ansible-chrony
      vars:
        chrony_server: # Necessary to remove default
        chrony_azure_refclock: true
      when: "{{ cloud_type == 'azu' }}"
    when: ntp_servers is not defined
  - name: Force date/time synchronization with chrony
    become: yes
    become_method: sudo
    shell: chronyc makestep
  when: use_chrony
  tags: yb-prebuilt-ami

# Set sysctl values
- block:
  - name: Provision | Set swappiness off
    sysctl:
      name: vm.swappiness
      value: 0
      state: present
    tags: yb-prebuilt-ami
  # We don't follow symlinks here because we want to check if the symlink exists.
  # if the symlink exists we don't worry about configuring the core dump directory.
  - name: Check if the core dumps directory or symlink exists
    stat:
      # no slash at the end to check if the symlink exists, otherwise it fails for symlinks
      path: "{{ yb_home_dir }}/cores"
      follow: false
    register: core_dumps_dir_stat
    tags: yb-prebuilt-ami

  - name: Create directory for core dumps
    file:
      path: "{{ yb_home_dir }}/cores/"
      state: directory
      mode: '0755'
      owner: "{{ user_name }}"
      group: "{{ user_name }}"
    when: not core_dumps_dir_stat.stat.exists
    tags: yb-prebuilt-ami

  - name: Ensure gzip is installed
    command: which gzip
    register: gzip_installed
    ignore_errors: yes
    tags: yb-prebuilt-ami

  - name: Fail if gzip is not installed
    fail:
      msg: "gzip is not installed, please install it manually."
    when: gzip_installed.rc != 0
    tags: yb-prebuilt-ami

  - name: Create core dump compression script
    become: yes
    become_method: sudo
    copy:
      dest: "{{ bin_path }}/compress_core.sh"
      mode: '0755'
      content: |
        #!/bin/bash
        DUMP_DIR="/home/yugabyte/cores/"
        CORE_FILE="$DUMP_DIR/$(basename $1).$$.gz"
        GZIP_PATH=$(PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" which gzip)
        if [[ -z "$GZIP_PATH" ]]; then
          echo "gzip not found, aborting." >> /home/yugabyte/cores/custom_core_dump.log
          exit 1
        fi
        /usr/bin/gzip >> "$CORE_FILE"
        chmod 644 "$CORE_FILE"
    tags: yb-prebuilt-ami

  - name: Provision | Create core dump kernel pattern
    sysctl:
      name: kernel.core_pattern
      value: "|{{ bin_path }}/compress_core.sh {{ yb_home_dir }}/cores/core_yb.%t.%e.%p"
      state: present
    tags: yb-prebuilt-ami

  - name: "Provision | Set max map count to {{ vm_max_map_count }}"
    sysctl:
      name: vm.max_map_count
      value: "{{ vm_max_map_count }}"
      state: present
    tags: yb-prebuilt-ami

  - name: Provision | Comment out existing journald.conf values
    become: yes
    become_method: sudo
    lineinfile:
      path: /etc/systemd/journald.conf
      regexp: '^([^#].*?(Storage|MaxRetentionSec|SystemMaxUse)=.*)'
      line: '# \1'
      state: present
      backrefs: yes

  - name: Provision | Add Yugabyte specific journald.conf values
    become: yes
    become_method: sudo
    blockinfile:
      path: /etc/systemd/journald.conf
      marker: "###### ADDED BY YUGABYTE ######"
      insertbefore: EOF
      block: |
        Storage=persistent
        MaxRetentionSec=30days
        SystemMaxUse=400M

  - name: Provision | Restart systemd-journald to apply changes
    become: yes
    become_method: sudo
    service:
      name: systemd-journald
      state: restarted

- name: Provision | Ensure mount paths exist.
  shell: |
    mkdir -p {{ item }}
  become: yes
  become_method: sudo
  with_items: "{{ mount_points.split(',') }}"

- name: Provision | Ensure proper ownership for mount paths.
  shell: |
    chown -R {{ user_name }}:{{ user_name }} {{ item }}
  become: yes
  become_method: sudo
  with_items: "{{ mount_points.split(',') }}"

- name: Provision | Ensure proper permissions for mount paths.
  shell: |
    chmod -R 755 {{ item }}
  become: yes
  become_method: sudo
  with_items: "{{ mount_points.split(',') }}"

- name: Provision | Ensure metrics dir exists
  shell: |
    mkdir -p {{ yb_metrics_dir }}
  become: yes
  become_method: sudo

- name: Provision | Ensure proper ownership for metrics dir.
  shell: |
    chown -R {{ user_name }}:{{ user_name }} {{ yb_metrics_dir }}
  become: yes
  become_method: sudo

- name: Provision | Ensure proper permissions for metrics dir.
  shell: |
    chmod -R 755 {{ yb_metrics_dir }}
  become: yes
  become_method: sudo

- name: setup-postgres-cgroups
  include_role:
    name: setup-cgroup
  when: not systemd_option or (ansible_os_family == 'RedHat' and
        (ansible_distribution_major_version < "9" and not ansible_distribution == 'Amazon'))

- name: Grant traverse permission on yb_home directory
  file:
    path: "{{ yb_home_dir }}"
    mode: '0750'
  become: yes
  become_method: sudo
  when: (install_node_exporter is defined and install_node_exporter|bool) or
        ((ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7')
        or (ansible_distribution == 'Amazon' and ansible_distribution_major_version == '2'))

# Give yugabyte user sudo access to start/stop/restart master and tserver
- name: Add yugabyte sudo user without password for metric collection operations
  lineinfile:
    dest: /etc/sudoers.d/yugabyte-metrics
    line: 'yugabyte ALL=(ALL:ALL) NOPASSWD: /usr/bin/journalctl -k --since 10min\ ago'
    create: yes
    state: present
    mode: 0440
    validate: 'visudo -cf %s'
  tags: yb-prebuilt-ami

- block:
  - name: Set ulimits for user scope in system.conf
    lineinfile:
      dest: /etc/systemd/system.conf
      regexp: '^DefaultLimitNOFILE*'
      line: 'DefaultLimitNOFILE=1048576'
      create: yes
      state: present
      insertafter: 'EOF'

  - name: Set ulimits for user scope in user.conf
    lineinfile:
      dest: /etc/systemd/user.conf
      regexp: '^DefaultLimitNOFILE*'
      line: 'DefaultLimitNOFILE=1048576'
      create: yes
      state: present
      insertafter: 'EOF'
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version in ['8', '9']
  tags: yb-prebuilt-ami

- block:
  - name: Reboot the system for new ulimits
    reboot:
      pre_reboot_delay: 60
      post_reboot_delay: 120
      reboot_timeout: 600
    register: reboot

  - name: Log reboot time
    debug:
      msg: "System took {{ reboot.elapsed }} seconds to reboot"

  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version in ['8', '9']
    - (reboot_node_allowed is defined and reboot_node_allowed)
  tags: yb-prebuilt-ami

- block:
  - set_fact:
      systemd_dir: "/etc/systemd/system"

  # Give yugabyte user sudo access to start/stop/restart master and tserver
  - name: Add yugabyte sudo user without password
    lineinfile:
      dest: /etc/sudoers.d/yugabyte
      line: 'yugabyte ALL=(ALL:ALL) NOPASSWD: /bin/systemctl start yb-master,
            /bin/systemctl stop yb-master,
            /bin/systemctl restart yb-master,
            /bin/systemctl enable yb-master,
            /bin/systemctl disable yb-master,
            /bin/systemctl start yb-tserver,
            /bin/systemctl stop yb-tserver,
            /bin/systemctl restart yb-tserver,
            /bin/systemctl enable yb-tserver,
            /bin/systemctl disable yb-tserver,
            /bin/systemctl start yb-controller,
            /bin/systemctl stop yb-controller,
            /bin/systemctl restart yb-controller,
            /bin/systemctl enable yb-controller,
            /bin/systemctl disable yb-controller,
            /bin/systemctl start yb-bind_check.service,
            /bin/systemctl stop yb-bind_check.service,
            /bin/systemctl restart yb-bind_check.service,
            /bin/systemctl enable yb-bind_check.service,
            /bin/systemctl disable yb-bind_check.service,
            /bin/systemctl start yb-zip_purge_yb_logs.timer,
            /bin/systemctl stop yb-zip_purge_yb_logs.timer,
            /bin/systemctl restart yb-zip_purge_yb_logs.timer,
            /bin/systemctl enable yb-zip_purge_yb_logs.timer,
            /bin/systemctl disable yb-zip_purge_yb_logs.timer,
            /bin/systemctl start yb-clean_cores.timer,
            /bin/systemctl stop yb-clean_cores.timer,
            /bin/systemctl restart yb-clean_cores.timer,
            /bin/systemctl enable yb-clean_cores.timer,
            /bin/systemctl disable yb-clean_cores.timer,
            /bin/systemctl start yb-collect_metrics.timer,
            /bin/systemctl stop yb-collect_metrics.timer,
            /bin/systemctl restart yb-collect_metrics.timer,
            /bin/systemctl enable yb-collect_metrics.timer,
            /bin/systemctl disable yb-collect_metrics.timer,
            /bin/systemctl start yb-zip_purge_yb_logs,
            /bin/systemctl stop yb-zip_purge_yb_logs,
            /bin/systemctl restart yb-zip_purge_yb_logs,
            /bin/systemctl enable yb-zip_purge_yb_logs,
            /bin/systemctl disable yb-zip_purge_yb_logs,
            /bin/systemctl start yb-clean_cores,
            /bin/systemctl stop yb-clean_cores,
            /bin/systemctl restart yb-clean_cores,
            /bin/systemctl enable yb-clean_cores,
            /bin/systemctl disable yb-clean_cores,
            /bin/systemctl start yb-collect_metrics,
            /bin/systemctl stop yb-collect_metrics,
            /bin/systemctl restart yb-collect_metrics,
            /bin/systemctl enable yb-collect_metrics,
            /bin/systemctl disable yb-collect_metrics,
            /bin/systemctl daemon-reload'
      create: yes
      state: present
      mode: 0440
      validate: 'visudo -cf %s'

  - name: Set includedir in sudoers
    lineinfile:
      dest: /etc/sudoers
      line: "#includedir /etc/sudoers.d"
      state: present
      validate: "/usr/sbin/visudo -cf %s"

  # YBM use case will revisit at later stage for YNP
  - name: setup-postgres-cgroups
    include_role:
      name: setup-cgroup

  - name: Setup OpenTelemetry Collector
    include_role:
      name: manage_otel_collector
    when: install_otel_collector is defined and install_otel_collector|bool

  # Adding systemd service files for yb-master and yb-tserver
  - name: Add yb-master.service
    template:
      src: "roles/configure-cluster-server/templates/yb-master.service"
      dest: "{{ systemd_dir }}/yb-master.service"
      owner: "{{ user_name }}"
      group: "{{ user_name }}"
      mode: 0644

  - name: Add yb-tserver.service
    template:
      src: "roles/configure-cluster-server/templates/yb-tserver.service"
      dest: "{{ systemd_dir }}/yb-tserver.service"
      owner: "{{ user_name }}"
      group: "{{ user_name }}"
      mode: 0644

  # Adding systemd service files for yb-controller
  - name: Add yb-controller.service
    template:
      src: "roles/configure-cluster-server/templates/yb-controller.service"
      dest: "{{ systemd_dir }}/yb-controller.service"
      owner: "{{ user_name }}"
      group: "{{ user_name }}"
      mode: 0644

  # Adding yb-bind_check service files for the availability of the port
  - name: Add yb-bind_check.service
    template:
      src: "roles/configure-cluster-server/templates/yb-bind_check.service"
      dest: "{{ systemd_dir }}/yb-bind_check.service"
      owner: "{{ user_name }}"
      group: "{{ user_name }}"
      mode: 0644

  # Adding systemd service and timer files for zip_purge_yb_logs
  - name: Add yb-zip_purge_yb_logs.service
    template:
      src: "roles/configure-cluster-server/templates/yb-zip_purge_yb_logs.service"
      dest: "{{ systemd_dir }}/yb-zip_purge_yb_logs.service"
      owner: "{{ user_name }}"
      group: "{{ user_name }}"
      mode: 0644

  - name: Add yb-zip_purge_yb_logs.timer
    template:
      src: "roles/configure-cluster-server/templates/yb-zip_purge_yb_logs.timer"
      dest: "{{ systemd_dir }}/yb-zip_purge_yb_logs.timer"
      owner: "{{ user_name }}"
      group: "{{ user_name }}"
      mode: 0644

  # Adding systemd service and timer files for clean_cores
  - name: Add yb-clean_cores.service
    template:
      src: "roles/configure-cluster-server/templates/yb-clean_cores.service"
      dest: "{{ systemd_dir }}/yb-clean_cores.service"
      owner: "{{ user_name }}"
      group: "{{ user_name }}"
      mode: 0644

  - name: Add yb-clean_cores.timer
    template:
      src: "roles/configure-cluster-server/templates/yb-clean_cores.timer"
      dest: "{{ systemd_dir }}/yb-clean_cores.timer"
      owner: "{{ user_name }}"
      group: "{{ user_name }}"
      mode: 0644

  # Adding systemd service and timer files for collect_metrics
  - name: Add yb-collect_metrics.service
    template:
      src: "roles/configure-cluster-server/templates/yb-collect_metrics.service"
      dest: "{{ systemd_dir }}/yb-collect_metrics.service"
      owner: "{{ user_name }}"
      group: "{{ user_name }}"
      mode: 0644

  - name: Add yb-collect_metrics.timer
    template:
      src: "roles/configure-cluster-server/templates/yb-collect_metrics.timer"
      dest: "{{ systemd_dir }}/yb-collect_metrics.timer"
      owner: "{{ user_name }}"
      group: "{{ user_name }}"
      mode: 0644

  - name: Create or Update .bashrc file to display systemd mode upon ssh login
    blockinfile:
      dest: "{{ yb_home_dir }}/.bash_profile"
      block: |
        ORANGE='\033[0;33m'
        NC='\033[0m' # No Color

        if [[ $- == *i* ]]
            then export PS1="[\u@\h ~]\$ "
            if [ "$EUID" -eq 0 ]
                then echo -e "Use ${ORANGE}'sudo systemctl'${NC} to manage YB software"
            fi
        fi
      create: yes
      state: present
      mode: 0644

  tags: systemd_upgrade
  when: (systemd_option and ((ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7')
        or (ansible_distribution == 'Amazon' and ansible_distribution_major_version == '2')))

- block:
  - name: Check if /etc/apt/apt.conf.d/20auto-upgrades exists
    stat:
      path: /etc/apt/apt.conf.d/20auto-upgrades
    register: autoupgrade_file

  - name: Reenable unattended upgrades
    raw: 'sed -i /Unattended-Upgrade/s/"0"/"1"/ /etc/apt/apt.conf.d/20auto-upgrades'
    when: autoupgrade_file.stat.exists

  - name: Check if /etc/apt/apt.conf.d/50unattended-upgrades exists
    stat:
      path: /etc/apt/apt.conf.d/50unattended-upgrades
    register: unattendedupgrade_file

  - name: Disable automatic reboot
    lineinfile:
      path: /etc/apt/apt.conf.d/50unattended-upgrades
      line: Unattended-Upgrade::Automatic-Reboot "false";
    when: unattendedupgrade_file.stat.exists
  when: ansible_distribution == "Ubuntu"
  tags: yb-prebuilt-ami

- name: Add prometheus user to yugabyte group
  ansible.builtin.user:
    name: prometheus
    groups: yugabyte
    append: true
  become: yes

- name: Restart the node_exporter service
  service:
    name: "node_exporter.service"
    state: restarted

- name: Ensure the service is running
  service:
    name: "node_exporter.service"
    state: started
