
- name: Setup | Create config directory for {{ yb_process_type }}
  file:
    path: "{{ yb_conf_dir }}"
    state: directory
    mode: 0755
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
  tags: yb-prebuilt-ami

- set_fact:
    _mount_points: "{{ mount_points.split(',') }}"
  when: _mount_points is not defined
  tags: always

- set_fact:
    _mount_logs_dir: "{{ _mount_points[0] }}/yb-data/{{ yb_process_type }}/logs"
  tags: always

- set_fact:
    server_gflags: {}
  tags: always

- set_fact:
    yb_process_name: "yb-{{ yb_process_type }}"
  tags: always

- block:
  - name: Get process state for {{ yb_process_name }}
    shell:
       # pgrep returns non-zero when the pattern is not found.
      cmd: "pgrep -fl {{ yb_process_name }} || true"
    register: yb_process_state
  - name: Print process state for {{ yb_process_name }}
    debug:
      var: yb_process_state
  - name: Assert process state for {{ yb_process_name }} is {{ expected_yb_process_state }}
    fail:
      msg: Expected process state for {{ yb_process_name }} is {{ expected_yb_process_state }}
    when: (expected_yb_process_state == "running" and yb_process_name not in yb_process_state.stdout) or
          (expected_yb_process_state == "stopped" and yb_process_name in yb_process_state.stdout)
  tags: always
  when: expected_yb_process_state is defined

- name: Deleting files and directories
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ delete_paths }}"
  tags: always
  when: delete_paths is defined

- name: Setup | Create {{ yb_process_type }} logs directory
  file:
    path: "{{ _mount_logs_dir }}"
    state: directory
    mode: 0755
    owner: "{{ user_name }}"
    group: "{{ user_name }}"

- name: Setup | Symlink {{ yb_process_type }} logs directory
  file:
    src: "{{ _mount_logs_dir }}"
    dest: "{{ yb_logs_dir }}"
    mode: 0755
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    state: link
    force: yes
  tags: yb-prebuilt-ami

# Set the gflags in conf file
# gflags has greater precedence over extra_gflags
- block:
  - name: Configure | Create {{ yb_process_type }} gflags
    set_fact:
      server_gflags: "{{ server_gflags | combine ({ item.key : item.value }) }}"
    with_dict: "{{ extra_gflags | combine(gflags | default({})) }}"
    when: item.key != 'postmaster_cgroup'

  # postmaster_cgroup gflag, which gets handled seperately.
  - block:
    - name: Determine cgroup version
      ansible.builtin.shell:
        cmd: "stat -fc %T /sys/fs/cgroup/"
      register: cgroup_output
    - name: Get yugabyte user id
      ansible.builtin.shell:
        cmd: "id -u {{ user_name }}"
      register: id_output

    - name: Set cgroupv1 path
      ansible.builtin.set_fact:
        postmaster_cgroup_path: /sys/fs/cgroup/memory/ysql
      when: cgroup_output.stdout != 'cgroup2fs'
    - name: Set cgroupv2 path
      ansible.builtin.set_fact:
        postmaster_cgroup_path: "/sys/fs/cgroup/user.slice/user-{{ id_output.stdout }}.slice/user\
                                 @{{ id_output.stdout }}.service/ysql"
      when: cgroup_output.stdout == 'cgroup2fs'

    - name: Configure | Set postmaster_cgroup gflag
      set_fact:
        server_gflags: "{{ server_gflags | combine ({ 'postmaster_cgroup': postmaster_cgroup_path }) }}"
    when:
      - gflags.postmaster_cgroup is defined or extra_gflags.postmaster_cgroup is defined

  # This overwrites the existing file at once.
  - name: Configure | Copy {{ yb_process_type }} gflags conf file
    template:
      src: yb-server-gflags.conf.j2
      dest: "{{ yb_conf_file }}"
      force: yes
      mode: 0644
      owner: "{{ user_name }}"
      group: "{{ user_name }}"
  tags:
    - never
    - override_gflags

# Cronjob approach for starting yb-master and yb-tserver
- name: Setup cron to check liveness of {{ yb_process_type }}
  cron:
    name: "Check liveness of {{ yb_process_type }}"
    minute: "*/1"
    user: "{{ user_name }}"
    job: >
      {{ yb_bin_dir }}/yb-server-ctl.sh {{ yb_process_type }} cron-check ||
      {{ yb_bin_dir }}/yb-server-ctl.sh {{ yb_process_type }} start
  register: cron_result
  failed_when:
    - cron_result is failed
    - cloud_type != "onprem"
  when: not systemd_option
  tags: yb-prebuilt-ami

- block:
  # Remove old cron jobs and its tasks that start master and tserver
  - name: Remove old cron job that starts master (for upgrades)
    cron:
      name: "Check liveness of master"
      user: "yugabyte"
      state: absent

  - name: Remove old cron job that starts tserver (for upgrades)
    cron:
      name: "Check liveness of tserver"
      user: "yugabyte"
      state: absent

  tags:
    - override_gflags
    - systemd_upgrade
  when: systemd_option
