# Copyright 2019 YugaByte, Inc. and Contributors
#
# Licensed under the Polyform Free Trial License 1.0.0 (the "License"); you
# may not use this file except in compliance with the License. You
# may obtain a copy of the License at
#
# https://github.com/YugaByte/yugabyte-db/blob/master/licenses/POLYFORM-FREE-TRIAL-LICENSE-1.0.0.txt

- name: Perform command {{ command }} on YB {{ process }}
  hosts: "{{ instance_search_pattern }}"
  gather_facts: yes
  vars_files:
    - "{{ vars_file | default(placeholder_vars_file) }}"
  vars:
    server_home: "{{ yb_home_dir | default('/home/yugabyte') }}/{{ process }}"
    script_to_run: "{{ yb_home_dir | default('/home/yugabyte') }}/bin/yb-server-ctl.sh"
    systemd_option: "{{ systemd_services | default(false) }}"
    is_clean_command: "{{ command == 'clean' or command == 'clean-logs' or command =='clean-instance' }}"
    is_destroy_command: "{{ is_clean_command or  command == 'stop-destroy' }}"
    cron_command:  "{{ 'stop' if command == 'stop-destroy' else command}}"
    remove_conf_file: "{{ deconfigure | default(false) }}"
  tasks:
    - block:
      - name: Check ctl script exists
        stat:
          path: "{{ script_to_run }}"
        register: ctl_script_stat
      - name: Print ctl_script_stat
        debug:
          var: ctl_script_stat
      - name: Call the ctl script with appropriate args
        shell: "{{ script_to_run }} {{ process }} {{ cron_command }}"
        when: not is_destroy_command or ctl_script_stat.stat.exists
        # Always run whether or not script exists if not calling AnsibleDestroyServer.
      when:
        - not systemd_option or is_clean_command
        - process != "thirdparty" and process != "platform-services"

    - name: Control {{ process }} process with systemd
      block:
        - name: Determine system or user scope
          stat:
            path: "{{ yb_home_dir | default('/home/yugabyte') }}/.config/systemd/user/"
          register: systemd_user
        - name: Print systemd_user
          debug:
            var: systemd_user
        - name: Set the systemd prefix
          set_fact:
            systemd_prefix: "{{ 'systemctl --user' if systemd_user.stat.exists else 'sudo systemctl'}}"
        - name: Set systemd name
          set_fact:
            systemd_process: "{{ process if process == 'otel-collector' else 'yb-' ~ process }}"
        - name: Print systemd_prefix
          debug:
            var: systemd_prefix
        - block:
          - name: Reload daemon
            shell: "{{ systemd_prefix }} daemon-reload"
          - name: Enable the {{ systemd_process }}
            shell: "{{ systemd_prefix }} enable {{ systemd_process }}"
            when: command == 'start'
          - name: Perform {{ command }} on the {{ systemd_process }}
            shell: "{{ systemd_prefix }} {{ command }} {{ systemd_process }}"
            when: command == 'start' or command == 'stop'
          - name: Disable the {{ systemd_process }}
            shell: "{{ systemd_prefix }} disable {{ systemd_process }}"
            when: command == 'stop'
          - name: Reload daemon
            shell: "{{ systemd_prefix }} daemon-reload"
          when: command != "stop-destroy"
        - name: Check if the logs cleanup script exists
          stat:
            path: "{{ yb_home_dir }}/bin/zip_purge_yb_logs.sh"
          register: logs_cleanup_script
        - name: Update the logs purge script if it already exists
          template:
            src: "roles/configure-cluster-server/templates/zip_purge_yb_logs.sh.j2"
            dest: "{{ yb_home_dir }}/bin/zip_purge_yb_logs.sh"
            force: yes
            mode: 0755
            owner: "{{ user_name }}"
            group: "{{ user_name }}"
          when: logs_cleanup_script.stat.exists

        - name: Stop the {{ systemd_process }} process with systemd on destroy
          block:
            - name: Reload daemon
              shell: "{{ systemd_prefix }} daemon-reload"
            - name: "{{ systemd_process }} status output"
              shell: "{{ systemd_prefix }} status {{ systemd_process }}"
              register: systemd_status_output
              ignore_errors: True
            - name: Print systemd_status_output.rc
              debug:
                msg: "{{ systemd_status_output.rc }}"
            - name: Perform stop on the {{ systemd_process }}
              shell: "{{ systemd_prefix }} stop {{ systemd_process }}"
              when: systemd_status_output.rc != 4
            - name: Disable the {{ systemd_process }}
              shell: "{{ systemd_prefix }} disable {{ systemd_process }}"
              when: systemd_status_output.rc != 4
            - name: Reload daemon
              shell: "{{ systemd_prefix }} daemon-reload"
          when:
            - command == "stop-destroy"
      when: systemd_option and process != "thirdparty" and process != "platform-services"

    - name: Remove server conf file of {{ process }}
      file:
        path: "{{ server_home }}/conf/server.conf"
        state: absent
      when:
        - remove_conf_file and process != "thirdparty" and process != "platform-services"
        - command == 'stop' or command == 'stop-destroy'

- name: Removing thirdparty services
  hosts: "{{ instance_search_pattern }}"
  gather_facts: "{{ process == 'thirdparty' and command == 'remove-services'}}"
  vars_files:
    - "{{ vars_file | default(placeholder_vars_file) }}"
  tasks:
    - block:
      - set_fact:
          prometheus_systemd_unit_dir: "/lib/systemd/system"
      - set_fact:
          prometheus_systemd_unit_dir: "/usr/lib/systemd/system"
        when: ansible_os_family == "Suse"

      - block:
        - name: Check node exporter service exists
          stat:
            path: "{{ prometheus_systemd_unit_dir }}/node_exporter.service"
          register: node_exporter_stat
        - name: Log node_exporter_stat
          debug:
            var: node_exporter_stat
        - name: Stop node exporter service
          service:
            enabled: yes
            name: node_exporter
            state: stopped
          become: yes
          become_method: sudo
          when: node_exporter_stat.stat.exists

        - name: Delete node exporter service
          file:
            path: "{{ prometheus_systemd_unit_dir }}/node_exporter.service"
            state: absent
          become: yes
          become_method: sudo
        when: clean_node_exporter is defined and clean_node_exporter|bool

      - name: Perform daemon-reload for removed services
        shell:
          cmd: "systemctl daemon-reload"
        become: yes
        become_method: sudo
      when: process == "thirdparty" and command == "remove-services"

- name: Removing platform services
  hosts: "{{ instance_search_pattern }}"
  gather_facts: "{{ process == 'platform-services' and command == 'remove-services'}}"
  vars_files:
    - "{{ vars_file | default(placeholder_vars_file) }}"
  tasks:
    - block:
      - name: Determine system or user scope
        stat:
          path: "{{ yb_home_dir | default('/home/yugabyte') }}/.config/systemd/user/"
        become: yes
        become_method: sudo
        register: systemd_user

      - set_fact:
          systemd_dir: "/etc/systemd/system"
      - set_fact:
          systemd_dir: "/usr/lib/systemd/system"
        when: ansible_os_family == "Suse"
      - set_fact:
          systemd_dir: "{{ yb_home_dir | default('/home/yugabyte') }}/.config/systemd/user"
        when: systemd_user.stat.exists

      - name: Delete clean cores timer
        file:
          path: "{{ systemd_dir }}/yb-clean_cores.timer"
          state: absent
        become: yes
        become_method: sudo

      - name: Delete clean cores service
        file:
          path: "{{ systemd_dir }}/yb-clean_cores.service"
          state: absent
        become: yes
        become_method: sudo

      - name: Delete purge logs timer
        file:
          path: "{{ systemd_dir }}/yb-zip_purge_yb_logs.timer"
          state: absent
        become: yes
        become_method: sudo

      - name: Delete purge logs service
        file:
          path: "{{ systemd_dir }}/yb-zip_purge_yb_logs.service"
          state: absent
        become: yes
        become_method: sudo

      - name: Delete yb-bind check service
        file:
          path: "{{ systemd_dir }}/yb-bind_check.service"
          state: absent
        become: yes
        become_method: sudo

      - name: Delete metrics collection timer
        file:
          path: "{{ systemd_dir }}/yb-collect_metrics.timer"
          state: absent
        become: yes
        become_method: sudo

      - name: Delete metrics collection service
        file:
          path: "{{ systemd_dir }}/yb-collect_metrics.service"
          state: absent
        become: yes
        become_method: sudo

      - name: Delete yb-master service
        file:
          path: "{{ systemd_dir }}/yb-master.service"
          state: absent
        become: yes
        become_method: sudo

      - name: Delete yb-tserver service
        file:
          path: "{{ systemd_dir }}/yb-tserver.service"
          state: absent
        become: yes
        become_method: sudo

      - name: Delete yb-controller service
        file:
          path: "{{ systemd_dir }}/yb-controller.service"
          state: absent
        become: yes
        become_method: sudo

      - name: Delete otel collector service
        file:
          path: "{{ systemd_dir }}/otel-collector.service"
          state: absent
        become: yes
        become_method: sudo
        when: clean_otel_collector is defined and clean_otel_collector|bool

      - name: Perform daemon-reload for removed services
        shell:
          cmd: "systemctl daemon-reload"
        become: yes
        become_method: sudo

      - name: Perform reset-failed for removed services
        shell:
          cmd: "systemctl reset-failed"
        become: yes
        become_method: sudo

      - name: Remove cron job that collects metrics
        cron:
          name: "metric collection every minute"
          user: "yugabyte"
          state: absent
        become: yes
        become_method: sudo

      - name: Remove old cron job that cleans cores
        cron:
          name: "cleanup core files every 5 minutes"
          user: "yugabyte"
          state: absent
        become: yes
        become_method: sudo

      - name: Remove old cron job that purges logs
        cron:
          name: "cleanup yb log files every 5 minutes"
          user: "yugabyte"
          state: absent
        become: yes
        become_method: sudo
      when: process == "platform-services" and command == "remove-services"
