CALL TEST_reset();
SELECT yb_xcluster_ddl_replication.get_replication_role();
 get_replication_role 
----------------------
 source
(1 row)

-- Verify that temporary objects are not captured.
CREATE TEMP TABLE temp_foo(i int PRIMARY KEY);
DROP TABLE temp_foo;
SELECT yb_data FROM TEST_filtered_ddl_queue() ORDER BY ddl_end_time;
 yb_data 
---------
(0 rows)

-- Verify that regular tables are captured.
CREATE TABLE foo(i int PRIMARY KEY);
INSERT INTO foo(i) VALUES (1), (2), (3);
-- Check with manual replication flags enabled, ddl string is captured with flag.
SET yb_xcluster_ddl_replication.enable_manual_ddl_replication = 1;
CREATE TABLE manual_foo(i int PRIMARY KEY);
SET yb_xcluster_ddl_replication.enable_manual_ddl_replication = 0;
-- Verify that extra info is captured.
CREATE TABLE extra_foo(i int PRIMARY KEY) WITH (COLOCATION = false) SPLIT INTO 1 TABLETS;
-- Verify that info for unique constraint indexes are also captured.
CREATE TABLE unique_foo(i int PRIMARY KEY, u text UNIQUE);
SELECT yb_data FROM TEST_filtered_ddl_queue() ORDER BY ddl_end_time;
                                                                                                                                                  yb_data                                                                                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"user": "yugabyte", "query": "CREATE TABLE foo(i int PRIMARY KEY);", "schema": "public", "version": 1, "command_tag": "CREATE TABLE", "new_rel_map": [{"rel_name": "foo", "relfile_oid": "***"}]}
 {"user": "yugabyte", "query": "CREATE TABLE manual_foo(i int PRIMARY KEY);", "schema": "public", "version": 1, "command_tag": "CREATE TABLE", "manual_replication": true}
 {"user": "yugabyte", "query": "CREATE TABLE extra_foo(i int PRIMARY KEY) WITH (COLOCATION = false) SPLIT INTO 1 TABLETS;", "schema": "public", "version": 1, "command_tag": "CREATE TABLE", "new_rel_map": [{"rel_name": "extra_foo", "relfile_oid": "***"}]}
 {"user": "yugabyte", "query": "CREATE TABLE unique_foo(i int PRIMARY KEY, u text UNIQUE);", "schema": "public", "version": 1, "command_tag": "CREATE TABLE", "new_rel_map": [{"rel_name": "unique_foo", "relfile_oid": "***"}, {"is_index": true, "rel_name": "unique_foo_u_key", "relfile_oid": "***"}]}
(4 rows)

SELECT yb_data FROM yb_xcluster_ddl_replication.replicated_ddls ORDER BY ddl_end_time;
                                                yb_data                                                 
--------------------------------------------------------------------------------------------------------
 {"query": "CREATE TABLE foo(i int PRIMARY KEY);"}
 {"query": "CREATE TABLE manual_foo(i int PRIMARY KEY);"}
 {"query": "CREATE TABLE extra_foo(i int PRIMARY KEY) WITH (COLOCATION = false) SPLIT INTO 1 TABLETS;"}
 {"query": "CREATE TABLE unique_foo(i int PRIMARY KEY, u text UNIQUE);"}
(4 rows)

-- Test tables partitioned by their primary key or a column.
CREATE TABLE foo_partitioned_by_pkey(id int, PRIMARY KEY (id)) PARTITION BY RANGE (id);
CREATE TABLE foo_partitioned_by_col(id int) PARTITION BY RANGE (id);
CREATE TABLE partition1 PARTITION OF foo_partitioned_by_col FOR VALUES FROM (1) TO (10);
CREATE TABLE partition2 PARTITION OF foo_partitioned_by_col FOR VALUES FROM (10) TO (20);
INSERT INTO foo_partitioned_by_col(id) VALUES (1), (2), (3), (10), (11), (12);
-- Test for relations that trigger nonconcurrent backfills.
CREATE INDEX NONCONCURRENTLY nonconcurrent_foo on foo(i);
CREATE INDEX NONCONCURRENTLY on foo(i);  -- test without a name
ALTER TABLE foo ADD CONSTRAINT constraint_foo UNIQUE (i);
CREATE UNIQUE INDEX partitioned_index ON foo_partitioned_by_col(id);
-- Now test dropping these tables.
DROP TABLE foo;
-- Check with manual replication flags enabled, ddl string is captured with flag.
SET yb_xcluster_ddl_replication.enable_manual_ddl_replication = 1;
DROP TABLE manual_foo;
SET yb_xcluster_ddl_replication.enable_manual_ddl_replication = 0;
DROP TABLE extra_foo;
DROP TABLE unique_foo;
DROP TABLE foo_partitioned_by_pkey;
DROP TABLE foo_partitioned_by_col;
SELECT yb_data FROM TEST_filtered_ddl_queue() ORDER BY ddl_end_time;
                                                                                                                                                                                                         yb_data                                                                                                                                                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"user": "yugabyte", "query": "CREATE TABLE foo(i int PRIMARY KEY);", "schema": "public", "version": 1, "command_tag": "CREATE TABLE", "new_rel_map": [{"rel_name": "foo", "relfile_oid": "***"}]}
 {"user": "yugabyte", "query": "CREATE TABLE manual_foo(i int PRIMARY KEY);", "schema": "public", "version": 1, "command_tag": "CREATE TABLE", "manual_replication": true}
 {"user": "yugabyte", "query": "CREATE TABLE extra_foo(i int PRIMARY KEY) WITH (COLOCATION = false) SPLIT INTO 1 TABLETS;", "schema": "public", "version": 1, "command_tag": "CREATE TABLE", "new_rel_map": [{"rel_name": "extra_foo", "relfile_oid": "***"}]}
 {"user": "yugabyte", "query": "CREATE TABLE unique_foo(i int PRIMARY KEY, u text UNIQUE);", "schema": "public", "version": 1, "command_tag": "CREATE TABLE", "new_rel_map": [{"rel_name": "unique_foo", "relfile_oid": "***"}, {"is_index": true, "rel_name": "unique_foo_u_key", "relfile_oid": "***"}]}
 {"user": "yugabyte", "query": "CREATE TABLE foo_partitioned_by_pkey(id int, PRIMARY KEY (id)) PARTITION BY RANGE (id);", "schema": "public", "version": 1, "command_tag": "CREATE TABLE", "new_rel_map": [{"rel_name": "foo_partitioned_by_pkey", "relfile_oid": "***"}]}
 {"user": "yugabyte", "query": "CREATE TABLE foo_partitioned_by_col(id int) PARTITION BY RANGE (id);", "schema": "public", "version": 1, "command_tag": "CREATE TABLE", "new_rel_map": [{"rel_name": "foo_partitioned_by_col", "relfile_oid": "***"}]}
 {"user": "yugabyte", "query": "CREATE TABLE partition1 PARTITION OF foo_partitioned_by_col FOR VALUES FROM (1) TO (10);", "schema": "public", "version": 1, "command_tag": "CREATE TABLE", "new_rel_map": [{"rel_name": "partition1", "relfile_oid": "***"}]}
 {"user": "yugabyte", "query": "CREATE TABLE partition2 PARTITION OF foo_partitioned_by_col FOR VALUES FROM (10) TO (20);", "schema": "public", "version": 1, "command_tag": "CREATE TABLE", "new_rel_map": [{"rel_name": "partition2", "relfile_oid": "***"}]}
 {"user": "yugabyte", "query": "CREATE INDEX NONCONCURRENTLY nonconcurrent_foo on foo(i);", "schema": "public", "version": 1, "command_tag": "CREATE INDEX", "new_rel_map": [{"is_index": true, "rel_name": "nonconcurrent_foo", "relfile_oid": "***"}]}
 {"user": "yugabyte", "query": "CREATE INDEX NONCONCURRENTLY on foo(i);", "schema": "public", "version": 1, "command_tag": "CREATE INDEX", "new_rel_map": [{"is_index": true, "rel_name": "foo_i_idx", "relfile_oid": "***"}]}
 {"user": "yugabyte", "query": "ALTER TABLE foo ADD CONSTRAINT constraint_foo UNIQUE (i);", "schema": "public", "version": 1, "command_tag": "ALTER TABLE", "new_rel_map": [{"is_index": true, "rel_name": "constraint_foo", "relfile_oid": "***"}]}
 {"user": "yugabyte", "query": "CREATE UNIQUE INDEX partitioned_index ON foo_partitioned_by_col(id);", "schema": "public", "version": 1, "command_tag": "CREATE INDEX", "new_rel_map": [{"is_index": true, "rel_name": "partitioned_index", "relfile_oid": "***"}, {"is_index": true, "rel_name": "partition1_id_idx", "relfile_oid": "***"}, {"is_index": true, "rel_name": "partition2_id_idx", "relfile_oid": "***"}]}
 {"user": "yugabyte", "query": "DROP TABLE foo;", "schema": "public", "version": 1, "command_tag": "DROP TABLE"}
 {"user": "yugabyte", "query": "DROP TABLE manual_foo;", "schema": "public", "version": 1, "command_tag": "DROP TABLE", "manual_replication": true}
 {"user": "yugabyte", "query": "DROP TABLE extra_foo;", "schema": "public", "version": 1, "command_tag": "DROP TABLE"}
 {"user": "yugabyte", "query": "DROP TABLE unique_foo;", "schema": "public", "version": 1, "command_tag": "DROP TABLE"}
 {"user": "yugabyte", "query": "DROP TABLE foo_partitioned_by_pkey;", "schema": "public", "version": 1, "command_tag": "DROP TABLE"}
 {"user": "yugabyte", "query": "DROP TABLE foo_partitioned_by_col;", "schema": "public", "version": 1, "command_tag": "DROP TABLE"}
(18 rows)

SELECT yb_data FROM yb_xcluster_ddl_replication.replicated_ddls ORDER BY ddl_end_time;
                                                yb_data                                                 
--------------------------------------------------------------------------------------------------------
 {"query": "CREATE TABLE foo(i int PRIMARY KEY);"}
 {"query": "CREATE TABLE manual_foo(i int PRIMARY KEY);"}
 {"query": "CREATE TABLE extra_foo(i int PRIMARY KEY) WITH (COLOCATION = false) SPLIT INTO 1 TABLETS;"}
 {"query": "CREATE TABLE unique_foo(i int PRIMARY KEY, u text UNIQUE);"}
 {"query": "CREATE TABLE foo_partitioned_by_pkey(id int, PRIMARY KEY (id)) PARTITION BY RANGE (id);"}
 {"query": "CREATE TABLE foo_partitioned_by_col(id int) PARTITION BY RANGE (id);"}
 {"query": "CREATE TABLE partition1 PARTITION OF foo_partitioned_by_col FOR VALUES FROM (1) TO (10);"}
 {"query": "CREATE TABLE partition2 PARTITION OF foo_partitioned_by_col FOR VALUES FROM (10) TO (20);"}
 {"query": "CREATE INDEX NONCONCURRENTLY nonconcurrent_foo on foo(i);"}
 {"query": "CREATE INDEX NONCONCURRENTLY on foo(i);"}
 {"query": "ALTER TABLE foo ADD CONSTRAINT constraint_foo UNIQUE (i);"}
 {"query": "CREATE UNIQUE INDEX partitioned_index ON foo_partitioned_by_col(id);"}
 {"query": "DROP TABLE foo;"}
 {"query": "DROP TABLE manual_foo;"}
 {"query": "DROP TABLE extra_foo;"}
 {"query": "DROP TABLE unique_foo;"}
 {"query": "DROP TABLE foo_partitioned_by_pkey;"}
 {"query": "DROP TABLE foo_partitioned_by_col;"}
(18 rows)

-- Test mix of temp and regular tables.
CREATE TEMP TABLE temp_foo(i int PRIMARY KEY);
CREATE TABLE foo(i int PRIMARY KEY);
DROP TABLE temp_foo, foo; -- should fail
ERROR:  unsupported DROP command, found mix of temporary and persisted objects in DDL command
DETAIL:  To manually replicate, run DDL on the source followed by the target with SET yb_xcluster_ddl_replication.enable_manual_ddl_replication = true
DROP TABLE foo, temp_foo; -- should fail
ERROR:  unsupported DROP command, found mix of temporary and persisted objects in DDL command
DETAIL:  To manually replicate, run DDL on the source followed by the target with SET yb_xcluster_ddl_replication.enable_manual_ddl_replication = true
DROP TABLE temp_foo;
DROP TABLE foo;
select * from TEST_verify_replicated_ddls();
 test_verify_replicated_ddls 
-----------------------------
 t
(1 row)

