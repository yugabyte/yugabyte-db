\c colocation_test
CALL TEST_reset();
-- Verify that temporary objects are not captured.
SET yb_xcluster_ddl_replication.replication_role = SOURCE;
CREATE TEMP TABLE temp_foo(i int PRIMARY KEY);
-- Verify that colocated tables are blocked.
CREATE TABLE coloc_foo(i int PRIMARY KEY);
ERROR:  Colocated objects are not yet supported by yb_xcluster_ddl_replication
To manually replicate, run DDL on the source followed by the target with SET yb_xcluster_ddl_replication.enable_manual_ddl_replication = true
SELECT yb_data FROM yb_xcluster_ddl_replication.ddl_queue ORDER BY start_time;
 yb_data
---------
(0 rows)

SET yb_xcluster_ddl_replication.replication_role = BIDIRECTIONAL;
-- Verify that non-colocated table is captured.
CREATE TABLE non_coloc_foo(i int PRIMARY KEY) WITH (COLOCATION = false);
SELECT yb_data FROM yb_xcluster_ddl_replication.ddl_queue ORDER BY start_time;
                                                                                                                     yb_data
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"user": "yugabyte", "query": "CREATE TABLE non_coloc_foo(i int PRIMARY KEY) WITH (COLOCATION = false);", "schema": "public", "version": 1, "command_tag": "CREATE TABLE", "new_rel_map": [{"rel_name": "non_coloc_foo", "relfile_oid": 16420}]}
(1 row)

SELECT * FROM yb_xcluster_ddl_replication.replicated_ddls ORDER BY start_time;
 start_time | query_id |                                        yb_data
------------+----------+---------------------------------------------------------------------------------------
          1 |        1 | {"query": "CREATE TABLE non_coloc_foo(i int PRIMARY KEY) WITH (COLOCATION = false);"}
(1 row)
