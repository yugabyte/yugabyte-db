CREATE EXTENSION postgres_fdw;
--
-- Test to validate behavior of 'server_type' option in foreign server.
--
CREATE SERVER s_yugabytedb FOREIGN DATA WRAPPER postgres_fdw OPTIONS (server_type 'yugabytedb');
CREATE SERVER s_postgres FOREIGN DATA WRAPPER postgres_fdw OPTIONS (server_type 'postgresql');
CREATE SERVER s_yugabytedb2 FOREIGN DATA WRAPPER postgres_fdw OPTIONS (dbname 'yugabyte', server_type 'yugabytedb');
CREATE SERVER s_nosrvtype FOREIGN DATA WRAPPER postgres_fdw;
NOTICE:  no server_type specified. Defaulting to PostgreSQL.
HINT:  Use "ALTER SERVER ... OPTIONS (ADD server_type '<type>')" to explicitly set server_type.
CREATE SERVER s_nosrvtype2 FOREIGN DATA WRAPPER postgres_fdw OPTIONS (dbname 'yugabyte', host '127.0.0.1');
NOTICE:  no server_type specified. Defaulting to PostgreSQL.
HINT:  Use "ALTER SERVER ... OPTIONS (ADD server_type '<type>')" to explicitly set server_type.
CREATE SERVER s_invalidsrvtype FOREIGN DATA WRAPPER postgres_fdw OPTIONS (server_type 'something_invalid');
ERROR:  invalid server_type 'something_invalid'
HINT:  Supported server types: [postgreSQL, yugabyteDB]
CREATE SERVER s_invalidsrvtype2 FOREIGN DATA WRAPPER postgres_fdw OPTIONS (server_type '');
ERROR:  invalid server_type ''
HINT:  Supported server types: [postgreSQL, yugabyteDB]
SELECT srv.srvname, srv.srvoptions
FROM pg_foreign_server srv JOIN pg_foreign_data_wrapper fdw ON srv.srvfdw = fdw.oid
WHERE fdw.fdwname = 'postgres_fdw';
    srvname    |                srvoptions                
---------------+------------------------------------------
 s_yugabytedb  | {server_type=yugabytedb}
 s_postgres    | {server_type=postgresql}
 s_yugabytedb2 | {dbname=yugabyte,server_type=yugabytedb}
 s_nosrvtype   | 
 s_nosrvtype2  | {dbname=yugabyte,host=127.0.0.1}
(5 rows)

-- Adding a 'server_type' option where none exists.
ALTER SERVER s_nosrvtype2 OPTIONS (ADD server_type 'yugabytedb');
-- Adding a 'server_type' option where one already exists should be disallowed.
ALTER SERVER s_nosrvtype2 OPTIONS (ADD server_type 'postgresql');
ERROR:  option "server_type" provided more than once
-- Modifying 'server_type' option where one already exists should be disallowed.
ALTER SERVER s_nosrvtype2 OPTIONS (SET server_type 'postgresql');
ERROR:  changing server_type is not supported.
HINT:  Use "DROP SERVER <name>" followed by "CREATE SERVER <name> ... OPTIONS (server_type 'postgresql')" to change server_type.
-- Modifying 'server_type' option where one already exists but with an invalid value should be disallowed.
ALTER SERVER s_nosrvtype2 OPTIONS (SET server_type 'something_invalid');
ERROR:  invalid server_type 'something_invalid'
HINT:  Supported server types: [postgreSQL, yugabyteDB]
-- Dropping 'server_type' option should be disallowed.
ALTER SERVER s_nosrvtype2 OPTIONS (DROP server_type);
ERROR:  dropping server_type is not supported.
-- Modifying or dropping 'server_type' option where one does not exist should be disallowed.
ALTER SERVER s_nosrvtype OPTIONS (SET server_type 'postgresql');
ERROR:  option "server_type" not found
ALTER SERVER s_nosrvtype OPTIONS (DROP server_type);
ERROR:  option "server_type" not found
SELECT srv.srvname, srv.srvoptions
FROM pg_foreign_server srv JOIN pg_foreign_data_wrapper fdw ON srv.srvfdw = fdw.oid
WHERE fdw.fdwname = 'postgres_fdw';
    srvname    |                       srvoptions                        
---------------+---------------------------------------------------------
 s_yugabytedb  | {server_type=yugabytedb}
 s_postgres    | {server_type=postgresql}
 s_yugabytedb2 | {dbname=yugabyte,server_type=yugabytedb}
 s_nosrvtype   | 
 s_nosrvtype2  | {dbname=yugabyte,host=127.0.0.1,server_type=yugabytedb}
(5 rows)

DROP SERVER s_yugabytedb2;
DROP SERVER s_nosrvtype2;
-- Test to validate that 'server_type' option is not applicable to foreign table.
CREATE FOREIGN TABLE ft_test (v INT) SERVER s_yugabytedb OPTIONS (table_name 't_test', server_type 'yugabytedb');
ERROR:  invalid option "server_type"
HINT:  Valid options in this context are: schema_name, table_name, use_remote_estimate, updatable, truncatable, fetch_size, batch_size, async_capable
CREATE TABLE t_test (v INT);
INSERT INTO t_test (SELECT i FROM generate_series(1, 10) AS i);
-- Sanity test to assert that the server has indeed been configured.
DO $d$
    BEGIN
        EXECUTE $$ALTER SERVER s_yugabytedb
            OPTIONS (dbname '$$||current_database()||$$',
                     host '$$||current_setting('listen_addresses')||$$',
                     port '$$||current_setting('port')||$$'
            )$$;
        EXECUTE $$ALTER SERVER s_postgres
            OPTIONS (dbname '$$||current_database()||$$',
                     host '$$||current_setting('listen_addresses')||$$',
                     port '$$||current_setting('port')||$$'
            )$$;
        EXECUTE $$ALTER SERVER s_nosrvtype
            OPTIONS (dbname '$$||current_database()||$$',
                     host '$$||current_setting('listen_addresses')||$$',
                     port '$$||current_setting('port')||$$'
            )$$;
    END;
$d$;
NOTICE:  no server_type specified. Defaulting to PostgreSQL.
HINT:  Use "ALTER SERVER ... OPTIONS (ADD server_type '<type>')" to explicitly set server_type.
CREATE USER MAPPING FOR CURRENT_USER SERVER s_yugabytedb;
CREATE USER MAPPING FOR CURRENT_USER SERVER s_postgres;
CREATE USER MAPPING FOR CURRENT_USER SERVER s_nosrvtype;
CREATE FOREIGN TABLE ft_test1 (v INT) SERVER s_yugabytedb OPTIONS (table_name 't_test');
SELECT * FROM ft_test1 ORDER BY v;
 v  
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
(10 rows)

CREATE FOREIGN TABLE ft_test2 (v INT) SERVER s_postgres OPTIONS (table_name 't_test');
SELECT * FROM ft_test2 ORDER BY v;
 v  
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
(10 rows)

CREATE FOREIGN TABLE ft_test3 (v INT) SERVER s_nosrvtype OPTIONS (table_name 't_test');
SELECT * FROM ft_test3 ORDER BY v;
 v  
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
(10 rows)

-- A join involving tables of different server types must not be pushed down.
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft_test1, ft_test2, ft_test3 WHERE ft_test1.v = ft_test2.v AND ft_test1.v = ft_test3.v;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Merge Join
   Output: ft_test1.v, ft_test2.v, ft_test3.v
   Merge Cond: (ft_test3.v = ft_test1.v)
   ->  Sort
         Output: ft_test3.v
         Sort Key: ft_test3.v
         ->  Foreign Scan on public.ft_test3
               Output: ft_test3.v
               Remote SQL: SELECT v FROM public.t_test
   ->  Materialize
         Output: ft_test1.v, ft_test2.v
         ->  Merge Join
               Output: ft_test1.v, ft_test2.v
               Merge Cond: (ft_test1.v = ft_test2.v)
               ->  Sort
                     Output: ft_test1.v
                     Sort Key: ft_test1.v
                     ->  Foreign Scan on public.ft_test1
                           Output: ft_test1.v
                           Remote SQL: SELECT v FROM public.t_test
               ->  Sort
                     Output: ft_test2.v
                     Sort Key: ft_test2.v
                     ->  Foreign Scan on public.ft_test2
                           Output: ft_test2.v
                           Remote SQL: SELECT v FROM public.t_test
(26 rows)

SELECT * FROM ft_test1, ft_test2, ft_test3 WHERE ft_test1.v = ft_test2.v AND ft_test1.v = ft_test3.v;
 v  | v  | v  
----+----+----
  1 |  1 |  1
  2 |  2 |  2
  3 |  3 |  3
  4 |  4 |  4
  5 |  5 |  5
  6 |  6 |  6
  7 |  7 |  7
  8 |  8 |  8
  9 |  9 |  9
 10 | 10 | 10
(10 rows)

-- Modifying table level options should be allowed.
ALTER FOREIGN TABLE ft_test1 OPTIONS (SET table_name 't_othertest');
ALTER FOREIGN TABLE ft_test2 OPTIONS (DROP table_name, ADD batch_size '1000');
SELECT * FROM pg_foreign_table;
 ftrelid | ftserver |        ftoptions         
---------+----------+--------------------------
   16407 |    16391 | {table_name=t_othertest}
   16410 |    16392 | {batch_size=1000}
   16413 |    16394 | {table_name=t_test}
(3 rows)

-- Setting an option should be disallowed if it doesn't already exist.
ALTER FOREIGN TABLE ft_test3 OPTIONS (SET batch_size '1000', SET table_name 't_othertest');
ERROR:  option "batch_size" not found
-- Dropping an option should be disallowed if it doesn't already exist.
ALTER FOREIGN TABLE ft_test2 OPTIONS (DROP table_name);
ERROR:  option "table_name" not found
-- Adding an option should be disallowed if it already exists.
ALTER FOREIGN TABLE ft_test1 OPTIONS (ADD table_name 't_test');
ERROR:  option "table_name" provided more than once
SELECT * FROM pg_foreign_table;
 ftrelid | ftserver |        ftoptions         
---------+----------+--------------------------
   16407 |    16391 | {table_name=t_othertest}
   16410 |    16392 | {batch_size=1000}
   16413 |    16394 | {table_name=t_test}
(3 rows)

-- Restore the original table name.
ALTER FOREIGN TABLE ft_test1 OPTIONS (SET table_name 't_test');
ALTER FOREIGN TABLE ft_test2 OPTIONS (ADD table_name 't_test', DROP batch_size);
SELECT * FROM pg_foreign_table;
 ftrelid | ftserver |      ftoptions      
---------+----------+---------------------
   16407 |    16391 | {table_name=t_test}
   16410 |    16392 | {table_name=t_test}
   16413 |    16394 | {table_name=t_test}
(3 rows)

DROP FOREIGN TABLE ft_test1;
DROP FOREIGN TABLE ft_test2;
DROP FOREIGN TABLE ft_test3;
--
-- Test to validate behavior of DML queries on foreign tables
--
CREATE TABLE t_simple(k INT, v INT, PRIMARY KEY (k ASC));
CREATE TABLE t_other (k INT, v INT, PRIMARY KEY (k ASC));
CREATE FOREIGN TABLE ft_simple (k INT, v INT) SERVER s_yugabytedb OPTIONS (table_name 't_simple');
CREATE FOREIGN TABLE ft_other (k INT, v INT) SERVER s_yugabytedb OPTIONS (table_name 't_other');
-- Test various types of inserts.
-- In all DMLs with a RETURNING clause, the ybctid column must be requested either
-- explicitly or implicitly.
EXPLAIN (VERBOSE, COSTS OFF) INSERT INTO ft_simple VALUES (1, 1) RETURNING k, v;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Insert on public.ft_simple
   Output: ft_simple.k, ft_simple.v
   Remote SQL: INSERT INTO public.t_simple(k, v) VALUES ($1, $2) RETURNING k, v, ybctid
   Batch Size: 1
   ->  Result *RESULT*
         Output: 1, 1
(6 rows)

INSERT INTO ft_simple VALUES (0, 0);
INSERT INTO ft_simple VALUES (1, 1) RETURNING k, v;
 k | v 
---+---
 1 | 1
(1 row)

INSERT INTO ft_simple VALUES (2, 2) RETURNING *;
 k | v 
---+---
 2 | 2
(1 row)

INSERT INTO ft_simple (v, k) VALUES (3, 3) RETURNING tableoid::regclass, *;
 tableoid  | k | v 
-----------+---+---
 ft_simple | 3 | 3
(1 row)

INSERT INTO ft_simple VALUES (4, 4) RETURNING ybctid, *;
     ybctid     | k | v 
----------------+---+---
 \x488000000421 | 4 | 4
(1 row)

SELECT * FROM ft_simple ORDER BY k;
 k | v 
---+---
 0 | 0
 1 | 1
 2 | 2
 3 | 3
 4 | 4
(5 rows)

-- Test "direct" updates and deletes. These are operations that can be pushed down
-- to the foreign server.
EXPLAIN (VERBOSE, COSTS OFF) UPDATE ft_simple SET k = k + 10, v = v + 1 WHERE k = 1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Update on public.ft_simple
   ->  Foreign Update on public.ft_simple
         Remote Filter: (ft_simple.k = 1)
         Remote SQL: UPDATE public.t_simple SET k = (k + 10), v = (v + 1) WHERE ((k = 1))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) UPDATE ft_simple SET v = v + 1 WHERE k < 10 RETURNING k, v;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Update on public.ft_simple
   Output: k, v
   ->  Foreign Update on public.ft_simple
         Remote Filter: (ft_simple.k < 10)
         Remote SQL: UPDATE public.t_simple SET v = (v + 1) WHERE ((k < 10)) RETURNING k, v, ybctid
(5 rows)

UPDATE ft_simple SET v = v + 1 WHERE k = 0;
UPDATE ft_simple SET k = k + 10, v = v + 1 WHERE k = 1 RETURNING k, v;
 k  | v 
----+---
 11 | 2
(1 row)

UPDATE ft_simple SET v = v + 1 WHERE k < 10 RETURNING *;
 k | v 
---+---
 0 | 2
 2 | 3
 3 | 4
 4 | 5
(4 rows)

UPDATE ft_simple SET k = k + 10 WHERE v = 3 RETURNING ybctid, *;
     ybctid     | k  | v 
----------------+----+---
 \x488000000c21 | 12 | 3
(1 row)

SELECT * FROM ft_simple ORDER BY k;
 k  | v 
----+---
  0 | 2
  3 | 4
  4 | 5
 11 | 2
 12 | 3
(5 rows)

EXPLAIN (VERBOSE, COSTS OFF) DELETE FROM ft_simple WHERE k = 0;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Delete on public.ft_simple
   ->  Foreign Delete on public.ft_simple
         Remote Filter: (ft_simple.k = 0)
         Remote SQL: DELETE FROM public.t_simple WHERE ((k = 0))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) DELETE FROM ft_simple WHERE k < 10 RETURNING k, v;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Delete on public.ft_simple
   Output: k, v
   ->  Foreign Delete on public.ft_simple
         Remote Filter: (ft_simple.k < 10)
         Remote SQL: DELETE FROM public.t_simple WHERE ((k < 10)) RETURNING k, v, ybctid
(5 rows)

DELETE FROM ft_simple WHERE k = 0;
DELETE FROM ft_simple WHERE k < 10 RETURNING k, v;
 k | v 
---+---
 3 | 4
 4 | 5
(2 rows)

DELETE FROM ft_simple WHERE k = 11 RETURNING *;
 k  | v 
----+---
 11 | 2
(1 row)

DELETE FROM ft_simple WHERE v = 3 RETURNING ybctid, *;
     ybctid     | k  | v 
----------------+----+---
 \x488000000c21 | 12 | 3
(1 row)

SELECT * FROM ft_simple ORDER BY k;
 k | v 
---+---
(0 rows)

-- Test "two-pass" updates and deletes. These are operations that cannot be pushed down
-- to the foreign server, and require a foreign scan to return the ctid (ybctid) of
-- the row being deleted.
-- Create a "local" function. postgres_fdw will not push down function calls
-- because it cannot determine if the same implementation of the function exists
-- on the foreign server.
CREATE FUNCTION fdw(a INT) RETURNS INT
LANGUAGE PLPGSQL AS $$
BEGIN
	RETURN a;
END;
$$;
INSERT INTO t_simple (SELECT i, i FROM generate_series(1, 10) AS i);
EXPLAIN (VERBOSE, COSTS OFF) UPDATE ft_simple SET v = fdw(v) WHERE k = 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Update on public.ft_simple
   Remote SQL: UPDATE public.t_simple SET v = $2 WHERE ybctid = $1
   ->  Foreign Scan on public.ft_simple
         Output: fdw(v), ybctid, ft_simple.*
         Remote Filter: (ft_simple.k = 1)
         Remote SQL: SELECT k, v, ybctid FROM public.t_simple WHERE ((k = 1)) FOR UPDATE
(6 rows)

EXPLAIN (VERBOSE, COSTS OFF) UPDATE ft_simple SET v = v + 1 WHERE fdw(k) = 1 RETURNING *;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Update on public.ft_simple
   Output: k, v
   Remote SQL: UPDATE public.t_simple SET v = $2 WHERE ybctid = $1 RETURNING k, v, ybctid
   ->  Foreign Scan on public.ft_simple
         Output: (v + 1), ybctid, ft_simple.*
         Filter: (fdw(ft_simple.k) = 1)
         Remote SQL: SELECT k, v, ybctid FROM public.t_simple FOR UPDATE
(7 rows)

EXPLAIN (VERBOSE, COSTS OFF) DELETE FROM ft_simple WHERE fdw(k) = 1 RETURNING *;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Delete on public.ft_simple
   Output: k, v
   Remote SQL: DELETE FROM public.t_simple WHERE ybctid = $1 RETURNING k, v, ybctid
   ->  Foreign Scan on public.ft_simple
         Output: ybctid
         Filter: (fdw(ft_simple.k) = 1)
         Remote SQL: SELECT k, ybctid FROM public.t_simple FOR UPDATE
(7 rows)

-- This query should be capable of push down.
EXPLAIN (VERBOSE, COSTS OFF) DELETE FROM ft_simple WHERE k = 1 RETURNING fdw(k), fdw(v);
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Delete on public.ft_simple
   Output: fdw(k), fdw(v)
   ->  Foreign Delete on public.ft_simple
         Remote Filter: (ft_simple.k = 1)
         Remote SQL: DELETE FROM public.t_simple WHERE ((k = 1)) RETURNING k, v, ybctid
(5 rows)

UPDATE ft_simple SET v = v + 1 WHERE fdw(k) = 1;
UPDATE ft_simple SET k = fdw(k) + 10, v = fdw(v) + 1 WHERE k = 2 RETURNING k, v;
 k  | v 
----+---
 12 | 3
(1 row)

UPDATE ft_simple SET v = fdw(v) + 1 WHERE fdw(k) < 10 RETURNING *;
 k | v  
---+----
 1 |  3
 3 |  4
 4 |  5
 5 |  6
 6 |  7
 7 |  8
 8 |  9
 9 | 10
(8 rows)

SELECT * FROM ft_simple ORDER BY k;
 k  | v  
----+----
  1 |  3
  3 |  4
  4 |  5
  5 |  6
  6 |  7
  7 |  8
  8 |  9
  9 | 10
 10 | 10
 12 |  3
(10 rows)

DELETE FROM ft_simple WHERE fdw(k) = 1;
DELETE FROM ft_simple WHERE fdw(k) = 12 RETURNING k, v;
 k  | v 
----+---
 12 | 3
(1 row)

DELETE FROM ft_simple WHERE fdw(v) < 10 RETURNING *;
 k | v 
---+---
 3 | 4
 4 | 5
 5 | 6
 6 | 7
 7 | 8
 8 | 9
(6 rows)

SELECT * FROM ft_simple ORDER BY k;
 k  | v  
----+----
  9 | 10
 10 | 10
(2 rows)

INSERT INTO t_simple (SELECT i, i FROM generate_series(1, 5) AS i);
INSERT INTO t_other (SELECT i, i FROM generate_series(1, 5) AS i);
-- Updates and deletes involving multiple foreign tables cannot be pushed down
-- when the conditions are non-trivial.
EXPLAIN (VERBOSE, COSTS OFF) UPDATE ft_simple s SET v = s.v + 1
FROM ft_other t
WHERE s.k < 2 AND t.v = s.v;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Update on public.ft_simple s
   Remote SQL: UPDATE public.t_simple SET v = $2 WHERE ybctid = $1
   ->  Hash Join
         Output: (s.v + 1), s.ybctid, s.*, t.*
         Hash Cond: (t.v = s.v)
         ->  Foreign Scan on public.ft_other t
               Output: t.*, t.v
               Remote SQL: SELECT k, v FROM public.t_other
         ->  Hash
               Output: s.v, s.ybctid, s.*
               ->  Foreign Scan on public.ft_simple s
                     Output: s.v, s.ybctid, s.*
                     Remote Filter: (s.k < 2)
                     Remote SQL: SELECT k, v, ybctid FROM public.t_simple WHERE ((k < 2)) FOR UPDATE
(14 rows)

EXPLAIN (VERBOSE, COSTS OFF) UPDATE ft_simple s SET v = s.v + 1
FROM ft_other t1 JOIN ft_other t2 ON t1.k = t2.k
WHERE s.k = 2 AND t1.v = s.v;
                                                                                         QUERY PLAN                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft_simple s
   ->  Foreign Update
         Remote SQL: UPDATE public.t_simple r1 SET v = (r1.v + 1) FROM (public.t_other r2 INNER JOIN public.t_other r3 ON (TRUE)) WHERE ((r2.k = r3.k)) AND ((r1.v = r2.v)) AND ((r1.k = 2))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) DELETE FROM ft_simple s
USING ft_other t
WHERE s.k < 2 AND t.v = s.v;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Delete on public.ft_simple s
   Remote SQL: DELETE FROM public.t_simple WHERE ybctid = $1
   ->  Hash Join
         Output: s.ybctid, t.*
         Hash Cond: (t.v = s.v)
         ->  Foreign Scan on public.ft_other t
               Output: t.*, t.v
               Remote SQL: SELECT k, v FROM public.t_other
         ->  Hash
               Output: s.ybctid, s.v
               ->  Foreign Scan on public.ft_simple s
                     Output: s.ybctid, s.v
                     Remote Filter: (s.k < 2)
                     Remote SQL: SELECT v, ybctid FROM public.t_simple WHERE ((k < 2)) FOR UPDATE
(14 rows)

EXPLAIN (VERBOSE, COSTS OFF) DELETE FROM ft_simple s
USING ft_other t1 JOIN ft_other t2 ON t1.k = t2.k
WHERE s.k = 2 AND t1.v = s.v;
                                                                                                            QUERY PLAN                                                                                                             
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Delete on public.ft_simple s
   Remote SQL: DELETE FROM public.t_simple WHERE ybctid = $1
   ->  Hash Join
         Output: s.ybctid, t1.*, t2.*
         Hash Cond: (t2.k = t1.k)
         ->  Foreign Scan on public.ft_other t2
               Output: t2.*, t2.k
               Remote SQL: SELECT k, v FROM public.t_other
         ->  Hash
               Output: s.ybctid, t1.*, t1.k
               ->  Foreign Scan
                     Output: s.ybctid, t1.*, t1.k
                     Relations: (public.ft_simple s) INNER JOIN (public.ft_other t1)
                     Remote SQL: SELECT r1.ybctid, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2.k, r2.v) END, r2.k FROM (public.t_simple r1 INNER JOIN public.t_other r2 ON (((r1.v = r2.v)) AND ((r1.k = 2)))) FOR UPDATE OF r1
                     ->  Hash Join
                           Output: s.ybctid, t1.*, t1.k
                           Hash Cond: (s.v = t1.v)
                           ->  Foreign Scan on public.ft_simple s
                                 Output: s.ybctid, s.v
                                 Remote Filter: (s.k = 2)
                                 Remote SQL: SELECT v, ybctid FROM public.t_simple WHERE ((k = 2)) FOR UPDATE
                           ->  Hash
                                 Output: t1.*, t1.k, t1.v
                                 ->  Foreign Scan on public.ft_other t1
                                       Output: t1.*, t1.k, t1.v
                                       Remote SQL: SELECT k, v FROM public.t_other
(26 rows)

UPDATE ft_simple s SET v = s.v + 1
FROM ft_other t
WHERE s.k < 2 AND t.v = s.v
RETURNING *;
 k | v | k | v 
---+---+---+---
 1 | 2 | 1 | 1
(1 row)

UPDATE ft_simple s SET v = s.v + 1
FROM ft_other t1 JOIN ft_other t2 ON t1.k = t2.k
WHERE s.k = 2 AND t1.v = s.v
RETURNING *;
 k | v | k | v | k | v 
---+---+---+---+---+---
 2 | 3 | 2 | 2 | 2 | 2
(1 row)

DELETE FROM ft_simple s
USING ft_other t
WHERE s.k < 2 AND t.v = s.v
RETURNING *;
 k | v | k | v 
---+---+---+---
 1 | 2 | 2 | 2
(1 row)

DELETE FROM ft_simple s
USING ft_other t1 JOIN ft_other t2 ON t1.k = t2.k
WHERE s.k = 2 AND t1.v = s.v
RETURNING *;
 k | v | k | v | k | v 
---+---+---+---+---+---
 2 | 3 | 3 | 3 | 3 | 3
(1 row)

SELECT * FROM ft_simple ORDER BY k;
 k  | v  
----+----
  3 |  3
  4 |  4
  5 |  5
  9 | 10
 10 | 10
(5 rows)

