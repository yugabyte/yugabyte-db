-- ===================================================================
-- create FDW objects
-- ===================================================================
CREATE EXTENSION postgres_fdw;
CREATE SERVER testserver1 FOREIGN DATA WRAPPER postgres_fdw;
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER loopback FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (dbname '$$||current_database()||$$',
                     host '$$||current_setting('listen_addresses')||$$',
                     port '$$||current_setting('port')||$$'
            )$$;
        EXECUTE $$CREATE SERVER loopback2 FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (dbname '$$||current_database()||$$',
                     host '$$||current_setting('listen_addresses')||$$',
                     port '$$||current_setting('port')||$$'
            )$$;
    END;
$d$;
CREATE USER MAPPING FOR public SERVER testserver1
	OPTIONS (user 'value', password 'value');
CREATE USER MAPPING FOR CURRENT_USER SERVER loopback;
CREATE USER MAPPING FOR CURRENT_USER SERVER loopback2;
-- ===================================================================
-- create objects used through FDW loopback server
-- ===================================================================
CREATE TYPE user_enum AS ENUM ('foo', 'bar', 'buz');
CREATE SCHEMA "S 1";
CREATE TABLE "S 1"."T 1" (
	"C 1" int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10),
	c8 user_enum,
	CONSTRAINT t1_pkey PRIMARY KEY ("C 1")
);
CREATE TABLE "S 1"."T 2" (
	c1 int NOT NULL,
	c2 text,
	CONSTRAINT t2_pkey PRIMARY KEY (c1)
);
CREATE TABLE "S 1"."T 3" (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	CONSTRAINT t3_pkey PRIMARY KEY (c1)
);
CREATE TABLE "S 1"."T 4" (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	CONSTRAINT t4_pkey PRIMARY KEY (c1)
);
-- Disable autovacuum for these tables to avoid unexpected effects of that
-- YB note: Currently, YugabyteDB doesn't run a background job like PostgreSQL's autovacuum to analyze the tables.
--ALTER TABLE "S 1"."T 1" SET (autovacuum_enabled = 'false');
--ALTER TABLE "S 1"."T 2" SET (autovacuum_enabled = 'false');
--ALTER TABLE "S 1"."T 3" SET (autovacuum_enabled = 'false');
--ALTER TABLE "S 1"."T 4" SET (autovacuum_enabled = 'false');
INSERT INTO "S 1"."T 1"
	SELECT id,
	       id % 10,
	       to_char(id, 'FM00000'),
	       '1970-01-01'::timestamptz + ((id % 100) || ' days')::interval,
	       '1970-01-01'::timestamp + ((id % 100) || ' days')::interval,
	       id % 10,
	       id % 10,
	       'foo'::user_enum
	FROM generate_series(1, 1000) id;
INSERT INTO "S 1"."T 2"
	SELECT id,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
INSERT INTO "S 1"."T 3"
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
DELETE FROM "S 1"."T 3" WHERE c1 % 2 != 0;	-- delete for outer join tests
INSERT INTO "S 1"."T 4"
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
DELETE FROM "S 1"."T 4" WHERE c1 % 3 != 0;	-- delete for outer join tests
ANALYZE "S 1"."T 1";
ANALYZE "S 1"."T 2";
ANALYZE "S 1"."T 3";
ANALYZE "S 1"."T 4";
-- ===================================================================
-- create foreign tables
-- ===================================================================
-- YB note: set schema_name, table_name, column_name directly here since ALTER TABLE not supported yet, see #1124
CREATE FOREIGN TABLE ft1 (
	c0 int,
	c1 int OPTIONS (column_name 'C 1') NOT NULL,
	c2 int NOT NULL,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 user_enum
) SERVER loopback OPTIONS (schema_name 'S 1', table_name 'T 1');
ALTER FOREIGN TABLE ft1 DROP COLUMN c0;
CREATE FOREIGN TABLE ft2 (
	c1 int OPTIONS (column_name 'C 1') NOT NULL,
	c2 int NOT NULL,
	cx int,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft2',
	c8 user_enum
) SERVER loopback OPTIONS (schema_name 'S 1', table_name 'T 1', use_remote_estimate 'true');
ALTER FOREIGN TABLE ft2 DROP COLUMN cx;
CREATE FOREIGN TABLE ft4 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER loopback OPTIONS (schema_name 'S 1', table_name 'T 3');
CREATE FOREIGN TABLE ft5 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER loopback OPTIONS (schema_name 'S 1', table_name 'T 4');
CREATE FOREIGN TABLE ft6 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER loopback2 OPTIONS (schema_name 'S 1', table_name 'T 4');
-- ===================================================================
-- tests for validator
-- ===================================================================
-- requiressl, krbsrvname and gsslib are omitted because they depend on
-- configure options
ALTER SERVER testserver1 OPTIONS (
	use_remote_estimate 'false',
	updatable 'true',
	fdw_startup_cost '123.456',
	fdw_tuple_cost '0.123',
	service 'value',
	connect_timeout 'value',
	dbname 'value',
	host 'value',
	hostaddr 'value',
	port 'value',
	--client_encoding 'value',
	application_name 'value',
	--fallback_application_name 'value',
	keepalives 'value',
	keepalives_idle 'value',
	keepalives_interval 'value',
	-- requiressl 'value',
	sslcompression 'value',
	sslmode 'value',
	sslcert 'value',
	sslkey 'value',
	sslrootcert 'value',
	sslcrl 'value'
	--requirepeer 'value',
	-- krbsrvname 'value',
	-- gsslib 'value',
	--replication 'value'
);
-- Error, invalid list syntax
ALTER SERVER testserver1 OPTIONS (ADD extensions 'foo; bar');
ERROR:  parameter "extensions" must be a list of extension names
-- OK but gets a warning
ALTER SERVER testserver1 OPTIONS (ADD extensions 'foo, bar');
WARNING:  extension "foo" is not installed
WARNING:  extension "bar" is not installed
ALTER SERVER testserver1 OPTIONS (DROP extensions);
ALTER USER MAPPING FOR public SERVER testserver1
	OPTIONS (DROP user, DROP password);
-- YB note: ALTER TABLE not supported yet, see #1124
ALTER FOREIGN TABLE ft1 OPTIONS (schema_name 'S 1', table_name 'T 1');
ERROR:  ALTER TABLE not supported yet
LINE 1: ALTER FOREIGN TABLE ft1 OPTIONS (schema_name 'S 1', table_na...
                                ^
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/1124. React with thumbs up to raise its priority
ALTER FOREIGN TABLE ft2 OPTIONS (schema_name 'S 1', table_name 'T 1');
ERROR:  ALTER TABLE not supported yet
LINE 1: ALTER FOREIGN TABLE ft2 OPTIONS (schema_name 'S 1', table_na...
                                ^
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/1124. React with thumbs up to raise its priority
ALTER FOREIGN TABLE ft1 ALTER COLUMN c1 OPTIONS (column_name 'C 1');
ERROR:  option "column_name" provided more than once
ALTER FOREIGN TABLE ft2 ALTER COLUMN c1 OPTIONS (column_name 'C 1');
ERROR:  option "column_name" provided more than once
\det+
                                            List of foreign tables
 Schema | Table |  Server   |                            FDW options                            | Description
--------+-------+-----------+-------------------------------------------------------------------+-------------
 public | ft1   | loopback  | (schema_name 'S 1', table_name 'T 1')                             |
 public | ft2   | loopback  | (schema_name 'S 1', table_name 'T 1', use_remote_estimate 'true') |
 public | ft4   | loopback  | (schema_name 'S 1', table_name 'T 3')                             |
 public | ft5   | loopback  | (schema_name 'S 1', table_name 'T 4')                             |
 public | ft6   | loopback2 | (schema_name 'S 1', table_name 'T 4')                             |
(5 rows)

-- Test that alteration of server options causes reconnection
-- Remote's errors might be non-English, so hide them to ensure stable results
\set VERBOSITY terse
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work
  c3   |              c4
-------+------------------------------
 00001 | Fri Jan 02 00:00:00 1970 PST
(1 row)

ALTER SERVER loopback OPTIONS (SET dbname 'no such database');
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
ERROR:  could not connect to server "loopback"
DO $d$
    BEGIN
        EXECUTE $$ALTER SERVER loopback
            OPTIONS (SET dbname '$$||current_database()||$$')$$;
    END;
$d$;
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
  c3   |              c4
-------+------------------------------
 00001 | Fri Jan 02 00:00:00 1970 PST
(1 row)

-- Test that alteration of user mapping options causes reconnection
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback
  OPTIONS (ADD user 'no such user');
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
ERROR:  could not connect to server "loopback"
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback
  OPTIONS (DROP user);
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
  c3   |              c4
-------+------------------------------
 00001 | Fri Jan 02 00:00:00 1970 PST
(1 row)

\set VERBOSITY default
-- Now we should be able to run ANALYZE.
-- To exercise multiple code paths, we use local stats on ft1
-- and remote-estimate mode on ft2.
ANALYZE ft1;
ALTER FOREIGN TABLE ft2 OPTIONS (use_remote_estimate 'true');
ERROR:  ALTER TABLE not supported yet
LINE 1: ALTER FOREIGN TABLE ft2 OPTIONS (use_remote_estimate 'true')...
                                ^
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/1124. React with thumbs up to raise its priority
-- ===================================================================
-- simple queries
-- ===================================================================
-- single table without alias
EXPLAIN (COSTS OFF) SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
     QUERY PLAN
---------------------
 Foreign Scan on ft1
(1 row)

SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
-----+----+-------+------------------------------+--------------------------+----+------------+-----
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo
 103 |  3 | 00103 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo
 104 |  4 | 00104 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo
 105 |  5 | 00105 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo
 107 |  7 | 00107 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
 108 |  8 | 00108 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
 109 |  9 | 00109 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo
 110 |  0 | 00110 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo
(10 rows)

-- single table with alias - also test that tableoid sort is not pushed to remote side
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
                                     QUERY PLAN
-------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8, tableoid
   ->  Sort
         Output: c1, c2, c3, c4, c5, c6, c7, c8, tableoid
         Sort Key: t1.c3, t1.c1, t1.tableoid
         ->  Foreign Scan on public.ft1 t1
               Output: c1, c2, c3, c4, c5, c6, c7, c8, tableoid
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(8 rows)

SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
-----+----+-------+------------------------------+--------------------------+----+------------+-----
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo
 103 |  3 | 00103 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo
 104 |  4 | 00104 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo
 105 |  5 | 00105 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo
 107 |  7 | 00107 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
 108 |  8 | 00108 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
 109 |  9 | 00109 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo
 110 |  0 | 00110 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo
(10 rows)

-- whole-row reference
EXPLAIN (VERBOSE, COSTS OFF) SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                                          QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: t1.*, c3, c1
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c3 ASC NULLS LAST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint
(3 rows)

SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                             t1
--------------------------------------------------------------------------------------------
 (101,1,00101,"Fri Jan 02 00:00:00 1970 PST","Fri Jan 02 00:00:00 1970",1,"1         ",foo)
 (102,2,00102,"Sat Jan 03 00:00:00 1970 PST","Sat Jan 03 00:00:00 1970",2,"2         ",foo)
 (103,3,00103,"Sun Jan 04 00:00:00 1970 PST","Sun Jan 04 00:00:00 1970",3,"3         ",foo)
 (104,4,00104,"Mon Jan 05 00:00:00 1970 PST","Mon Jan 05 00:00:00 1970",4,"4         ",foo)
 (105,5,00105,"Tue Jan 06 00:00:00 1970 PST","Tue Jan 06 00:00:00 1970",5,"5         ",foo)
 (106,6,00106,"Wed Jan 07 00:00:00 1970 PST","Wed Jan 07 00:00:00 1970",6,"6         ",foo)
 (107,7,00107,"Thu Jan 08 00:00:00 1970 PST","Thu Jan 08 00:00:00 1970",7,"7         ",foo)
 (108,8,00108,"Fri Jan 09 00:00:00 1970 PST","Fri Jan 09 00:00:00 1970",8,"8         ",foo)
 (109,9,00109,"Sat Jan 10 00:00:00 1970 PST","Sat Jan 10 00:00:00 1970",9,"9         ",foo)
 (110,0,00110,"Sun Jan 11 00:00:00 1970 PST","Sun Jan 11 00:00:00 1970",0,"0         ",foo)
(10 rows)

-- empty result
SELECT * FROM ft1 WHERE false;
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8
----+----+----+----+----+----+----+----
(0 rows)

-- with WHERE clause
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
                                                            QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: ((t1.c7 >= '1'::bpchar) AND (t1.c1 = 101) AND ((t1.c6)::text = '1'::text))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((c7 >= '1')) AND (("C 1" = 101)) AND ((c6 = '1'))
(4 rows)

SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
-----+----+-------+------------------------------+--------------------------+----+------------+-----
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo
(1 row)

-- with FOR UPDATE/SHARE
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
                                                QUERY PLAN
----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, t1.*
   Remote Filter: (t1.c1 = 101)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 101)) FOR UPDATE
(4 rows)

SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
-----+----+-------+------------------------------+--------------------------+----+------------+-----
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo
(1 row)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
                                               QUERY PLAN
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, t1.*
   Remote Filter: (t1.c1 = 102)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 102)) FOR SHARE
(4 rows)

SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
-----+----+-------+------------------------------+--------------------------+----+------------+-----
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo
(1 row)

-- aggregate
SELECT COUNT(*) FROM ft1 t1;
 count
-------
  1000
(1 row)

-- subquery
SELECT * FROM ft1 t1 WHERE t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 <= 10) ORDER BY c1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
----+----+-------+------------------------------+--------------------------+----+------------+-----
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo
 10 |  0 | 00010 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo
(10 rows)

-- subquery+MAX
SELECT * FROM ft1 t1 WHERE t1.c3 = (SELECT MAX(c3) FROM ft2 t2) ORDER BY c1;
  c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
------+----+-------+------------------------------+--------------------------+----+------------+-----
 1000 |  0 | 01000 | Thu Jan 01 00:00:00 1970 PST | Thu Jan 01 00:00:00 1970 | 0  | 0          | foo
(1 row)

-- used in CTE
WITH t1 AS (SELECT * FROM ft1 WHERE c1 <= 10) SELECT t2.c1, t2.c2, t2.c3, t2.c4 FROM t1, ft2 t2 WHERE t1.c1 = t2.c1 ORDER BY t1.c1;
 c1 | c2 |  c3   |              c4
----+----+-------+------------------------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 PST
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 PST
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 PST
 10 |  0 | 00010 | Sun Jan 11 00:00:00 1970 PST
(10 rows)

-- fixed values
SELECT 'fixed', NULL FROM ft1 t1 WHERE c1 = 1;
 ?column? | ?column?
----------+----------
 fixed    |
(1 row)

-- Test forcing the remote server to produce sorted data for a merge join.
SET enable_hashjoin TO false;
SET enable_nestloop TO false;
SET yb_enable_batchednl TO false;
-- inner join; expressions in the clauses appear in the equivalence class list
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C 1" FROM ft2 t1 JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
                                      QUERY PLAN
---------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2."C 1"
   ->  Merge Join
         Output: t1.c1, t2."C 1"
         Inner Unique: true
         Merge Cond: (t1.c1 = t2."C 1")
         ->  Foreign Scan on public.ft2 t1
               Output: t1.c1
               Remote SQL: SELECT "C 1" FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
         ->  Sort
               Output: t2."C 1"
               Sort Key: t2."C 1"
               ->  Seq Scan on "S 1"."T 1" t2
                     Output: t2."C 1"
(14 rows)

SELECT t1.c1, t2."C 1" FROM ft2 t1 JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
 c1  | C 1
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C 1" FROM ft2 t1 LEFT JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
                                      QUERY PLAN
---------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2."C 1"
   ->  Merge Left Join
         Output: t1.c1, t2."C 1"
         Inner Unique: true
         Merge Cond: (t1.c1 = t2."C 1")
         ->  Foreign Scan on public.ft2 t1
               Output: t1.c1
               Remote SQL: SELECT "C 1" FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
         ->  Sort
               Output: t2."C 1"
               Sort Key: t2."C 1"
               ->  Seq Scan on "S 1"."T 1" t2
                     Output: t2."C 1"
(14 rows)

SELECT t1.c1, t2."C 1" FROM ft2 t1 LEFT JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
 c1  | C 1
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- A join between local table and foreign join. ORDER BY clause is added to the
-- foreign join so that the local table can be joined using merge join strategy.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1."C 1" FROM "S 1"."T 1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
                                                                       QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1."C 1"
   ->  Merge Right Join
         Output: t1."C 1"
         Inner Unique: true
         Merge Cond: (t3.c1 = t1."C 1")
         ->  Foreign Scan
               Output: t3.c1
               Relations: (public.ft1 t2) INNER JOIN (public.ft2 t3)
               Remote SQL: SELECT r3."C 1" FROM ("S 1"."T 1" r2 INNER JOIN "S 1"."T 1" r3 ON (((r2."C 1" = r3."C 1")))) ORDER BY r2."C 1" ASC NULLS LAST
         ->  Sort
               Output: t1."C 1"
               Sort Key: t1."C 1"
               ->  Seq Scan on "S 1"."T 1" t1
                     Output: t1."C 1"
(15 rows)

SELECT t1."C 1" FROM "S 1"."T 1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
 C 1
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- Test similar to above, except that the full join prevents any equivalence
-- classes from being merged. This produces single relation equivalence classes
-- included in join restrictions.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
                                                                            QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1."C 1", t2.c1, t3.c1
   ->  Merge Right Join
         Output: t1."C 1", t2.c1, t3.c1
         Inner Unique: true
         Merge Cond: (t3.c1 = t1."C 1")
         ->  Foreign Scan
               Output: t3.c1, t2.c1
               Relations: (public.ft2 t3) LEFT JOIN (public.ft1 t2)
               Remote SQL: SELECT r3."C 1", r2."C 1" FROM ("S 1"."T 1" r3 LEFT JOIN "S 1"."T 1" r2 ON (((r2."C 1" = r3."C 1")))) ORDER BY r3."C 1" ASC NULLS LAST
         ->  Sort
               Output: t1."C 1"
               Sort Key: t1."C 1"
               ->  Seq Scan on "S 1"."T 1" t1
                     Output: t1."C 1"
(15 rows)

SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
 C 1 | c1  | c1
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

-- Test similar to above with all full outer joins
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
                                                                            QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1."C 1", t2.c1, t3.c1
   ->  Merge Full Join
         Output: t1."C 1", t2.c1, t3.c1
         Inner Unique: true
         Merge Cond: (t3.c1 = t1."C 1")
         ->  Foreign Scan
               Output: t2.c1, t3.c1
               Relations: (public.ft1 t2) FULL JOIN (public.ft2 t3)
               Remote SQL: SELECT r2."C 1", r3."C 1" FROM ("S 1"."T 1" r2 FULL JOIN "S 1"."T 1" r3 ON (((r2."C 1" = r3."C 1")))) ORDER BY r3."C 1" ASC NULLS LAST
         ->  Sort
               Output: t1."C 1"
               Sort Key: t1."C 1"
               ->  Seq Scan on "S 1"."T 1" t1
                     Output: t1."C 1"
(15 rows)

SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
 C 1 | c1  | c1
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

RESET enable_hashjoin;
RESET enable_nestloop;
-- ===================================================================
-- WHERE with remotely-executable conditions
-- ===================================================================
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 1;         -- Var, OpExpr(b), Const
                                         QUERY PLAN
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (t1.c1 = 1)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 100 AND t1.c2 = 0; -- BoolExpr
                                                  QUERY PLAN
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: ((t1.c1 = 100) AND (t1.c2 = 0))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 100)) AND ((c2 = 0))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NULL;        -- NullTest
                                           QUERY PLAN
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (t1.c1 IS NULL)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" IS NULL))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NOT NULL;    -- NullTest
                                             QUERY PLAN
-----------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (t1.c1 IS NOT NULL)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" IS NOT NULL))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE round(abs(c1), 0) = 1; -- FuncExpr
                                                     QUERY PLAN
---------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (round((abs(t1.c1))::numeric, 0) = '1'::numeric)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((round(abs("C 1"), 0) = 1::numeric))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = -c1;          -- OpExpr(l)
                                             QUERY PLAN
-----------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (t1.c1 = (- t1.c1))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = (- "C 1")))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (c1 IS NOT NULL) IS DISTINCT FROM (c1 IS NOT NULL); -- DistinctExpr
                                                                 QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: ((t1.c1 IS NOT NULL) IS DISTINCT FROM (t1.c1 IS NOT NULL))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((("C 1" IS NOT NULL) IS DISTINCT FROM ("C 1" IS NOT NULL)))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = ANY(ARRAY[c2, 1, c1 + 0]); -- ScalarArrayOpExpr
                                                        QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (t1.c1 = ANY (ARRAY[t1.c2, 1, (t1.c1 + 0)]))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = ANY (ARRAY[c2, 1, ("C 1" + 0)])))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = (ARRAY[c1,c2,3])[1]; -- ArrayRef
                                                      QUERY PLAN
----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (t1.c1 = (ARRAY[t1.c1, t1.c2, 3])[1])
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = ((ARRAY["C 1", c2, 3])[1])))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c6 = E'foo''s\\bar';  -- check special chars
                                              QUERY PLAN
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: ((t1.c6)::text = 'foo''s\bar'::text)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((c6 = E'foo''s\\bar'))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c8 = 'foo';  -- can't be sent to remote
                               QUERY PLAN
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c8 = 'foo'::user_enum)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

-- parameterized remote path for foreign table
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM "S 1"."T 1" a, ft2 b WHERE a."C 1" = 47 AND b.c1 = a.c2;
                                                 QUERY PLAN
-------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: a."C 1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8
   ->  Index Scan using t1_pkey on "S 1"."T 1" a
         Output: a."C 1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8
         Index Cond: (a."C 1" = 47)
   ->  Foreign Scan on public.ft2 b
         Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8
         Remote Filter: (a.c2 = b.c1)
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (($1::integer = "C 1"))
(9 rows)

SELECT * FROM ft2 a, ft2 b WHERE a.c1 = 47 AND b.c1 = a.c2;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
----+----+-------+------------------------------+--------------------------+----+------------+-----+----+----+-------+------------------------------+--------------------------+----+------------+-----
 47 |  7 | 00047 | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo |  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
(1 row)

-- check both safe and unsafe join conditions
-- YB note: Added ORDER BY here and in other places for deterministic results
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft2 a, ft2 b
  WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7) ORDER BY c1;
ERROR:  ORDER BY "c1" is ambiguous
LINE 3: ... = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7) ORDER BY c1;
                                                                    ^
SELECT * FROM ft2 a, ft2 b
WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7) ORDER BY c1;
ERROR:  ORDER BY "c1" is ambiguous
LINE 2: ... = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7) ORDER BY c1;
                                                                    ^
-- bug before 9.3.5 due to sloppy handling of remote-estimate parameters
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft2 WHERE c1 < 5));
                                                  QUERY PLAN
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8
   Remote Filter: (ft1.c1 = ANY ($0))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = ANY ($1::integer[])))
   InitPlan 1 (returns $0)
     ->  Foreign Scan on public.ft2
           Output: ft2.c1
           Remote Filter: (ft2.c1 < 5)
           Remote SQL: SELECT "C 1" FROM "S 1"."T 1" WHERE (("C 1" < 5))
(9 rows)

SELECT * FROM ft2 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft1 WHERE c1 < 5));
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
----+----+-------+------------------------------+--------------------------+----+------------+-----
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo
(4 rows)

-- we should not push order by clause with volatile expressions or unsafe
-- collations
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, random();
                                  QUERY PLAN
-------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c3, c4, c5, c6, c7, c8, (random())
   Sort Key: ft2.c1, (random())
   ->  Foreign Scan on public.ft2
         Output: c1, c2, c3, c4, c5, c6, c7, c8, random()
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(6 rows)

EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, ft2.c3 collate "C";
                                  QUERY PLAN
-------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c3, c4, c5, c6, c7, c8, ((c3)::text)
   Sort Key: ft2.c1, ft2.c3 COLLATE "C"
   ->  Foreign Scan on public.ft2
         Output: c1, c2, c3, c4, c5, c6, c7, c8, c3
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(6 rows)

-- user-defined operator/function
CREATE FUNCTION postgres_fdw_abs(int) RETURNS int AS $$
BEGIN
RETURN abs($1);
END
$$ LANGUAGE plpgsql IMMUTABLE;
CREATE OPERATOR === (
    LEFTARG = int,
    RIGHTARG = int,
    PROCEDURE = int4eq,
    COMMUTATOR = ===
);
-- built-in operators and functions can be shipped for remote execution
EXPLAIN (VERBOSE, COSTS OFF)
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
                                QUERY PLAN
---------------------------------------------------------------------------
 Foreign Scan
   Output: (count(c3))
   Relations: Aggregate on (public.ft1 t1)
   Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" = abs(c2)))
(4 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
 count
-------
     9
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
                              QUERY PLAN
----------------------------------------------------------------------
 Foreign Scan
   Output: (count(c3))
   Relations: Aggregate on (public.ft1 t1)
   Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" = c2))
(4 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
 count
-------
     9
(1 row)

-- by default, user-defined ones cannot
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
                        QUERY PLAN
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 = postgres_fdw_abs(t1.c2))
         Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(6 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
 count
-------
     9
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                        QUERY PLAN
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 === t1.c2)
         Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(6 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
 count
-------
     9
(1 row)

-- but let's put them in an extension ...
ALTER EXTENSION postgres_fdw ADD FUNCTION postgres_fdw_abs(int);
ALTER EXTENSION postgres_fdw ADD OPERATOR === (int, int);
ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
-- ... now they can be shipped
EXPLAIN (VERBOSE, COSTS OFF)
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
                                          QUERY PLAN
-----------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (count(c3))
   Relations: Aggregate on (public.ft1 t1)
   Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" = public.postgres_fdw_abs(c2)))
(4 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
 count
-------
     9
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                                       QUERY PLAN
-----------------------------------------------------------------------------------------
 Foreign Scan
   Output: (count(c3))
   Relations: Aggregate on (public.ft1 t1)
   Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" OPERATOR(public.===) c2))
(4 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
 count
-------
     9
(1 row)

-- ===================================================================
-- JOIN queries
-- ===================================================================
-- Analyze ft4 and ft5 so that we have better statistics. These tables do not
-- have use_remote_estimate set.
ANALYZE ft4;
ANALYZE ft5;
-- join two tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3
   Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
   Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3 FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint
(4 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
                                                                                                                                   QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3, t1.c3
   Relations: ((public.ft1 t1) INNER JOIN (public.ft2 t2)) INNER JOIN (public.ft4 t3)
   Remote SQL: SELECT r1."C 1", r2.c2, r4.c3, r1.c3 FROM (("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) INNER JOIN "S 1"."T 3" r4 ON (((r1."C 1" = r4.c1)))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- left outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                                                                                           QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1
   Relations: (public.ft4 t1) LEFT JOIN (public.ft5 t2)
   Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r1 LEFT JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) ORDER BY r1.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1
----+----
 22 |
 24 | 24
 26 |
 28 |
 30 | 30
 32 |
 34 |
 36 | 36
 38 |
 40 |
(10 rows)

-- left outer join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                                                                                   QUERY PLAN
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Relations: ((public.ft2 t1) LEFT JOIN (public.ft2 t2)) LEFT JOIN (public.ft4 t3)
   Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 LEFT JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) LEFT JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1  | c2 | c3
-----+----+----
 399 |  9 |
 984 |  4 |
 149 |  9 |
 988 |  8 |
 135 |  5 |
 311 |  1 |
 489 |  9 |
 115 |  5 |
 990 |  0 |
 970 |  0 |
(10 rows)

-- left outer join + placement of clauses.
-- clauses within the nullable side are not pulled up, but top level clause on
-- non-nullable side is pushed into non-nullable side
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
                                                                          QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Relations: (public.ft4 t1) LEFT JOIN (public.ft5)
   Remote SQL: SELECT r1.c1, r1.c2, r4.c1, r4.c2 FROM ("S 1"."T 3" r1 LEFT JOIN "S 1"."T 4" r4 ON (((r1.c1 = r4.c1)) AND ((r4.c1 < 10)))) WHERE ((r1.c1 < 10))
(4 rows)

SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10 ORDER BY t1.c1;
 c1 | c2 | c1 | c2
----+----+----+----
  2 |  3 |    |
  4 |  5 |    |
  6 |  7 |  6 |  7
  8 |  9 |    |
(4 rows)

-- clauses within the nullable side are not pulled up, but the top level clause
-- on nullable side is not pushed down into nullable side
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
--			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10 ORDER BY t1.c1;
ERROR:  syntax error at or near "SELECT"
LINE 4: SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SEL...
        ^
-- right outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
                                                                                           QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1
   Relations: (public.ft4 t2) LEFT JOIN (public.ft5 t1)
   Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r2 LEFT JOIN "S 1"."T 4" r1 ON (((r1.c1 = r2.c1)))) ORDER BY r2.c1 ASC NULLS LAST, r1.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c1
----+----
    | 22
 24 | 24
    | 26
    | 28
 30 | 30
    | 32
    | 34
 36 | 36
    | 38
    | 40
(10 rows)

-- right outer join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
                                                                                                                    QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Relations: ((public.ft4 t3) LEFT JOIN (public.ft2 t2)) LEFT JOIN (public.ft2 t1)
   Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 3" r4 LEFT JOIN "S 1"."T 1" r2 ON (((r2."C 1" = r4.c1)))) LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
                                                                                           QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1
   Relations: (public.ft4 t1) FULL JOIN (public.ft5 t2)
   Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) ORDER BY r1.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 45::bigint
(4 rows)

SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
 c1  | c1
-----+----
  92 |
  94 |
  96 | 96
  98 |
 100 |
     |  3
     |  9
     | 15
     | 21
     | 27
(10 rows)

-- full outer join with restrictions on the joining relations
-- a. the joining relations are both base relations
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
                                                                                                                                  QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: ft4.c1, ft5.c1
   Relations: (public.ft4) FULL JOIN (public.ft5)
   Remote SQL: SELECT s4.c1, s5.c1 FROM ((SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1) FULL JOIN (SELECT c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s5(c1) ON (((s4.c1 = s5.c1)))) ORDER BY s4.c1 ASC NULLS LAST, s5.c1 ASC NULLS LAST
(4 rows)

SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
 c1 | c1
----+----
 50 |
 52 |
 54 | 54
 56 |
 58 |
 60 | 60
    | 51
    | 57
(8 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
                                                                                                             QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: 1
   Relations: (public.ft4) FULL JOIN (public.ft5)
   Remote SQL: SELECT NULL FROM ((SELECT NULL FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4 FULL JOIN (SELECT NULL FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s5 ON (TRUE)) LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
 ?column?
----------
        1
        1
        1
        1
        1
        1
        1
        1
        1
        1
(10 rows)

-- b. one of the joining relations is a base relation and the other is a join
-- relation
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
                                                                                                                                                                                     QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: ft4.c1, t2.c1, t3.c1
   Relations: (public.ft4) FULL JOIN ((public.ft4 t2) LEFT JOIN (public.ft5 t3))
   Remote SQL: SELECT s4.c1, s8.c1, s8.c2 FROM ((SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1) FULL JOIN (SELECT r5.c1, r6.c1 FROM ("S 1"."T 3" r5 LEFT JOIN "S 1"."T 4" r6 ON (((r5.c1 = r6.c1)))) WHERE ((r5.c1 >= 50)) AND ((r5.c1 <= 60))) s8(c1, c2) ON (((s4.c1 = s8.c1)))) ORDER BY s4.c1 ASC NULLS LAST, s8.c1 ASC NULLS LAST, s8.c2 ASC NULLS LAST
(4 rows)

SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b
----+----+----
 50 | 50 |
 52 | 52 |
 54 | 54 | 54
 56 | 56 |
 58 | 58 |
 60 | 60 | 60
(6 rows)

-- c. test deparsing the remote query as nested subqueries
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
                                                                                                                                                                                                                                                     QUERY PLAN

 Foreign Scan
   Output: ft4.c1, ft4_1.c1, ft5.c1
   Relations: (public.ft4) FULL JOIN ((public.ft4 ft4_1) FULL JOIN (public.ft5))
   Remote SQL: SELECT s4.c1, s10.c1, s10.c2 FROM ((SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1) FULL JOIN (SELECT s8.c1, s9.c1 FROM ((SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s8(c1) FULL JOIN (SELECT c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s9(c1) ON (((s8.c1 = s9.c1)))) WHERE (((s8.c1 IS NULL) OR (s8.c1 IS NOT NULL)))) s10(c1, c2) ON (((s4.c1 = s10.c1)))) ORDER BY s4.c1 ASC NULLS LAST, s10.c1 ASC NULLS LAST, s10.c2 ASC NULLS LAST
(4 rows)

SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b
----+----+----
 50 | 50 |
 52 | 52 |
 54 | 54 | 54
 56 | 56 |
 58 | 58 |
 60 | 60 | 60
    |    | 51
    |    | 57
(8 rows)

-- d. test deparsing rowmarked relations as subqueries
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T 3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
                                                                                                                                                                                             QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: "T 3".c1, ft4.c1, ft5.c1, "T 3".ybctid, ft4.*, ft5.*
   ->  Nested Loop
         Output: "T 3".c1, ft4.c1, ft5.c1, "T 3".ybctid, ft4.*, ft5.*
         ->  Foreign Scan
               Output: ft4.c1, ft4.*, ft5.c1, ft5.*
               Relations: (public.ft4) FULL JOIN (public.ft5)
               Remote SQL: SELECT s8.c1, s8.c2, s9.c1, s9.c2 FROM ((SELECT c1, ROW(c1, c2, c3) FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s8(c1, c2) FULL JOIN (SELECT c1, ROW(c1, c2, c3) FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s9(c1, c2) ON (((s8.c1 = s9.c1)))) WHERE (((s8.c1 IS NULL) OR (s8.c1 IS NOT NULL))) ORDER BY s8.c1 ASC NULLS LAST, s9.c1 ASC NULLS LAST
               ->  Sort
                     Output: ft4.c1, ft4.*, ft5.c1, ft5.*
                     Sort Key: ft4.c1, ft5.c1
                     ->  Hash Full Join
                           Output: ft4.c1, ft4.*, ft5.c1, ft5.*
                           Hash Cond: (ft4.c1 = ft5.c1)
                           Filter: ((ft4.c1 IS NULL) OR (ft4.c1 IS NOT NULL))
                           ->  Foreign Scan on public.ft4
                                 Output: ft4.c1, ft4.*
                                 Remote Filter: ((ft4.c1 >= 50) AND (ft4.c1 <= 60))
                                 Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
                           ->  Hash
                                 Output: ft5.c1, ft5.*
                                 ->  Foreign Scan on public.ft5
                                       Output: ft5.c1, ft5.*
                                       Remote Filter: ((ft5.c1 >= 50) AND (ft5.c1 <= 60))
                                       Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))
         ->  Materialize
               Output: "T 3".c1, "T 3".ybctid
               ->  Index Scan using t3_pkey on "S 1"."T 3"
                     Output: "T 3".c1, "T 3".ybctid
                     Index Cond: ("T 3".c1 = 50)
(30 rows)

SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T 3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
 c1 | a  | b
----+----+----
 50 | 50 |
 50 | 52 |
 50 | 54 | 54
 50 | 56 |
 50 | 58 |
 50 | 60 | 60
 50 |    | 51
 50 |    | 57
(8 rows)

-- full outer join + inner join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
                                                                                                                                                 QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t3.c1
   Relations: ((public.ft4 t1) INNER JOIN (public.ft5 t2)) FULL JOIN (public.ft4 t3)
   Remote SQL: SELECT r1.c1, r2.c1, r4.c1 FROM (("S 1"."T 3" r1 INNER JOIN "S 1"."T 4" r2 ON (((r1.c1 = (r2.c1 + 1))) AND ((r1.c1 >= 50)) AND ((r1.c1 <= 60)))) FULL JOIN "S 1"."T 3" r4 ON (((r2.c1 = r4.c1)))) ORDER BY r1.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST, r4.c1 ASC NULLS LAST LIMIT 10::bigint
(4 rows)

SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
 c1 | c1 | c1
----+----+----
 52 | 51 |
 58 | 57 |
    |    |  2
    |    |  4
    |    |  6
    |    |  8
    |    | 10
    |    | 12
    |    | 14
    |    | 16
(10 rows)

-- full outer join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
                                                                                                                    QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Relations: ((public.ft2 t1) FULL JOIN (public.ft2 t2)) FULL JOIN (public.ft4 t3)
   Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) FULL JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) ORDER BY r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3
----+----+--------
 11 |  1 |
 12 |  2 | AAA012
 13 |  3 |
 14 |  4 | AAA014
 15 |  5 |
 16 |  6 | AAA016
 17 |  7 |
 18 |  8 | AAA018
 19 |  9 |
 20 |  0 | AAA020
(10 rows)

-- full outer join + right outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
                                                                                                                    QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Relations: ((public.ft4 t3) LEFT JOIN (public.ft2 t2)) LEFT JOIN (public.ft2 t1)
   Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 3" r4 LEFT JOIN "S 1"."T 1" r2 ON (((r2."C 1" = r4.c1)))) LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- right outer join + full outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
                                                                                                                    QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Relations: ((public.ft2 t2) LEFT JOIN (public.ft2 t1)) FULL JOIN (public.ft4 t3)
   Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r2 LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) FULL JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) ORDER BY r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3
----+----+--------
 11 |  1 |
 12 |  2 | AAA012
 13 |  3 |
 14 |  4 | AAA014
 15 |  5 |
 16 |  6 | AAA016
 17 |  7 |
 18 |  8 | AAA018
 19 |  9 |
 20 |  0 | AAA020
(10 rows)

-- full outer join + left outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
                                                                                                                    QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Relations: ((public.ft2 t1) FULL JOIN (public.ft2 t2)) LEFT JOIN (public.ft4 t3)
   Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) LEFT JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) ORDER BY r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3
----+----+--------
 11 |  1 |
 12 |  2 | AAA012
 13 |  3 |
 14 |  4 | AAA014
 15 |  5 |
 16 |  6 | AAA016
 17 |  7 |
 18 |  8 | AAA018
 19 |  9 |
 20 |  0 | AAA020
(10 rows)

-- left outer join + full outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
                                                                                                                    QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Relations: ((public.ft2 t1) LEFT JOIN (public.ft2 t2)) FULL JOIN (public.ft4 t3)
   Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 LEFT JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) FULL JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) ORDER BY r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3
----+----+--------
 11 |  1 |
 12 |  2 | AAA012
 13 |  3 |
 14 |  4 | AAA014
 15 |  5 |
 16 |  6 | AAA016
 17 |  7 |
 18 |  8 | AAA018
 19 |  9 |
 20 |  0 | AAA020
(10 rows)

-- right outer join + left outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
                                                                                                                    QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Relations: ((public.ft2 t2) LEFT JOIN (public.ft2 t1)) LEFT JOIN (public.ft4 t3)
   Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r2 LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) LEFT JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) ORDER BY r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3
----+----+--------
 11 |  1 |
 12 |  2 | AAA012
 13 |  3 |
 14 |  4 | AAA014
 15 |  5 |
 16 |  6 | AAA016
 17 |  7 |
 18 |  8 | AAA018
 19 |  9 |
 20 |  0 | AAA020
(10 rows)

-- left outer join + right outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
                                                                                                                    QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3
   Relations: (public.ft4 t3) LEFT JOIN ((public.ft2 t1) INNER JOIN (public.ft2 t2))
   Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM ("S 1"."T 3" r4 LEFT JOIN ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ON (((r2."C 1" = r4.c1)))) ORDER BY r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join + WHERE clause, only matched rows
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                                                                                                                 QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1
   Relations: (public.ft4 t1) FULL JOIN (public.ft5 t2)
   Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) WHERE (((r1.c1 = r2.c1) OR (r1.c1 IS NULL))) ORDER BY r1.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1
----+----
 66 | 66
 72 | 72
 78 | 78
 84 | 84
 90 | 90
 96 | 96
    |  3
    |  9
    | 15
    | 21
(10 rows)

-- full outer join + WHERE clause with shippable extensions set
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE postgres_fdw_abs(t1.c1) > 0 ORDER BY t1.c1 OFFSET 10 LIMIT 10;
                                                                                                                 QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t1.c3
   Relations: (public.ft1 t1) FULL JOIN (public.ft2 t2)
   Remote SQL: SELECT r1."C 1", r2.c2, r1.c3 FROM ("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) WHERE ((public.postgres_fdw_abs(r1."C 1") > 0)) ORDER BY r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE postgres_fdw_abs(t1.c1) > 0 ORDER BY t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |  c3
----+----+-------
 11 |  1 | 00011
 12 |  2 | 00012
 13 |  3 | 00013
 14 |  4 | 00014
 15 |  5 | 00015
 16 |  6 | 00016
 17 |  7 | 00017
 18 |  8 | 00018
 19 |  9 | 00019
 20 |  0 | 00020
(10 rows)

ALTER SERVER loopback OPTIONS (DROP extensions);
-- full outer join + WHERE clause with shippable extensions not set
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE postgres_fdw_abs(t1.c1) > 0 ORDER BY t1.c1 OFFSET 10 LIMIT 10;
                                                                           QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t1.c3
   ->  Foreign Scan
         Output: t1.c1, t2.c2, t1.c3
         Filter: (postgres_fdw_abs(t1.c1) > 0)
         Relations: (public.ft1 t1) FULL JOIN (public.ft2 t2)
         Remote SQL: SELECT r1."C 1", r2.c2, r1.c3 FROM ("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1."C 1" ASC NULLS LAST
(7 rows)

SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE postgres_fdw_abs(t1.c1) > 0 ORDER BY t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |  c3
----+----+-------
 11 |  1 | 00011
 12 |  2 | 00012
 13 |  3 | 00013
 14 |  4 | 00014
 15 |  5 | 00015
 16 |  6 | 00016
 17 |  7 | 00017
 18 |  8 | 00018
 19 |  9 | 00019
 20 |  0 | 00020
(10 rows)

ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
-- join two tables with FOR UPDATE clause
-- tests whole-row reference for row marks
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
                                                                                                                                                                                                                           QUERY PLAN
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
   Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint FOR UPDATE OF r1
(4 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
 c1  | c1
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
                                                                                                                                                                                                                                    QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
   Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint FOR UPDATE OF r1 FOR UPDATE OF r2
(4 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
 c1  | c1
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join two tables with FOR SHARE clause
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
                                                                                                                                                                                                                           QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
   Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint FOR SHARE OF r1
(4 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
 c1  | c1
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
                                                                                                                                                                                                                                   QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
   Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint FOR SHARE OF r1 FOR SHARE OF r2
(4 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
 c1  | c1
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join in CTE
EXPLAIN (VERBOSE, COSTS OFF)
WITH t (c1_1, c1_3, c2_1) AS (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
                                                                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3
   Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
   Remote SQL: SELECT r2."C 1", r3."C 1", r2.c3 FROM ("S 1"."T 1" r2 INNER JOIN "S 1"."T 1" r3 ON (((r2."C 1" = r3."C 1")))) ORDER BY r2.c3 ASC NULLS LAST, r2."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint
(4 rows)

WITH t (c1_1, c1_3, c2_1) AS (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
 c1_1 | c2_1
------+------
  101 |  101
  102 |  102
  103 |  103
  104 |  104
  105 |  105
  106 |  106
  107 |  107
  108 |  108
  109 |  109
  110 |  110
(10 rows)

-- ctid with whole-row reference
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.ctid, t1, t2, t1.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
ERROR:  System column "ctid" is not supported yet
CONTEXT:  remote SQL command: EXPLAIN SELECT r1.ctid, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, r1."C 1", r1.c3, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
SELECT t1.ctid, t1, t2, t1.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
ERROR:  System column "ctid" is not supported yet
CONTEXT:  remote SQL command: EXPLAIN SELECT r1.ctid, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, r1."C 1", r1.c3, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
-- SEMI JOIN, not pushed down
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                                      QUERY PLAN
---------------------------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Merge Join
         Output: t1.c1
         Inner Unique: true
         Merge Cond: (t1.c1 = t2.c1)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1
               Remote SQL: SELECT "C 1" FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
         ->  Sort
               Output: t2.c1
               Sort Key: t2.c1
               ->  HashAggregate
                     Output: t2.c1
                     Group Key: t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1
                           Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(18 rows)

SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- ANTI JOIN, not pushed down
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                                      QUERY PLAN
---------------------------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Merge Anti Join
         Output: t1.c1
         Merge Cond: (t1.c1 = t2.c2)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1
               Remote SQL: SELECT "C 1" FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
         ->  Foreign Scan on public.ft2 t2
               Output: t2.c2
               Remote SQL: SELECT c2 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
(11 rows)

SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1
-----
 110
 111
 112
 113
 114
 115
 116
 117
 118
 119
(10 rows)

-- CROSS JOIN, not pushed down
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                                                                                           QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1
   Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
   Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (TRUE)) ORDER BY r1."C 1" ASC NULLS LAST, r2."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint
(4 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- different server, not pushed down. No result expected.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                                      QUERY PLAN
---------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Merge Join
         Output: t1.c1, t2.c1
         Merge Cond: (t2.c1 = t1.c1)
         ->  Foreign Scan on public.ft6 t2
               Output: t2.c1, t2.c2, t2.c3
               Remote SQL: SELECT c1 FROM "S 1"."T 4" ORDER BY c1 ASC NULLS LAST
         ->  Materialize
               Output: t1.c1, t1.c2, t1.c3
               ->  Foreign Scan on public.ft5 t1
                     Output: t1.c1, t1.c2, t1.c3
                     Remote SQL: SELECT c1 FROM "S 1"."T 4" ORDER BY c1 ASC NULLS LAST
(13 rows)

SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1
----+----
(0 rows)

-- unsafe join conditions (c8 has a UDT), not pushed down. Practically a CROSS
-- JOIN since c8 in both tables has same value.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                               QUERY PLAN
-------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Left Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c8 = t2.c8)
               ->  Sort
                     Output: t1.c1, t1.c8
                     Sort Key: t1.c8
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c8
                           Remote SQL: SELECT "C 1", c8 FROM "S 1"."T 1"
               ->  Sort
                     Output: t2.c1, t2.c8
                     Sort Key: t2.c8
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.c8
                           Remote SQL: SELECT "C 1", c8 FROM "S 1"."T 1"
(20 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- unsafe conditions on one side (c8 has a UDT), not pushed down.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                 QUERY PLAN
-----------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Right Join
               Output: t1.c1, t2.c1, t1.c3
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c1
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Hash
                     Output: t1.c1, t1.c3
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c3
                           Filter: (t1.c8 = 'foo'::user_enum)
                           Remote SQL: SELECT "C 1", c3, c8 FROM "S 1"."T 1"
(17 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join where unsafe to pushdown condition in WHERE clause has a column not
-- in the SELECT clause. In this test unsafe clause needs to have column
-- references from both joining sides so that the clause is not pushed down
-- into one of the joining sides.
--EXPLAIN (VERBOSE, COSTS OFF)
--SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- Aggregate after UNION, for testing setrefs
--EXPLAIN (VERBOSE, COSTS OFF)
--SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
 t1c1 |         avg
------+----------------------
  101 | 202.0000000000000000
  102 | 204.0000000000000000
  103 | 206.0000000000000000
  104 | 208.0000000000000000
  105 | 210.0000000000000000
  106 | 212.0000000000000000
  107 | 214.0000000000000000
  108 | 216.0000000000000000
  109 | 218.0000000000000000
  110 | 220.0000000000000000
(10 rows)

-- join with lateral reference
--EXPLAIN (VERBOSE, COSTS OFF)
--SELECT t1."C 1" FROM "S 1"."T 1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C 1" OFFSET 10 LIMIT 10;
-- YB note: This is commented out as it ends up doing rescans on a remote relation
-- which uses an unsupported MOVE BACKWARD ALL IN command. See issue #11422.
--SELECT t1."C 1" FROM "S 1"."T 1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C 1" OFFSET 10 LIMIT 10;
-- non-Var items in targetlist of the nullable rel of a join preventing
-- push-down in some cases
-- unable to push {ft1, ft2}
EXPLAIN (VERBOSE, COSTS OFF)
SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15 ORDER BY ft2.c1;
                                                        QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: (13), ft2.c1
   Join Filter: (13 = ft2.c1)
   ->  Foreign Scan on public.ft2
         Output: ft2.c1
         Remote Filter: ((ft2.c1 >= 10) AND (ft2.c1 <= 15))
         Remote SQL: SELECT "C 1" FROM "S 1"."T 1" WHERE (("C 1" >= 10)) AND (("C 1" <= 15)) ORDER BY "C 1" ASC NULLS LAST
   ->  Materialize
         Output: (13)
         ->  Foreign Scan on public.ft1
               Output: 13
               Remote Filter: (ft1.c1 = 13)
               Remote SQL: SELECT NULL FROM "S 1"."T 1" WHERE (("C 1" = 13))
(13 rows)

SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15 ORDER BY ft2.c1;
 a  | c1
----+----
    | 10
    | 11
    | 12
 13 | 13
    | 14
    | 15
(6 rows)

-- ok to push {ft1, ft2} but not {ft1, ft2, ft4}
--EXPLAIN (VERBOSE, COSTS OFF)
--SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15 ORDER BY ft4.c1;
 c1 | a  | b  | c
----+----+----+----
 10 |    |    |
 12 | 13 | 12 | 12
 14 |    |    |
(3 rows)

-- join with nullable side with some columns with null values
UPDATE ft5 SET c3 = null where c1 % 9 = 0;
--EXPLAIN (VERBOSE, COSTS OFF)
--SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
      ft5       | c1 | c2 |   c3   | c1 | c2
----------------+----+----+--------+----+----
 (12,13,AAA012) | 12 | 13 | AAA012 | 12 | 13
 (18,19,)       | 18 | 19 |        | 18 | 19
 (24,25,AAA024) | 24 | 25 | AAA024 | 24 | 25
 (30,31,AAA030) | 30 | 31 | AAA030 | 30 | 31
(4 rows)

-- multi-way join involving multiple merge joins
-- (this case used to have EPQ-related planning problems)
SET enable_nestloop TO false;
SET yb_enable_batchednl TO false;
SET enable_hashjoin TO false;
--EXPLAIN (VERBOSE, COSTS OFF)
--SELECT * FROM ft1, ft2, ft4, ft5 WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
--    AND ft1.c2 = ft5.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 ORDER BY ft1.c1 FOR UPDATE;
SELECT * FROM ft1, ft2, ft4, ft5 WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
    AND ft1.c2 = ft5.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 ORDER BY ft1.c1 FOR UPDATE;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | c1 | c2 |   c3   | c1 | c2 |   c3
----+----+-------+------------------------------+--------------------------+----+------------+-----+----+----+-------+------------------------------+--------------------------+----+------------+-----+----+----+--------+----+----+--------
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo |  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | 26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | 36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | 46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | 56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | 66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | 76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | 86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | 96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
(10 rows)

RESET enable_nestloop;
RESET enable_hashjoin;
-- check join pushdown in situations where multiple userids are involved
CREATE ROLE regress_view_owner SUPERUSER;
CREATE USER MAPPING FOR regress_view_owner SERVER loopback;
GRANT SELECT ON ft4 TO regress_view_owner;
GRANT SELECT ON ft5 TO regress_view_owner;
CREATE VIEW v4 AS SELECT * FROM ft4;
CREATE VIEW v5 AS SELECT * FROM ft5;
ALTER VIEW v5 OWNER TO regress_view_owner;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, different view owners
                              QUERY PLAN
----------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         ->  Hash Left Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Hash Cond: (ft4.c1 = ft5.c1)
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1, ft4.c2, ft4.c3
                     Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Hash
                     Output: ft5.c2, ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.c2, ft5.c1
                           Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(16 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2
----+----
 22 |
 24 | 25
 26 |
 28 |
 30 | 31
 32 |
 34 |
 36 | 37
 38 |
 40 |
(10 rows)

ALTER VIEW v4 OWNER TO regress_view_owner;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                                                                                              QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: ft4.c1, ft5.c2, ft5.c1
   Relations: (public.ft4) LEFT JOIN (public.ft5)
   Remote SQL: SELECT r6.c1, r9.c2, r9.c1 FROM ("S 1"."T 3" r6 LEFT JOIN "S 1"."T 4" r9 ON (((r6.c1 = r9.c1)))) ORDER BY r6.c1 ASC NULLS LAST, r9.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2
----+----
 22 |
 24 | 25
 26 |
 28 |
 30 | 31
 32 |
 34 |
 36 | 37
 38 |
 40 |
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, view owner not current user
                              QUERY PLAN
----------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         ->  Hash Left Join
               Output: ft4.c1, t2.c2, t2.c1
               Hash Cond: (ft4.c1 = t2.c1)
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1, ft4.c2, ft4.c3
                     Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(16 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2
----+----
 22 |
 24 | 25
 26 |
 28 |
 30 | 31
 32 |
 34 |
 36 | 37
 38 |
 40 |
(10 rows)

ALTER VIEW v4 OWNER TO CURRENT_USER;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                                                                                              QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: ft4.c1, t2.c2, t2.c1
   Relations: (public.ft4) LEFT JOIN (public.ft5 t2)
   Remote SQL: SELECT r6.c1, r2.c2, r2.c1 FROM ("S 1"."T 3" r6 LEFT JOIN "S 1"."T 4" r2 ON (((r6.c1 = r2.c1)))) ORDER BY r6.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
(4 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2
----+----
 22 |
 24 | 25
 26 |
 28 |
 30 | 31
 32 |
 34 |
 36 | 37
 38 |
 40 |
(10 rows)

ALTER VIEW v4 OWNER TO regress_view_owner;
-- cleanup
DROP OWNED BY regress_view_owner;
DROP ROLE regress_view_owner;
-- YB note: catalog snapshot invalidated, remove pg_sleeps when issue #11554 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- ===================================================================
-- Aggregate and grouping queries
-- ===================================================================
-- Simple aggregates
--explain (verbose, costs off)
--select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
 count |  sum  |         avg          | min | max  | stddev | sum2
-------+-------+----------------------+-----+------+--------+-------
   100 | 49600 | 496.0000000000000000 |   1 |  991 |      0 | 49600
   100 | 49700 | 497.0000000000000000 |   2 |  992 |      0 | 49700
   100 | 49800 | 498.0000000000000000 |   3 |  993 |      0 | 49800
   100 | 49900 | 499.0000000000000000 |   4 |  994 |      0 | 49900
   100 | 50500 | 505.0000000000000000 |   0 | 1000 |      0 | 50500
(5 rows)

-- Aggregate is not pushed down as aggregation contains random()
explain (verbose, costs off)
select sum(c1 * (random() <= 1)::int) as sum, avg(c1) from ft1;
                                  QUERY PLAN
-------------------------------------------------------------------------------
 Aggregate
   Output: sum((c1 * ((random() <= '1'::double precision))::integer)), avg(c1)
   ->  Foreign Scan on public.ft1
         Output: c1
         Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(5 rows)

-- YB note: Was missing the actual execution of the query, added here and in some later locations as sanity check, especially since the explain currently crashes
select sum(c1 * (random() <= 1)::int) as sum, avg(c1) from ft1;
  sum   |         avg
--------+----------------------
 500500 | 500.5000000000000000
(1 row)

-- Aggregate over join query
--explain (verbose, costs off)
--select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
 count |   sum   |         avg
-------+---------+----------------------
 10000 | 5010000 | 501.0000000000000000
(1 row)

-- Not pushed down due to local conditions present in underneath input rel
explain (verbose, costs off)
select sum(t1.c1), count(t2.c1) from ft1 t1 inner join ft2 t2 on (t1.c1 = t2.c1) where ((t1.c1 * t2.c1)/(t1.c1 * t2.c1)) * random() <= 1;
                                                         QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(t1.c1), count(t2.c1)
   ->  Foreign Scan
         Output: t1.c1, t2.c1
         Filter: (((((t1.c1 * t2.c1) / (t1.c1 * t2.c1)))::double precision * random()) <= '1'::double precision)
         Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
         Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
(7 rows)

select sum(t1.c1), count(t2.c1) from ft1 t1 inner join ft2 t2 on (t1.c1 = t2.c1) where ((t1.c1 * t2.c1)/(t1.c1 * t2.c1)) * random() <= 1;
  sum   | count
--------+-------
 500500 |  1000
(1 row)

-- GROUP BY clause having expressions
--explain (verbose, costs off)
--select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
 ?column? | ?column?
----------+----------
        0 |        0
        1 |      500
        2 |     1800
        3 |     3900
        4 |     6800
(5 rows)

-- Aggregates in subquery are pushed down.
--explain (verbose, costs off)
--select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
 count | sum
-------+------
  1000 | 4500
(1 row)

-- Aggregate is still pushed down by taking unshippable expression out
--explain (verbose, costs off)
--select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
 sum1 |  sum2
------+--------
    0 |      0
    1 |  49600
    2 |  99400
    3 | 149400
    4 | 199600
    5 | 250000
    6 | 300600
    7 | 351400
    8 | 402400
    9 | 453600
(10 rows)

-- Aggregate with unshippable GROUP BY clause are not pushed
explain (verbose, costs off)
select c2 * (random() <= 1)::int as c2 from ft2 group by c2 * (random() <= 1)::int order by 1;
                                  QUERY PLAN
------------------------------------------------------------------------------
 Sort
   Output: ((c2 * ((random() <= '1'::double precision))::integer))
   Sort Key: ((ft2.c2 * ((random() <= '1'::double precision))::integer))
   ->  HashAggregate
         Output: ((c2 * ((random() <= '1'::double precision))::integer))
         Group Key: (ft2.c2 * ((random() <= '1'::double precision))::integer)
         ->  Foreign Scan on public.ft2
               Output: (c2 * ((random() <= '1'::double precision))::integer)
               Remote SQL: SELECT c2 FROM "S 1"."T 1"
(9 rows)

select c2 * (random() <= 1)::int as c2 from ft2 group by c2 * (random() <= 1)::int order by 1;
 c2
----
  0
  1
  2
  3
  4
  5
  6
  7
  8
  9
(10 rows)

-- GROUP BY clause in various forms, cardinal, alias and constant expression
--explain (verbose, costs off)
--select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
  w  | x | y |  z
-----+---+---+-----
 100 | 0 | 5 | 7.0
 100 | 1 | 5 | 7.0
 100 | 2 | 5 | 7.0
 100 | 3 | 5 | 7.0
 100 | 4 | 5 | 7.0
 100 | 5 | 5 | 7.0
 100 | 6 | 5 | 7.0
 100 | 7 | 5 | 7.0
 100 | 8 | 5 | 7.0
 100 | 9 | 5 | 7.0
(10 rows)

-- GROUP BY clause referring to same column multiple times
-- Also, ORDER BY contains an aggregate function
--explain (verbose, costs off)
--select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
 c2 | c2
----+----
  7 |  7
  8 |  8
  9 |  9
(3 rows)

-- Testing HAVING clause shippability
--explain (verbose, costs off)
--select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
 c2 |  sum
----+-------
  1 | 49600
  2 | 49700
(2 rows)

-- Unshippable HAVING clause will be evaluated locally, and other qual in HAVING clause is pushed down
explain (verbose, costs off)
select count(*) from (select c5, count(c1) from ft1 group by c5, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
                                                              QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*)
   ->  Foreign Scan
         Output: ft1.c5, NULL::bigint, (sqrt((ft1.c2)::double precision))
         Filter: (((((avg(ft1.c1)) / (avg(ft1.c1))))::double precision * random()) <= '1'::double precision)
         Relations: Aggregate on (public.ft1)
         Remote SQL: SELECT c5, NULL::bigint, sqrt(c2), avg("C 1") FROM "S 1"."T 1" GROUP BY 1, 3 HAVING ((avg("C 1") < 500::numeric))
(7 rows)

select count(*) from (select c5, count(c1) from ft1 group by c5, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
 count
-------
    49
(1 row)

-- Aggregate in HAVING clause is not pushable, and thus aggregation is not pushed down
explain (verbose, costs off)
select sum(c1) from ft1 group by c2 having avg(c1 * (random() <= 1)::int) > 100 order by 1;
                                            QUERY PLAN
---------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(c1)), c2
   Sort Key: (sum(ft1.c1))
   ->  HashAggregate
         Output: sum(c1), c2
         Group Key: ft1.c2
         Filter: (avg((ft1.c1 * ((random() <= '1'::double precision))::integer)) > '100'::numeric)
         ->  Foreign Scan on public.ft1
               Output: c1, c2
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(10 rows)

select sum(c1) from ft1 group by c2 having avg(c1 * (random() <= 1)::int) > 100 order by 1;
  sum
-------
 49600
 49700
 49800
 49900
 50000
 50100
 50200
 50300
 50400
 50500
(10 rows)

-- Testing ORDER BY, DISTINCT, FILTER, Ordered-sets and VARIADIC within aggregates
-- ORDER BY within aggregate, same column used to order
--explain (verbose, costs off)
--select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
           array_agg
--------------------------------
 {1,11,21,31,41,51,61,71,81,91}
 {2,12,22,32,42,52,62,72,82,92}
 {3,13,23,33,43,53,63,73,83,93}
 {4,14,24,34,44,54,64,74,84,94}
 {5,15,25,35,45,55,65,75,85,95}
 {6,16,26,36,46,56,66,76,86,96}
 {7,17,27,37,47,57,67,77,87,97}
 {8,18,28,38,48,58,68,78,88,98}
 {9,19,29,39,49,59,69,79,89,99}
 {10,20,30,40,50,60,70,80,90}
(10 rows)

-- ORDER BY within aggregate, different column used to order also using DESC
--explain (verbose, costs off)
--select array_agg(c5 order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
select array_agg(c5 order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                                                array_agg
------------------------------------------------------------------------------------------------------------------------------------------
 {"Mon Feb 16 00:00:00 1970","Fri Feb 06 00:00:00 1970","Tue Jan 27 00:00:00 1970","Sat Jan 17 00:00:00 1970","Wed Jan 07 00:00:00 1970"}
(1 row)

-- DISTINCT within aggregate
--explain (verbose, costs off)
--select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

-- DISTINCT combined with ORDER BY within aggregate
--explain (verbose, costs off)
--select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

--explain (verbose, costs off)
--select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg
--------------
 {3,2,1,NULL}
 {4,3,2,1,0}
(2 rows)

-- FILTER within aggregate
--explain (verbose, costs off)
--select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
 sum
-----
 510
 520
 530
 540






(10 rows)

-- DISTINCT, ORDER BY and FILTER within aggregate
--explain (verbose, costs off)
--select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
 sum | sum | c2
-----+-----+----
  99 |   1 |  6
(1 row)

-- Outer query is aggregation query
--explain (verbose, costs off)
--select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
 count
-------
     1
(1 row)

-- Inner query is aggregation query
--explain (verbose, costs off)
--select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
 count
-------
     0
     1
(2 rows)

-- Aggregate not pushed down as FILTER condition is not pushable
explain (verbose, costs off)
select sum(c1) filter (where (c1 / c1) * random() <= 1) from ft1 group by c2 order by 1;
                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(c1) FILTER (WHERE ((((c1 / c1))::double precision * random()) <= '1'::double precision))), c2
   Sort Key: (sum(ft1.c1) FILTER (WHERE ((((ft1.c1 / ft1.c1))::double precision * random()) <= '1'::double precision)))
   ->  HashAggregate
         Output: sum(c1) FILTER (WHERE ((((c1 / c1))::double precision * random()) <= '1'::double precision)), c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c1, c2
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(9 rows)

select sum(c1) filter (where (c1 / c1) * random() <= 1) from ft1 group by c2 order by 1;
  sum
-------
 49600
 49700
 49800
 49900
 50000
 50100
 50200
 50300
 50400
 50500
(10 rows)

explain (verbose, costs off)
select sum(c2) filter (where c2 in (select c2 from ft1 where c2 < 5)) from ft1;
                            QUERY PLAN
-------------------------------------------------------------------
 Aggregate
   Output: sum(ft1.c2) FILTER (WHERE (hashed SubPlan 1))
   ->  Foreign Scan on public.ft1
         Output: ft1.c2
         Remote SQL: SELECT c2 FROM "S 1"."T 1"
   SubPlan 1
     ->  Foreign Scan on public.ft1 ft1_1
           Output: ft1_1.c2
           Remote Filter: (ft1_1.c2 < 5)
           Remote SQL: SELECT c2 FROM "S 1"."T 1" WHERE ((c2 < 5))
(10 rows)

select sum(c2) filter (where c2 in (select c2 from ft1 where c2 < 5)) from ft1;
 sum
------
 1000
(1 row)

-- Ordered-sets within aggregate
--explain (verbose, costs off)
--select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
 c2 | rank | percentile_cont
----+------+-----------------
  0 |  101 |              10
  1 |  101 |             100
  2 |    1 |             200
  3 |    1 |             300
  4 |    1 |             400
(5 rows)

-- Using multiple arguments within aggregates
--explain (verbose, costs off)
--select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
 c1 | rank
----+------
  6 |    1
(1 row)

-- User defined function for user defined aggregate, VARIADIC
create function least_accum(anyelement, variadic anyarray)
returns anyelement language sql as
  'select least($1, min($2[i])) from generate_subscripts($2,1) g(i)';
create aggregate least_agg(variadic items anyarray) (
  stype = anyelement, sfunc = least_accum
);
-- Disable hash aggregation for plan stability.
set enable_hashagg to false;
-- Not pushed down due to user defined aggregate
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 group by c2 order by c2;
                                    QUERY PLAN
----------------------------------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Foreign Scan on public.ft1
         Output: c2, c1
         Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
(6 rows)

-- Add function and aggregate into extension
alter extension postgres_fdw add function least_accum(anyelement, variadic anyarray);
alter extension postgres_fdw add aggregate least_agg(variadic items anyarray);
-- YB note: option "extensions" not found, see issue #11421
alter server loopback options (set extensions 'postgres_fdw');
-- Now aggregate will be pushed.  Aggregate will display VARIADIC argument.
--explain (verbose, costs off)
--select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
 c2 | least_agg
----+-----------
  0 |        10
  1 |         1
  2 |         2
  3 |         3
  4 |         4
  5 |         5
  6 |         6
  7 |         7
  8 |         8
  9 |         9
(10 rows)

-- Remove function and aggregate from extension
alter extension postgres_fdw drop function least_accum(anyelement, variadic anyarray);
alter extension postgres_fdw drop aggregate least_agg(variadic items anyarray);
-- YB note: option "extensions" not found, see issue #11421
alter server loopback options (set extensions 'postgres_fdw');
-- Not pushed down as we have dropped objects from extension.
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 group by c2 order by c2;
                                    QUERY PLAN
----------------------------------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Foreign Scan on public.ft1
         Output: c2, c1
         Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
(6 rows)

-- Cleanup
reset enable_hashagg;
drop aggregate least_agg(variadic items anyarray);
drop function least_accum(anyelement, variadic anyarray);
-- Testing USING OPERATOR() in ORDER BY within aggregate.
-- For this, we need user defined operators along with operator family and
-- operator class.  Create those and then add them in extension.  Note that
-- user defined objects are considered unshippable unless they are part of
-- the extension.
create operator public.<^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4eq
);
create operator public.=^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4lt
);
create operator public.>^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4gt
);
create operator family my_op_family using btree;
create function my_op_cmp(a int, b int) returns int as
  $$begin return btint4cmp(a, b); end $$ language plpgsql;
create operator class my_op_class for type int using btree family my_op_family as
 operator 1 public.<^,
 operator 3 public.=^,
 operator 5 public.>^,
 function 1 my_op_cmp(int, int);
-- This will not be pushed as user defined sort operator is not part of the
-- extension yet.
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                         QUERY PLAN
--------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2
         Output: c1, c2
         Remote Filter: ((ft2.c1 < 100) AND (ft2.c2 = 6))
         Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) AND ((c2 = 6))
(7 rows)

-- Add into extension
alter extension postgres_fdw add operator class my_op_class using btree;
alter extension postgres_fdw add function my_op_cmp(a int, b int);
alter extension postgres_fdw add operator family my_op_family using btree;
alter extension postgres_fdw add operator public.<^(int, int);
alter extension postgres_fdw add operator public.=^(int, int);
alter extension postgres_fdw add operator public.>^(int, int);
-- YB note: option "extensions" not found, see issue #11421
alter server loopback options (set extensions 'postgres_fdw');
-- Now this will be pushed as sort operator is part of the extension.
--explain (verbose, costs off)
--select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
           array_agg
--------------------------------
 {6,16,26,36,46,56,66,76,86,96}
(1 row)

-- Remove from extension
alter extension postgres_fdw drop operator class my_op_class using btree;
alter extension postgres_fdw drop function my_op_cmp(a int, b int);
alter extension postgres_fdw drop operator family my_op_family using btree;
alter extension postgres_fdw drop operator public.<^(int, int);
alter extension postgres_fdw drop operator public.=^(int, int);
alter extension postgres_fdw drop operator public.>^(int, int);
-- YB note: option "extensions" not found, see issue #11421
alter server loopback options (set extensions 'postgres_fdw');
-- This will not be pushed as sort operator is now removed from the extension.
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                         QUERY PLAN
--------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2
         Output: c1, c2
         Remote Filter: ((ft2.c1 < 100) AND (ft2.c2 = 6))
         Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) AND ((c2 = 6))
(7 rows)

-- Cleanup
drop operator class my_op_class using btree;
drop function my_op_cmp(a int, b int);
drop operator family my_op_family using btree;
drop operator public.>^(int, int);
drop operator public.=^(int, int);
drop operator public.<^(int, int);
-- Input relation to aggregate push down hook is not safe to pushdown and thus
-- the aggregate cannot be pushed down to foreign server.
explain (verbose, costs off)
select count(t1.c3) from ft2 t1 left join ft2 t2 on (t1.c1 = random() * t2.c2);
                                        QUERY PLAN
-------------------------------------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Nested Loop Left Join
         Output: t1.c3
         Join Filter: ((t1.c1)::double precision = (random() * (t2.c2)::double precision))
         ->  Foreign Scan on public.ft2 t1
               Output: t1.c3, t1.c1
               Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
         ->  Materialize
               Output: t2.c2
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2
                     Remote SQL: SELECT c2 FROM "S 1"."T 1"
(13 rows)

-- YB note: catalog snapshot invalidated, remove pg_sleeps when issue #11554 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- Subquery in FROM clause having aggregate
--explain (verbose, costs off)
--select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
 count |   b
-------+-------
   100 | 49600
   100 | 49700
   100 | 49800
   100 | 49900
   100 | 50000
   100 | 50100
   100 | 50200
   100 | 50300
   100 | 50400
   100 | 50500
(10 rows)

-- FULL join with IS NULL check in HAVING
--explain (verbose, costs off)
--select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
         avg         | sum
---------------------+-----
 51.0000000000000000 |
                     |   3
                     |   9
(3 rows)

-- Aggregate over FULL join needing to deparse the joining relations as
-- subqueries.
--explain (verbose, costs off)
--select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
 count | sum |         avg
-------+-----+---------------------
     8 | 330 | 55.5000000000000000
(1 row)

-- ORDER BY expression is part of the target list but not pushed down to
-- foreign server.
--explain (verbose, costs off)
--select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
 sum
------
 4500
(1 row)

-- LATERAL join, with parameterization
-- YB note: ERROR:  FETCH BACKWARD not supported yet, see issue #11422
set enable_hashagg to false;
--explain (verbose, costs off)
--select c2, sum from "S 1"."T 1" t1, lateral (select sum(t2.c1 + t1."C 1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C 1" < 100 order by 1;
select c2, sum from "S 1"."T 1" t1, lateral (select sum(t2.c1 + t1."C 1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C 1" < 100 order by 1;
 c2 | sum
----+-----
  1 |   2
  2 |   4
(2 rows)

reset enable_hashagg;
-- bug #15613: bad plan for foreign table scan with lateral reference
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ref_0.c2, subq_1.*
FROM
    "S 1"."T 1" AS ref_0,
    LATERAL (
        SELECT ref_0."C 1" c1, subq_0.*
        FROM (SELECT ref_0.c2, ref_1.c3
              FROM ft1 AS ref_1) AS subq_0
             RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.c3)
    ) AS subq_1
WHERE ref_0."C 1" < 10 AND subq_1.c3 = '00001'
ORDER BY ref_0."C 1";
                                    QUERY PLAN
-----------------------------------------------------------------------------------
 Sort
   Output: ref_0.c2, ref_0."C 1", (ref_0.c2), ref_1.c3, ref_0."C 1"
   Sort Key: ref_0."C 1"
   ->  Nested Loop
         Output: ref_0.c2, ref_0."C 1", (ref_0.c2), ref_1.c3, ref_0."C 1"
         ->  Nested Loop
               Output: ref_0.c2, ref_0."C 1", ref_1.c3, (ref_0.c2)
               ->  Seq Scan on "S 1"."T 1" ref_0
                     Output: ref_0.c2, ref_0."C 1"
                     Storage Filter: (ref_0."C 1" < 10)
               ->  Foreign Scan on public.ft1 ref_1
                     Output: ref_1.c3, ref_0.c2
                     Remote Filter: (ref_1.c3 = '00001'::text)
                     Remote SQL: SELECT c3 FROM "S 1"."T 1" WHERE ((c3 = '00001'))
         ->  Materialize
               Output: ref_3.c3
               ->  Foreign Scan on public.ft2 ref_3
                     Output: ref_3.c3
                     Remote Filter: (ref_3.c3 = '00001'::text)
                     Remote SQL: SELECT c3 FROM "S 1"."T 1" WHERE ((c3 = '00001'))
(20 rows)

SELECT ref_0.c2, subq_1.*
FROM
    "S 1"."T 1" AS ref_0,
    LATERAL (
        SELECT ref_0."C 1" c1, subq_0.*
        FROM (SELECT ref_0.c2, ref_1.c3
              FROM ft1 AS ref_1) AS subq_0
             RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.c3)
    ) AS subq_1
WHERE ref_0."C 1" < 10 AND subq_1.c3 = '00001'
ORDER BY ref_0."C 1";
 c2 | c1 | c2 |  c3
----+----+----+-------
  1 |  1 |  1 | 00001
  2 |  2 |  2 | 00001
  3 |  3 |  3 | 00001
  4 |  4 |  4 | 00001
  5 |  5 |  5 | 00001
  6 |  6 |  6 | 00001
  7 |  7 |  7 | 00001
  8 |  8 |  8 | 00001
  9 |  9 |  9 | 00001
(9 rows)

-- Check with placeHolderVars
--explain (verbose, costs off)
--select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
 sum | count
-----+-------
 650 |    50
(1 row)

-- Not supported cases
-- Grouping sets
explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
                                  QUERY PLAN
------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1))
   Sort Key: ft1.c2
   ->  MixedAggregate
         Output: c2, sum(c1)
         Hash Key: ft1.c2
         Group Key: ()
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Remote Filter: (ft1.c2 < 3)
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3))
(11 rows)

select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
 c2 |  sum
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
                                  QUERY PLAN
------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1))
   Sort Key: ft1.c2
   ->  MixedAggregate
         Output: c2, sum(c1)
         Hash Key: ft1.c2
         Group Key: ()
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Remote Filter: (ft1.c2 < 3)
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3))
(11 rows)

select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
 c2 |  sum
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

explain (verbose, costs off)
select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
                                    QUERY PLAN
----------------------------------------------------------------------------------
 Sort
   Output: c2, c6, (sum(c1))
   Sort Key: ft1.c2, ft1.c6
   ->  HashAggregate
         Output: c2, c6, sum(c1)
         Hash Key: ft1.c2
         Hash Key: ft1.c6
         ->  Foreign Scan on public.ft1
               Output: c2, c6, c1
               Remote Filter: (ft1.c2 < 3)
               Remote SQL: SELECT "C 1", c2, c6 FROM "S 1"."T 1" WHERE ((c2 < 3))
(11 rows)

select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
 c2 | c6 |  sum
----+----+-------
  0 |    | 50500
  1 |    | 49600
  2 |    | 49700
    | 0  | 50500
    | 1  | 49600
    | 2  | 49700
(6 rows)

explain (verbose, costs off)
select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
                                  QUERY PLAN
------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1)), (GROUPING(c2))
   Sort Key: ft1.c2
   ->  HashAggregate
         Output: c2, sum(c1), GROUPING(c2)
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Remote Filter: (ft1.c2 < 3)
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3))
(10 rows)

select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
 c2 |  sum  | grouping
----+-------+----------
  0 | 50500 |        0
  1 | 49600 |        0
  2 | 49700 |        0
(3 rows)

-- DISTINCT itself is not pushed down, whereas underneath aggregate is pushed
--explain (verbose, costs off)
--select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
 s
----
 49
 50
(2 rows)

-- WindowAgg
--explain (verbose, costs off)
--select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
 c2 | sum | count
----+-----+-------
  0 |   0 |     5
  1 | 100 |     5
  2 | 200 |     5
  3 | 300 |     5
  4 | 400 |     5
  5 | 500 |     5
  6 | 600 |     5
  7 | 700 |     5
  8 | 800 |     5
  9 | 900 |     5
(10 rows)

--explain (verbose, costs off)
--select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
 c2 |  array_agg
----+-------------
  0 | {8,6,4,2,0}
  1 | {9,7,5,3,1}
  2 | {8,6,4,2}
  3 | {9,7,5,3}
  4 | {8,6,4}
  5 | {9,7,5}
  6 | {8,6}
  7 | {9,7}
  8 | {8}
  9 | {9}
(10 rows)

--explain (verbose, costs off)
--select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
 c2 |  array_agg
----+-------------
  0 | {0,2,4,6,8}
  1 | {1,3,5,7,9}
  2 | {2,4,6,8}
  3 | {3,5,7,9}
  4 | {4,6,8}
  5 | {5,7,9}
  6 | {6,8}
  7 | {7,9}
  8 | {8}
  9 | {9}
(10 rows)

-- ===================================================================
-- parameterized queries
-- ===================================================================
-- simple join
PREPARE st1(int, int) AS SELECT t1.c3, t2.c3 FROM ft1 t1, ft2 t2 WHERE t1.c1 = $1 AND t2.c1 = $2;
--EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st1(1, 2);
EXECUTE st1(1, 1);
  c3   |  c3
-------+-------
 00001 | 00001
(1 row)

EXECUTE st1(101, 101);
  c3   |  c3
-------+-------
 00101 | 00101
(1 row)

-- subquery using stable function (can't be sent to remote)
PREPARE st2(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(c4) = '1970-01-17'::date) ORDER BY c1;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st2(10, 20);
                                                QUERY PLAN
----------------------------------------------------------------------------------------------------------
 Sort
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
   Sort Key: t1.c1
   ->  Hash Semi Join
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
         Hash Cond: (t1.c3 = t2.c3)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
               Remote Filter: (t1.c1 < 20)
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" < 20))
         ->  Hash
               Output: t2.c3
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c3
                     Filter: (date(t2.c4) = '01-17-1970'::date)
                     Remote Filter: (t2.c1 > 10)
                     Remote SQL: SELECT c3, c4 FROM "S 1"."T 1" WHERE (("C 1" > 10))
(17 rows)

EXECUTE st2(10, 20);
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
----+----+-------+------------------------------+--------------------------+----+------------+-----
 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo
(1 row)

EXECUTE st2(101, 121);
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
-----+----+-------+------------------------------+--------------------------+----+------------+-----
 116 |  6 | 00116 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo
(1 row)

-- subquery using immutable function (can be sent to remote)
PREPARE st3(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(c5) = '1970-01-17'::date) ORDER BY c1;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st3(10, 20);
                                                         QUERY PLAN
-----------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
   Sort Key: t1.c1
   ->  Hash Join
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
         Inner Unique: true
         Hash Cond: (t1.c3 = t2.c3)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
               Remote Filter: (t1.c1 < 20)
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" < 20))
         ->  Hash
               Output: t2.c3
               ->  HashAggregate
                     Output: t2.c3
                     Group Key: t2.c3
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c3
                           Remote Filter: ((t2.c1 > 10) AND (date(t2.c5) = '01-17-1970'::date))
                           Remote SQL: SELECT c3 FROM "S 1"."T 1" WHERE (("C 1" > 10)) AND ((date(c5) = '1970-01-17'::date))
(20 rows)

EXECUTE st3(10, 20);
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
----+----+-------+------------------------------+--------------------------+----+------------+-----
 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo
(1 row)

EXECUTE st3(20, 30);
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8
----+----+----+----+----+----+----+----
(0 rows)

-- custom plan should be chosen initially
PREPARE st4(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 = $1;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                         QUERY PLAN
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (t1.c1 = 1)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                         QUERY PLAN
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (t1.c1 = 1)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                         QUERY PLAN
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (t1.c1 = 1)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                         QUERY PLAN
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (t1.c1 = 1)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                         QUERY PLAN
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (t1.c1 = 1)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

-- once we try it enough times, should switch to generic plan
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                              QUERY PLAN
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (t1.c1 = $1)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = $1::integer))
(4 rows)

-- value of $1 should not be sent to remote
PREPARE st5(user_enum,int) AS SELECT * FROM ft1 t1 WHERE c8 = $1 and c1 = $2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                         QUERY PLAN
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c8 = 'foo'::user_enum)
   Remote Filter: (t1.c1 = 1)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(5 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                         QUERY PLAN
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c8 = 'foo'::user_enum)
   Remote Filter: (t1.c1 = 1)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(5 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                         QUERY PLAN
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c8 = 'foo'::user_enum)
   Remote Filter: (t1.c1 = 1)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(5 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                         QUERY PLAN
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c8 = 'foo'::user_enum)
   Remote Filter: (t1.c1 = 1)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(5 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                         QUERY PLAN
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c8 = 'foo'::user_enum)
   Remote Filter: (t1.c1 = 1)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(5 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                              QUERY PLAN
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c8 = $1)
   Remote Filter: (t1.c1 = $2)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = $1::integer))
(5 rows)

EXECUTE st5('foo', 1);
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
----+----+-------+------------------------------+--------------------------+----+------------+-----
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo
(1 row)

-- altering FDW options requires replanning
PREPARE st6 AS SELECT * FROM ft1 t1 WHERE t1.c1 = t1.c2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                                          QUERY PLAN
----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (t1.c1 = t1.c2)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = c2))
(4 rows)

PREPARE st7 AS INSERT INTO ft1 (c1,c2,c3) VALUES (1001,101,'foo');
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
                                                                                           QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft1
   Remote SQL: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
   Batch Size: 1
   ->  Result
         Output: NULL::integer, 1001, 101, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10), NULL::user_enum
(5 rows)

-- YB note: ERROR:  ALTER TABLE not supported yet, uncomment when #1124 is fixed
--ALTER TABLE "S 1"."T 1" RENAME TO "T 0";
--ALTER FOREIGN TABLE ft1 OPTIONS (SET table_name 'T 0');
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                                          QUERY PLAN
----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (t1.c1 = t1.c2)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = c2))
(4 rows)

EXECUTE st6;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
----+----+-------+------------------------------+--------------------------+----+------------+-----
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo
(9 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
                                                                                           QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft1
   Remote SQL: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
   Batch Size: 1
   ->  Result
         Output: NULL::integer, 1001, 101, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10), NULL::user_enum
(5 rows)

-- YB note: ERROR:  ALTER TABLE not supported yet, uncomment when #1124 is fixed
--ALTER TABLE "S 1"."T 0" RENAME TO "T 1";
--ALTER FOREIGN TABLE ft1 OPTIONS (SET table_name 'T 1');
PREPARE st8 AS SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
--EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
--ALTER SERVER loopback OPTIONS (DROP extensions);
--EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
--EXECUTE st8;
--ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
-- cleanup
DEALLOCATE st1;
DEALLOCATE st2;
DEALLOCATE st3;
DEALLOCATE st4;
DEALLOCATE st5;
DEALLOCATE st6;
DEALLOCATE st7;
DEALLOCATE st8;
-- System columns, except ctid and oid, should not be sent to remote
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.tableoid = 'pg_class'::regclass LIMIT 1;
                                  QUERY PLAN
-------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   ->  Foreign Scan on public.ft1 t1
         Output: c1, c2, c3, c4, c5, c6, c7, c8
         Filter: (t1.tableoid = '1259'::oid)
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(6 rows)

SELECT * FROM ft1 t1 WHERE t1.tableoid = 'ft1'::regclass LIMIT 1;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
-----+----+-------+------------------------------+--------------------------+----+------------+-----
 854 |  4 | 00854 | Tue Feb 24 00:00:00 1970 PST | Tue Feb 24 00:00:00 1970 | 4  | 4          | foo
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
                                       QUERY PLAN
-----------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: (tableoid)::regclass, c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" LIMIT 1::bigint
(3 rows)

SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
 tableoid | c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
----------+-----+----+-------+------------------------------+--------------------------+----+------------+-----
 ft1      | 854 |  4 | 00854 | Tue Feb 24 00:00:00 1970 PST | Tue Feb 24 00:00:00 1970 | 4  | 4          | foo
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
                                            QUERY PLAN
--------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote Filter: (t1.ctid = '(0,2)'::tid)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((ctid = '(0,2)'))
(4 rows)

-- YB note: CTID not supported yet, see issue #11419, reenable commented out part below when fixed
SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
ERROR:  System column "ctid" is not supported yet
CONTEXT:  remote SQL command: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((ctid = '(0,2)'))
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ctid, * FROM ft1 t1 LIMIT 1;
                                          QUERY PLAN
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: ctid, c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" LIMIT 1::bigint
(3 rows)

--SELECT ctid, * FROM ft1 t1 LIMIT 1;
-- ===================================================================
-- used in PL/pgSQL function
-- ===================================================================
CREATE OR REPLACE FUNCTION f_test(p_c1 int) RETURNS int AS $$
DECLARE
	v_c1 int;
BEGIN
    SELECT c1 INTO v_c1 FROM ft1 WHERE c1 = p_c1 LIMIT 1;
    PERFORM c1 FROM ft1 WHERE c1 = p_c1 AND p_c1 = v_c1 LIMIT 1;
    RETURN v_c1;
END;
$$ LANGUAGE plpgsql;
SELECT f_test(100);
 f_test
--------
    100
(1 row)

DROP FUNCTION f_test(int);
-- ===================================================================
-- conversion error
-- ===================================================================
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE int;
-- YB note: catalog snapshot invalidated, remove pg_sleeps when issue #11554 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

SELECT * FROM ft1 WHERE c1 = 1;  -- ERROR
ERROR:  invalid input syntax for type integer: "foo"
CONTEXT:  column "c8" of foreign table "ft1"
SELECT  ft1.c1,  ft2.c2, ft1.c8 FROM ft1, ft2 WHERE ft1.c1 = ft2.c1 AND ft1.c1 = 1; -- ERROR
ERROR:  invalid input syntax for type integer: "foo"
CONTEXT:  column "c8" of foreign table "ft1"
SELECT  ft1.c1,  ft2.c2, ft1 FROM ft1, ft2 WHERE ft1.c1 = ft2.c1 AND ft1.c1 = 1; -- ERROR
ERROR:  invalid input syntax for type integer: "foo"
CONTEXT:  whole-row reference to foreign table "ft1"
SELECT sum(c2), array_agg(c8) FROM ft1 GROUP BY c8; -- ERROR
ERROR:  invalid input syntax for type integer: "foo"
CONTEXT:  processing expression at position 2 in select list
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE user_enum;
-- YB note: catalog snapshot invalidated, remove pg_sleeps when issue #11554 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- ===================================================================
-- subtransaction
--  + local/remote error doesn't break cursor
-- ===================================================================
BEGIN;
DECLARE c CURSOR FOR SELECT * FROM ft1 ORDER BY c1;
FETCH c;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
----+----+-------+------------------------------+--------------------------+----+------------+-----
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo
(1 row)

SAVEPOINT s;
ERROR OUT;          -- ERROR
ERROR:  syntax error at or near "ERROR"
LINE 1: ERROR OUT;
        ^
ROLLBACK TO s;
FETCH c;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
----+----+-------+------------------------------+--------------------------+----+------------+-----
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo
(1 row)

SAVEPOINT s;
SELECT * FROM ft1 WHERE 1 / (c1 - 1) > 0;  -- ERROR
ERROR:  division by zero
CONTEXT:  remote SQL command: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (((1 / ("C 1" - 1)) > 0))
ROLLBACK TO s;
FETCH c;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
----+----+-------+------------------------------+--------------------------+----+------------+-----
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo
(1 row)

SELECT * FROM ft1 ORDER BY c1 LIMIT 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
----+----+-------+------------------------------+--------------------------+----+------------+-----
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo
(1 row)

COMMIT;
-- ===================================================================
-- test handling of collations
-- ===================================================================
create table loct3 (f1 text collate "C" unique, f2 text, f3 varchar(10) unique);
create foreign table ft3 (f1 text collate "C", f2 text, f3 varchar(10))
  server loopback options (table_name 'loct3', use_remote_estimate 'true');
-- YB note: foreign table does not exist, remove when #11684 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- can be sent to remote
explain (verbose, costs off) select * from ft3 where f1 = 'foo';
                               QUERY PLAN
------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Remote Filter: (ft3.f1 = 'foo'::text)
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
(4 rows)

explain (verbose, costs off) select * from ft3 where f1 COLLATE "C" = 'foo';
                               QUERY PLAN
------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Remote Filter: (ft3.f1 = 'foo'::text)
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
(4 rows)

explain (verbose, costs off) select * from ft3 where f2 = 'foo';
                               QUERY PLAN
------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Remote Filter: (ft3.f2 = 'foo'::text)
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f2 = 'foo'))
(4 rows)

explain (verbose, costs off) select * from ft3 where f3 = 'foo';
                               QUERY PLAN
------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Remote Filter: ((ft3.f3)::text = 'foo'::text)
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f3 = 'foo'))
(4 rows)

explain (verbose, costs off) select * from ft3 f, loct3 l
  where f.f3 = l.f3 and l.f1 = 'foo';
                                            QUERY PLAN
--------------------------------------------------------------------------------------------------
 Nested Loop
   Output: f.f1, f.f2, f.f3, l.f1, l.f2, l.f3
   ->  Index Scan using loct3_f1_key on public.loct3 l
         Output: l.f1, l.f2, l.f3
         Index Cond: (l.f1 = 'foo'::text)
   ->  Foreign Scan on public.ft3 f
         Output: f.f1, f.f2, f.f3
         Remote Filter: ((l.f3)::text = (f.f3)::text)
         Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE (($1::character varying(10) = f3))
(9 rows)

-- can't be sent to remote
explain (verbose, costs off) select * from ft3 where f1 COLLATE "POSIX" = 'foo';
                    QUERY PLAN
---------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: ((ft3.f1)::text = 'foo'::text)
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 where f1 = 'foo' COLLATE "C";
                    QUERY PLAN
---------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: (ft3.f1 = 'foo'::text COLLATE "C")
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 where f2 COLLATE "C" = 'foo';
                    QUERY PLAN
---------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: ((ft3.f2)::text = 'foo'::text)
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 where f2 = 'foo' COLLATE "C";
                    QUERY PLAN
---------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: (ft3.f2 = 'foo'::text COLLATE "C")
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 f, loct3 l
  where f.f3 = l.f3 COLLATE "POSIX" and l.f1 = 'foo';
                         QUERY PLAN
-------------------------------------------------------------
 Hash Join
   Output: f.f1, f.f2, f.f3, l.f1, l.f2, l.f3
   Inner Unique: true
   Hash Cond: ((f.f3)::text = (l.f3)::text)
   ->  Foreign Scan on public.ft3 f
         Output: f.f1, f.f2, f.f3
         Remote SQL: SELECT f1, f2, f3 FROM public.loct3
   ->  Hash
         Output: l.f1, l.f2, l.f3
         ->  Index Scan using loct3_f1_key on public.loct3 l
               Output: l.f1, l.f2, l.f3
               Index Cond: (l.f1 = 'foo'::text)
(12 rows)

-- ===================================================================
-- test writable foreign table stuff
-- ===================================================================
EXPLAIN (verbose, costs off)
INSERT INTO ft2 (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
                                                                                                                    QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft2
   Remote SQL: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
   Batch Size: 1
   ->  Subquery Scan on "*SELECT*"
         Output: "*SELECT*"."?column?", "*SELECT*"."?column?_1", NULL::integer, "*SELECT*"."?column?_2", NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft2       '::character(10), NULL::user_enum
         ->  Foreign Scan on public.ft2 ft2_1
               Output: (ft2_1.c1 + 1000), (ft2_1.c2 + 100), (ft2_1.c3 || ft2_1.c3)
               Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1" LIMIT 20::bigint
(8 rows)

INSERT INTO ft2 (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
INSERT INTO ft2 (c1,c2,c3)
  VALUES (1101,201,'aaa'), (1102,202,'bbb'), (1103,203,'ccc') RETURNING *;
  c1  | c2  | c3  | c4 | c5 | c6 |     c7     | c8
------+-----+-----+----+----+----+------------+----
 1101 | 201 | aaa |    |    |    | ft2        |
 1102 | 202 | bbb |    |    |    | ft2        |
 1103 | 203 | ccc |    |    |    | ft2        |
(3 rows)

INSERT INTO ft2 (c1,c2,c3) VALUES (1104,204,'ddd'), (1105,205,'eee');
-- YB note: CTID not supported yet, see issue #11419, reenable commented out part below when fixed
--EXPLAIN (verbose, costs off)
--UPDATE ft2 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;              -- can be pushed down
--UPDATE ft2 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;
--EXPLAIN (verbose, costs off)
--UPDATE ft2 SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7 RETURNING *;  -- can be pushed down
--UPDATE ft2 SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7 RETURNING *;
--EXPLAIN (verbose, costs off)
--UPDATE ft2 SET c2 = ft2.c2 + 500, c3 = ft2.c3 || '_update9', c7 = DEFAULT
--  FROM ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 9;                               -- can be pushed down
--UPDATE ft2 SET c2 = ft2.c2 + 500, c3 = ft2.c3 || '_update9', c7 = DEFAULT
--  FROM ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 9;
--EXPLAIN (verbose, costs off)
--  DELETE FROM ft2 WHERE c1 % 10 = 5 RETURNING c1, c4;                               -- can be pushed down
--DELETE FROM ft2 WHERE c1 % 10 = 5 RETURNING c1, c4;
--EXPLAIN (verbose, costs off)
--DELETE FROM ft2 USING ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 2;                -- can be pushed down
--DELETE FROM ft2 USING ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 2;
SELECT c1,c2,c3,c4 FROM ft2 ORDER BY c1;
  c1  | c2  |     c3     |              c4
------+-----+------------+------------------------------
    1 |   1 | 00001      | Fri Jan 02 00:00:00 1970 PST
    2 |   2 | 00002      | Sat Jan 03 00:00:00 1970 PST
    3 |   3 | 00003      | Sun Jan 04 00:00:00 1970 PST
    4 |   4 | 00004      | Mon Jan 05 00:00:00 1970 PST
    5 |   5 | 00005      | Tue Jan 06 00:00:00 1970 PST
    6 |   6 | 00006      | Wed Jan 07 00:00:00 1970 PST
    7 |   7 | 00007      | Thu Jan 08 00:00:00 1970 PST
    8 |   8 | 00008      | Fri Jan 09 00:00:00 1970 PST
    9 |   9 | 00009      | Sat Jan 10 00:00:00 1970 PST
   10 |   0 | 00010      | Sun Jan 11 00:00:00 1970 PST
   11 |   1 | 00011      | Mon Jan 12 00:00:00 1970 PST
   12 |   2 | 00012      | Tue Jan 13 00:00:00 1970 PST
   13 |   3 | 00013      | Wed Jan 14 00:00:00 1970 PST
   14 |   4 | 00014      | Thu Jan 15 00:00:00 1970 PST
   15 |   5 | 00015      | Fri Jan 16 00:00:00 1970 PST
   16 |   6 | 00016      | Sat Jan 17 00:00:00 1970 PST
   17 |   7 | 00017      | Sun Jan 18 00:00:00 1970 PST
   18 |   8 | 00018      | Mon Jan 19 00:00:00 1970 PST
   19 |   9 | 00019      | Tue Jan 20 00:00:00 1970 PST
   20 |   0 | 00020      | Wed Jan 21 00:00:00 1970 PST
   21 |   1 | 00021      | Thu Jan 22 00:00:00 1970 PST
   22 |   2 | 00022      | Fri Jan 23 00:00:00 1970 PST
   23 |   3 | 00023      | Sat Jan 24 00:00:00 1970 PST
   24 |   4 | 00024      | Sun Jan 25 00:00:00 1970 PST
   25 |   5 | 00025      | Mon Jan 26 00:00:00 1970 PST
   26 |   6 | 00026      | Tue Jan 27 00:00:00 1970 PST
   27 |   7 | 00027      | Wed Jan 28 00:00:00 1970 PST
   28 |   8 | 00028      | Thu Jan 29 00:00:00 1970 PST
   29 |   9 | 00029      | Fri Jan 30 00:00:00 1970 PST
   30 |   0 | 00030      | Sat Jan 31 00:00:00 1970 PST
   31 |   1 | 00031      | Sun Feb 01 00:00:00 1970 PST
   32 |   2 | 00032      | Mon Feb 02 00:00:00 1970 PST
   33 |   3 | 00033      | Tue Feb 03 00:00:00 1970 PST
   34 |   4 | 00034      | Wed Feb 04 00:00:00 1970 PST
   35 |   5 | 00035      | Thu Feb 05 00:00:00 1970 PST
   36 |   6 | 00036      | Fri Feb 06 00:00:00 1970 PST
   37 |   7 | 00037      | Sat Feb 07 00:00:00 1970 PST
   38 |   8 | 00038      | Sun Feb 08 00:00:00 1970 PST
   39 |   9 | 00039      | Mon Feb 09 00:00:00 1970 PST
   40 |   0 | 00040      | Tue Feb 10 00:00:00 1970 PST
   41 |   1 | 00041      | Wed Feb 11 00:00:00 1970 PST
   42 |   2 | 00042      | Thu Feb 12 00:00:00 1970 PST
   43 |   3 | 00043      | Fri Feb 13 00:00:00 1970 PST
   44 |   4 | 00044      | Sat Feb 14 00:00:00 1970 PST
   45 |   5 | 00045      | Sun Feb 15 00:00:00 1970 PST
   46 |   6 | 00046      | Mon Feb 16 00:00:00 1970 PST
   47 |   7 | 00047      | Tue Feb 17 00:00:00 1970 PST
   48 |   8 | 00048      | Wed Feb 18 00:00:00 1970 PST
   49 |   9 | 00049      | Thu Feb 19 00:00:00 1970 PST
   50 |   0 | 00050      | Fri Feb 20 00:00:00 1970 PST
   51 |   1 | 00051      | Sat Feb 21 00:00:00 1970 PST
   52 |   2 | 00052      | Sun Feb 22 00:00:00 1970 PST
   53 |   3 | 00053      | Mon Feb 23 00:00:00 1970 PST
   54 |   4 | 00054      | Tue Feb 24 00:00:00 1970 PST
   55 |   5 | 00055      | Wed Feb 25 00:00:00 1970 PST
   56 |   6 | 00056      | Thu Feb 26 00:00:00 1970 PST
   57 |   7 | 00057      | Fri Feb 27 00:00:00 1970 PST
   58 |   8 | 00058      | Sat Feb 28 00:00:00 1970 PST
   59 |   9 | 00059      | Sun Mar 01 00:00:00 1970 PST
   60 |   0 | 00060      | Mon Mar 02 00:00:00 1970 PST
   61 |   1 | 00061      | Tue Mar 03 00:00:00 1970 PST
   62 |   2 | 00062      | Wed Mar 04 00:00:00 1970 PST
   63 |   3 | 00063      | Thu Mar 05 00:00:00 1970 PST
   64 |   4 | 00064      | Fri Mar 06 00:00:00 1970 PST
   65 |   5 | 00065      | Sat Mar 07 00:00:00 1970 PST
   66 |   6 | 00066      | Sun Mar 08 00:00:00 1970 PST
   67 |   7 | 00067      | Mon Mar 09 00:00:00 1970 PST
   68 |   8 | 00068      | Tue Mar 10 00:00:00 1970 PST
   69 |   9 | 00069      | Wed Mar 11 00:00:00 1970 PST
   70 |   0 | 00070      | Thu Mar 12 00:00:00 1970 PST
   71 |   1 | 00071      | Fri Mar 13 00:00:00 1970 PST
   72 |   2 | 00072      | Sat Mar 14 00:00:00 1970 PST
   73 |   3 | 00073      | Sun Mar 15 00:00:00 1970 PST
   74 |   4 | 00074      | Mon Mar 16 00:00:00 1970 PST
   75 |   5 | 00075      | Tue Mar 17 00:00:00 1970 PST
   76 |   6 | 00076      | Wed Mar 18 00:00:00 1970 PST
   77 |   7 | 00077      | Thu Mar 19 00:00:00 1970 PST
   78 |   8 | 00078      | Fri Mar 20 00:00:00 1970 PST
   79 |   9 | 00079      | Sat Mar 21 00:00:00 1970 PST
   80 |   0 | 00080      | Sun Mar 22 00:00:00 1970 PST
   81 |   1 | 00081      | Mon Mar 23 00:00:00 1970 PST
   82 |   2 | 00082      | Tue Mar 24 00:00:00 1970 PST
   83 |   3 | 00083      | Wed Mar 25 00:00:00 1970 PST
   84 |   4 | 00084      | Thu Mar 26 00:00:00 1970 PST
   85 |   5 | 00085      | Fri Mar 27 00:00:00 1970 PST
   86 |   6 | 00086      | Sat Mar 28 00:00:00 1970 PST
   87 |   7 | 00087      | Sun Mar 29 00:00:00 1970 PST
   88 |   8 | 00088      | Mon Mar 30 00:00:00 1970 PST
   89 |   9 | 00089      | Tue Mar 31 00:00:00 1970 PST
   90 |   0 | 00090      | Wed Apr 01 00:00:00 1970 PST
   91 |   1 | 00091      | Thu Apr 02 00:00:00 1970 PST
   92 |   2 | 00092      | Fri Apr 03 00:00:00 1970 PST
   93 |   3 | 00093      | Sat Apr 04 00:00:00 1970 PST
   94 |   4 | 00094      | Sun Apr 05 00:00:00 1970 PST
   95 |   5 | 00095      | Mon Apr 06 00:00:00 1970 PST
   96 |   6 | 00096      | Tue Apr 07 00:00:00 1970 PST
   97 |   7 | 00097      | Wed Apr 08 00:00:00 1970 PST
   98 |   8 | 00098      | Thu Apr 09 00:00:00 1970 PST
   99 |   9 | 00099      | Fri Apr 10 00:00:00 1970 PST
  100 |   0 | 00100      | Thu Jan 01 00:00:00 1970 PST
  101 |   1 | 00101      | Fri Jan 02 00:00:00 1970 PST
  102 |   2 | 00102      | Sat Jan 03 00:00:00 1970 PST
  103 |   3 | 00103      | Sun Jan 04 00:00:00 1970 PST
  104 |   4 | 00104      | Mon Jan 05 00:00:00 1970 PST
  105 |   5 | 00105      | Tue Jan 06 00:00:00 1970 PST
  106 |   6 | 00106      | Wed Jan 07 00:00:00 1970 PST
  107 |   7 | 00107      | Thu Jan 08 00:00:00 1970 PST
  108 |   8 | 00108      | Fri Jan 09 00:00:00 1970 PST
  109 |   9 | 00109      | Sat Jan 10 00:00:00 1970 PST
  110 |   0 | 00110      | Sun Jan 11 00:00:00 1970 PST
  111 |   1 | 00111      | Mon Jan 12 00:00:00 1970 PST
  112 |   2 | 00112      | Tue Jan 13 00:00:00 1970 PST
  113 |   3 | 00113      | Wed Jan 14 00:00:00 1970 PST
  114 |   4 | 00114      | Thu Jan 15 00:00:00 1970 PST
  115 |   5 | 00115      | Fri Jan 16 00:00:00 1970 PST
  116 |   6 | 00116      | Sat Jan 17 00:00:00 1970 PST
  117 |   7 | 00117      | Sun Jan 18 00:00:00 1970 PST
  118 |   8 | 00118      | Mon Jan 19 00:00:00 1970 PST
  119 |   9 | 00119      | Tue Jan 20 00:00:00 1970 PST
  120 |   0 | 00120      | Wed Jan 21 00:00:00 1970 PST
  121 |   1 | 00121      | Thu Jan 22 00:00:00 1970 PST
  122 |   2 | 00122      | Fri Jan 23 00:00:00 1970 PST
  123 |   3 | 00123      | Sat Jan 24 00:00:00 1970 PST
  124 |   4 | 00124      | Sun Jan 25 00:00:00 1970 PST
  125 |   5 | 00125      | Mon Jan 26 00:00:00 1970 PST
  126 |   6 | 00126      | Tue Jan 27 00:00:00 1970 PST
  127 |   7 | 00127      | Wed Jan 28 00:00:00 1970 PST
  128 |   8 | 00128      | Thu Jan 29 00:00:00 1970 PST
  129 |   9 | 00129      | Fri Jan 30 00:00:00 1970 PST
  130 |   0 | 00130      | Sat Jan 31 00:00:00 1970 PST
  131 |   1 | 00131      | Sun Feb 01 00:00:00 1970 PST
  132 |   2 | 00132      | Mon Feb 02 00:00:00 1970 PST
  133 |   3 | 00133      | Tue Feb 03 00:00:00 1970 PST
  134 |   4 | 00134      | Wed Feb 04 00:00:00 1970 PST
  135 |   5 | 00135      | Thu Feb 05 00:00:00 1970 PST
  136 |   6 | 00136      | Fri Feb 06 00:00:00 1970 PST
  137 |   7 | 00137      | Sat Feb 07 00:00:00 1970 PST
  138 |   8 | 00138      | Sun Feb 08 00:00:00 1970 PST
  139 |   9 | 00139      | Mon Feb 09 00:00:00 1970 PST
  140 |   0 | 00140      | Tue Feb 10 00:00:00 1970 PST
  141 |   1 | 00141      | Wed Feb 11 00:00:00 1970 PST
  142 |   2 | 00142      | Thu Feb 12 00:00:00 1970 PST
  143 |   3 | 00143      | Fri Feb 13 00:00:00 1970 PST
  144 |   4 | 00144      | Sat Feb 14 00:00:00 1970 PST
  145 |   5 | 00145      | Sun Feb 15 00:00:00 1970 PST
  146 |   6 | 00146      | Mon Feb 16 00:00:00 1970 PST
  147 |   7 | 00147      | Tue Feb 17 00:00:00 1970 PST
  148 |   8 | 00148      | Wed Feb 18 00:00:00 1970 PST
  149 |   9 | 00149      | Thu Feb 19 00:00:00 1970 PST
  150 |   0 | 00150      | Fri Feb 20 00:00:00 1970 PST
  151 |   1 | 00151      | Sat Feb 21 00:00:00 1970 PST
  152 |   2 | 00152      | Sun Feb 22 00:00:00 1970 PST
  153 |   3 | 00153      | Mon Feb 23 00:00:00 1970 PST
  154 |   4 | 00154      | Tue Feb 24 00:00:00 1970 PST
  155 |   5 | 00155      | Wed Feb 25 00:00:00 1970 PST
  156 |   6 | 00156      | Thu Feb 26 00:00:00 1970 PST
  157 |   7 | 00157      | Fri Feb 27 00:00:00 1970 PST
  158 |   8 | 00158      | Sat Feb 28 00:00:00 1970 PST
  159 |   9 | 00159      | Sun Mar 01 00:00:00 1970 PST
  160 |   0 | 00160      | Mon Mar 02 00:00:00 1970 PST
  161 |   1 | 00161      | Tue Mar 03 00:00:00 1970 PST
  162 |   2 | 00162      | Wed Mar 04 00:00:00 1970 PST
  163 |   3 | 00163      | Thu Mar 05 00:00:00 1970 PST
  164 |   4 | 00164      | Fri Mar 06 00:00:00 1970 PST
  165 |   5 | 00165      | Sat Mar 07 00:00:00 1970 PST
  166 |   6 | 00166      | Sun Mar 08 00:00:00 1970 PST
  167 |   7 | 00167      | Mon Mar 09 00:00:00 1970 PST
  168 |   8 | 00168      | Tue Mar 10 00:00:00 1970 PST
  169 |   9 | 00169      | Wed Mar 11 00:00:00 1970 PST
  170 |   0 | 00170      | Thu Mar 12 00:00:00 1970 PST
  171 |   1 | 00171      | Fri Mar 13 00:00:00 1970 PST
  172 |   2 | 00172      | Sat Mar 14 00:00:00 1970 PST
  173 |   3 | 00173      | Sun Mar 15 00:00:00 1970 PST
  174 |   4 | 00174      | Mon Mar 16 00:00:00 1970 PST
  175 |   5 | 00175      | Tue Mar 17 00:00:00 1970 PST
  176 |   6 | 00176      | Wed Mar 18 00:00:00 1970 PST
  177 |   7 | 00177      | Thu Mar 19 00:00:00 1970 PST
  178 |   8 | 00178      | Fri Mar 20 00:00:00 1970 PST
  179 |   9 | 00179      | Sat Mar 21 00:00:00 1970 PST
  180 |   0 | 00180      | Sun Mar 22 00:00:00 1970 PST
  181 |   1 | 00181      | Mon Mar 23 00:00:00 1970 PST
  182 |   2 | 00182      | Tue Mar 24 00:00:00 1970 PST
  183 |   3 | 00183      | Wed Mar 25 00:00:00 1970 PST
  184 |   4 | 00184      | Thu Mar 26 00:00:00 1970 PST
  185 |   5 | 00185      | Fri Mar 27 00:00:00 1970 PST
  186 |   6 | 00186      | Sat Mar 28 00:00:00 1970 PST
  187 |   7 | 00187      | Sun Mar 29 00:00:00 1970 PST
  188 |   8 | 00188      | Mon Mar 30 00:00:00 1970 PST
  189 |   9 | 00189      | Tue Mar 31 00:00:00 1970 PST
  190 |   0 | 00190      | Wed Apr 01 00:00:00 1970 PST
  191 |   1 | 00191      | Thu Apr 02 00:00:00 1970 PST
  192 |   2 | 00192      | Fri Apr 03 00:00:00 1970 PST
  193 |   3 | 00193      | Sat Apr 04 00:00:00 1970 PST
  194 |   4 | 00194      | Sun Apr 05 00:00:00 1970 PST
  195 |   5 | 00195      | Mon Apr 06 00:00:00 1970 PST
  196 |   6 | 00196      | Tue Apr 07 00:00:00 1970 PST
  197 |   7 | 00197      | Wed Apr 08 00:00:00 1970 PST
  198 |   8 | 00198      | Thu Apr 09 00:00:00 1970 PST
  199 |   9 | 00199      | Fri Apr 10 00:00:00 1970 PST
  200 |   0 | 00200      | Thu Jan 01 00:00:00 1970 PST
  201 |   1 | 00201      | Fri Jan 02 00:00:00 1970 PST
  202 |   2 | 00202      | Sat Jan 03 00:00:00 1970 PST
  203 |   3 | 00203      | Sun Jan 04 00:00:00 1970 PST
  204 |   4 | 00204      | Mon Jan 05 00:00:00 1970 PST
  205 |   5 | 00205      | Tue Jan 06 00:00:00 1970 PST
  206 |   6 | 00206      | Wed Jan 07 00:00:00 1970 PST
  207 |   7 | 00207      | Thu Jan 08 00:00:00 1970 PST
  208 |   8 | 00208      | Fri Jan 09 00:00:00 1970 PST
  209 |   9 | 00209      | Sat Jan 10 00:00:00 1970 PST
  210 |   0 | 00210      | Sun Jan 11 00:00:00 1970 PST
  211 |   1 | 00211      | Mon Jan 12 00:00:00 1970 PST
  212 |   2 | 00212      | Tue Jan 13 00:00:00 1970 PST
  213 |   3 | 00213      | Wed Jan 14 00:00:00 1970 PST
  214 |   4 | 00214      | Thu Jan 15 00:00:00 1970 PST
  215 |   5 | 00215      | Fri Jan 16 00:00:00 1970 PST
  216 |   6 | 00216      | Sat Jan 17 00:00:00 1970 PST
  217 |   7 | 00217      | Sun Jan 18 00:00:00 1970 PST
  218 |   8 | 00218      | Mon Jan 19 00:00:00 1970 PST
  219 |   9 | 00219      | Tue Jan 20 00:00:00 1970 PST
  220 |   0 | 00220      | Wed Jan 21 00:00:00 1970 PST
  221 |   1 | 00221      | Thu Jan 22 00:00:00 1970 PST
  222 |   2 | 00222      | Fri Jan 23 00:00:00 1970 PST
  223 |   3 | 00223      | Sat Jan 24 00:00:00 1970 PST
  224 |   4 | 00224      | Sun Jan 25 00:00:00 1970 PST
  225 |   5 | 00225      | Mon Jan 26 00:00:00 1970 PST
  226 |   6 | 00226      | Tue Jan 27 00:00:00 1970 PST
  227 |   7 | 00227      | Wed Jan 28 00:00:00 1970 PST
  228 |   8 | 00228      | Thu Jan 29 00:00:00 1970 PST
  229 |   9 | 00229      | Fri Jan 30 00:00:00 1970 PST
  230 |   0 | 00230      | Sat Jan 31 00:00:00 1970 PST
  231 |   1 | 00231      | Sun Feb 01 00:00:00 1970 PST
  232 |   2 | 00232      | Mon Feb 02 00:00:00 1970 PST
  233 |   3 | 00233      | Tue Feb 03 00:00:00 1970 PST
  234 |   4 | 00234      | Wed Feb 04 00:00:00 1970 PST
  235 |   5 | 00235      | Thu Feb 05 00:00:00 1970 PST
  236 |   6 | 00236      | Fri Feb 06 00:00:00 1970 PST
  237 |   7 | 00237      | Sat Feb 07 00:00:00 1970 PST
  238 |   8 | 00238      | Sun Feb 08 00:00:00 1970 PST
  239 |   9 | 00239      | Mon Feb 09 00:00:00 1970 PST
  240 |   0 | 00240      | Tue Feb 10 00:00:00 1970 PST
  241 |   1 | 00241      | Wed Feb 11 00:00:00 1970 PST
  242 |   2 | 00242      | Thu Feb 12 00:00:00 1970 PST
  243 |   3 | 00243      | Fri Feb 13 00:00:00 1970 PST
  244 |   4 | 00244      | Sat Feb 14 00:00:00 1970 PST
  245 |   5 | 00245      | Sun Feb 15 00:00:00 1970 PST
  246 |   6 | 00246      | Mon Feb 16 00:00:00 1970 PST
  247 |   7 | 00247      | Tue Feb 17 00:00:00 1970 PST
  248 |   8 | 00248      | Wed Feb 18 00:00:00 1970 PST
  249 |   9 | 00249      | Thu Feb 19 00:00:00 1970 PST
  250 |   0 | 00250      | Fri Feb 20 00:00:00 1970 PST
  251 |   1 | 00251      | Sat Feb 21 00:00:00 1970 PST
  252 |   2 | 00252      | Sun Feb 22 00:00:00 1970 PST
  253 |   3 | 00253      | Mon Feb 23 00:00:00 1970 PST
  254 |   4 | 00254      | Tue Feb 24 00:00:00 1970 PST
  255 |   5 | 00255      | Wed Feb 25 00:00:00 1970 PST
  256 |   6 | 00256      | Thu Feb 26 00:00:00 1970 PST
  257 |   7 | 00257      | Fri Feb 27 00:00:00 1970 PST
  258 |   8 | 00258      | Sat Feb 28 00:00:00 1970 PST
  259 |   9 | 00259      | Sun Mar 01 00:00:00 1970 PST
  260 |   0 | 00260      | Mon Mar 02 00:00:00 1970 PST
  261 |   1 | 00261      | Tue Mar 03 00:00:00 1970 PST
  262 |   2 | 00262      | Wed Mar 04 00:00:00 1970 PST
  263 |   3 | 00263      | Thu Mar 05 00:00:00 1970 PST
  264 |   4 | 00264      | Fri Mar 06 00:00:00 1970 PST
  265 |   5 | 00265      | Sat Mar 07 00:00:00 1970 PST
  266 |   6 | 00266      | Sun Mar 08 00:00:00 1970 PST
  267 |   7 | 00267      | Mon Mar 09 00:00:00 1970 PST
  268 |   8 | 00268      | Tue Mar 10 00:00:00 1970 PST
  269 |   9 | 00269      | Wed Mar 11 00:00:00 1970 PST
  270 |   0 | 00270      | Thu Mar 12 00:00:00 1970 PST
  271 |   1 | 00271      | Fri Mar 13 00:00:00 1970 PST
  272 |   2 | 00272      | Sat Mar 14 00:00:00 1970 PST
  273 |   3 | 00273      | Sun Mar 15 00:00:00 1970 PST
  274 |   4 | 00274      | Mon Mar 16 00:00:00 1970 PST
  275 |   5 | 00275      | Tue Mar 17 00:00:00 1970 PST
  276 |   6 | 00276      | Wed Mar 18 00:00:00 1970 PST
  277 |   7 | 00277      | Thu Mar 19 00:00:00 1970 PST
  278 |   8 | 00278      | Fri Mar 20 00:00:00 1970 PST
  279 |   9 | 00279      | Sat Mar 21 00:00:00 1970 PST
  280 |   0 | 00280      | Sun Mar 22 00:00:00 1970 PST
  281 |   1 | 00281      | Mon Mar 23 00:00:00 1970 PST
  282 |   2 | 00282      | Tue Mar 24 00:00:00 1970 PST
  283 |   3 | 00283      | Wed Mar 25 00:00:00 1970 PST
  284 |   4 | 00284      | Thu Mar 26 00:00:00 1970 PST
  285 |   5 | 00285      | Fri Mar 27 00:00:00 1970 PST
  286 |   6 | 00286      | Sat Mar 28 00:00:00 1970 PST
  287 |   7 | 00287      | Sun Mar 29 00:00:00 1970 PST
  288 |   8 | 00288      | Mon Mar 30 00:00:00 1970 PST
  289 |   9 | 00289      | Tue Mar 31 00:00:00 1970 PST
  290 |   0 | 00290      | Wed Apr 01 00:00:00 1970 PST
  291 |   1 | 00291      | Thu Apr 02 00:00:00 1970 PST
  292 |   2 | 00292      | Fri Apr 03 00:00:00 1970 PST
  293 |   3 | 00293      | Sat Apr 04 00:00:00 1970 PST
  294 |   4 | 00294      | Sun Apr 05 00:00:00 1970 PST
  295 |   5 | 00295      | Mon Apr 06 00:00:00 1970 PST
  296 |   6 | 00296      | Tue Apr 07 00:00:00 1970 PST
  297 |   7 | 00297      | Wed Apr 08 00:00:00 1970 PST
  298 |   8 | 00298      | Thu Apr 09 00:00:00 1970 PST
  299 |   9 | 00299      | Fri Apr 10 00:00:00 1970 PST
  300 |   0 | 00300      | Thu Jan 01 00:00:00 1970 PST
  301 |   1 | 00301      | Fri Jan 02 00:00:00 1970 PST
  302 |   2 | 00302      | Sat Jan 03 00:00:00 1970 PST
  303 |   3 | 00303      | Sun Jan 04 00:00:00 1970 PST
  304 |   4 | 00304      | Mon Jan 05 00:00:00 1970 PST
  305 |   5 | 00305      | Tue Jan 06 00:00:00 1970 PST
  306 |   6 | 00306      | Wed Jan 07 00:00:00 1970 PST
  307 |   7 | 00307      | Thu Jan 08 00:00:00 1970 PST
  308 |   8 | 00308      | Fri Jan 09 00:00:00 1970 PST
  309 |   9 | 00309      | Sat Jan 10 00:00:00 1970 PST
  310 |   0 | 00310      | Sun Jan 11 00:00:00 1970 PST
  311 |   1 | 00311      | Mon Jan 12 00:00:00 1970 PST
  312 |   2 | 00312      | Tue Jan 13 00:00:00 1970 PST
  313 |   3 | 00313      | Wed Jan 14 00:00:00 1970 PST
  314 |   4 | 00314      | Thu Jan 15 00:00:00 1970 PST
  315 |   5 | 00315      | Fri Jan 16 00:00:00 1970 PST
  316 |   6 | 00316      | Sat Jan 17 00:00:00 1970 PST
  317 |   7 | 00317      | Sun Jan 18 00:00:00 1970 PST
  318 |   8 | 00318      | Mon Jan 19 00:00:00 1970 PST
  319 |   9 | 00319      | Tue Jan 20 00:00:00 1970 PST
  320 |   0 | 00320      | Wed Jan 21 00:00:00 1970 PST
  321 |   1 | 00321      | Thu Jan 22 00:00:00 1970 PST
  322 |   2 | 00322      | Fri Jan 23 00:00:00 1970 PST
  323 |   3 | 00323      | Sat Jan 24 00:00:00 1970 PST
  324 |   4 | 00324      | Sun Jan 25 00:00:00 1970 PST
  325 |   5 | 00325      | Mon Jan 26 00:00:00 1970 PST
  326 |   6 | 00326      | Tue Jan 27 00:00:00 1970 PST
  327 |   7 | 00327      | Wed Jan 28 00:00:00 1970 PST
  328 |   8 | 00328      | Thu Jan 29 00:00:00 1970 PST
  329 |   9 | 00329      | Fri Jan 30 00:00:00 1970 PST
  330 |   0 | 00330      | Sat Jan 31 00:00:00 1970 PST
  331 |   1 | 00331      | Sun Feb 01 00:00:00 1970 PST
  332 |   2 | 00332      | Mon Feb 02 00:00:00 1970 PST
  333 |   3 | 00333      | Tue Feb 03 00:00:00 1970 PST
  334 |   4 | 00334      | Wed Feb 04 00:00:00 1970 PST
  335 |   5 | 00335      | Thu Feb 05 00:00:00 1970 PST
  336 |   6 | 00336      | Fri Feb 06 00:00:00 1970 PST
  337 |   7 | 00337      | Sat Feb 07 00:00:00 1970 PST
  338 |   8 | 00338      | Sun Feb 08 00:00:00 1970 PST
  339 |   9 | 00339      | Mon Feb 09 00:00:00 1970 PST
  340 |   0 | 00340      | Tue Feb 10 00:00:00 1970 PST
  341 |   1 | 00341      | Wed Feb 11 00:00:00 1970 PST
  342 |   2 | 00342      | Thu Feb 12 00:00:00 1970 PST
  343 |   3 | 00343      | Fri Feb 13 00:00:00 1970 PST
  344 |   4 | 00344      | Sat Feb 14 00:00:00 1970 PST
  345 |   5 | 00345      | Sun Feb 15 00:00:00 1970 PST
  346 |   6 | 00346      | Mon Feb 16 00:00:00 1970 PST
  347 |   7 | 00347      | Tue Feb 17 00:00:00 1970 PST
  348 |   8 | 00348      | Wed Feb 18 00:00:00 1970 PST
  349 |   9 | 00349      | Thu Feb 19 00:00:00 1970 PST
  350 |   0 | 00350      | Fri Feb 20 00:00:00 1970 PST
  351 |   1 | 00351      | Sat Feb 21 00:00:00 1970 PST
  352 |   2 | 00352      | Sun Feb 22 00:00:00 1970 PST
  353 |   3 | 00353      | Mon Feb 23 00:00:00 1970 PST
  354 |   4 | 00354      | Tue Feb 24 00:00:00 1970 PST
  355 |   5 | 00355      | Wed Feb 25 00:00:00 1970 PST
  356 |   6 | 00356      | Thu Feb 26 00:00:00 1970 PST
  357 |   7 | 00357      | Fri Feb 27 00:00:00 1970 PST
  358 |   8 | 00358      | Sat Feb 28 00:00:00 1970 PST
  359 |   9 | 00359      | Sun Mar 01 00:00:00 1970 PST
  360 |   0 | 00360      | Mon Mar 02 00:00:00 1970 PST
  361 |   1 | 00361      | Tue Mar 03 00:00:00 1970 PST
  362 |   2 | 00362      | Wed Mar 04 00:00:00 1970 PST
  363 |   3 | 00363      | Thu Mar 05 00:00:00 1970 PST
  364 |   4 | 00364      | Fri Mar 06 00:00:00 1970 PST
  365 |   5 | 00365      | Sat Mar 07 00:00:00 1970 PST
  366 |   6 | 00366      | Sun Mar 08 00:00:00 1970 PST
  367 |   7 | 00367      | Mon Mar 09 00:00:00 1970 PST
  368 |   8 | 00368      | Tue Mar 10 00:00:00 1970 PST
  369 |   9 | 00369      | Wed Mar 11 00:00:00 1970 PST
  370 |   0 | 00370      | Thu Mar 12 00:00:00 1970 PST
  371 |   1 | 00371      | Fri Mar 13 00:00:00 1970 PST
  372 |   2 | 00372      | Sat Mar 14 00:00:00 1970 PST
  373 |   3 | 00373      | Sun Mar 15 00:00:00 1970 PST
  374 |   4 | 00374      | Mon Mar 16 00:00:00 1970 PST
  375 |   5 | 00375      | Tue Mar 17 00:00:00 1970 PST
  376 |   6 | 00376      | Wed Mar 18 00:00:00 1970 PST
  377 |   7 | 00377      | Thu Mar 19 00:00:00 1970 PST
  378 |   8 | 00378      | Fri Mar 20 00:00:00 1970 PST
  379 |   9 | 00379      | Sat Mar 21 00:00:00 1970 PST
  380 |   0 | 00380      | Sun Mar 22 00:00:00 1970 PST
  381 |   1 | 00381      | Mon Mar 23 00:00:00 1970 PST
  382 |   2 | 00382      | Tue Mar 24 00:00:00 1970 PST
  383 |   3 | 00383      | Wed Mar 25 00:00:00 1970 PST
  384 |   4 | 00384      | Thu Mar 26 00:00:00 1970 PST
  385 |   5 | 00385      | Fri Mar 27 00:00:00 1970 PST
  386 |   6 | 00386      | Sat Mar 28 00:00:00 1970 PST
  387 |   7 | 00387      | Sun Mar 29 00:00:00 1970 PST
  388 |   8 | 00388      | Mon Mar 30 00:00:00 1970 PST
  389 |   9 | 00389      | Tue Mar 31 00:00:00 1970 PST
  390 |   0 | 00390      | Wed Apr 01 00:00:00 1970 PST
  391 |   1 | 00391      | Thu Apr 02 00:00:00 1970 PST
  392 |   2 | 00392      | Fri Apr 03 00:00:00 1970 PST
  393 |   3 | 00393      | Sat Apr 04 00:00:00 1970 PST
  394 |   4 | 00394      | Sun Apr 05 00:00:00 1970 PST
  395 |   5 | 00395      | Mon Apr 06 00:00:00 1970 PST
  396 |   6 | 00396      | Tue Apr 07 00:00:00 1970 PST
  397 |   7 | 00397      | Wed Apr 08 00:00:00 1970 PST
  398 |   8 | 00398      | Thu Apr 09 00:00:00 1970 PST
  399 |   9 | 00399      | Fri Apr 10 00:00:00 1970 PST
  400 |   0 | 00400      | Thu Jan 01 00:00:00 1970 PST
  401 |   1 | 00401      | Fri Jan 02 00:00:00 1970 PST
  402 |   2 | 00402      | Sat Jan 03 00:00:00 1970 PST
  403 |   3 | 00403      | Sun Jan 04 00:00:00 1970 PST
  404 |   4 | 00404      | Mon Jan 05 00:00:00 1970 PST
  405 |   5 | 00405      | Tue Jan 06 00:00:00 1970 PST
  406 |   6 | 00406      | Wed Jan 07 00:00:00 1970 PST
  407 |   7 | 00407      | Thu Jan 08 00:00:00 1970 PST
  408 |   8 | 00408      | Fri Jan 09 00:00:00 1970 PST
  409 |   9 | 00409      | Sat Jan 10 00:00:00 1970 PST
  410 |   0 | 00410      | Sun Jan 11 00:00:00 1970 PST
  411 |   1 | 00411      | Mon Jan 12 00:00:00 1970 PST
  412 |   2 | 00412      | Tue Jan 13 00:00:00 1970 PST
  413 |   3 | 00413      | Wed Jan 14 00:00:00 1970 PST
  414 |   4 | 00414      | Thu Jan 15 00:00:00 1970 PST
  415 |   5 | 00415      | Fri Jan 16 00:00:00 1970 PST
  416 |   6 | 00416      | Sat Jan 17 00:00:00 1970 PST
  417 |   7 | 00417      | Sun Jan 18 00:00:00 1970 PST
  418 |   8 | 00418      | Mon Jan 19 00:00:00 1970 PST
  419 |   9 | 00419      | Tue Jan 20 00:00:00 1970 PST
  420 |   0 | 00420      | Wed Jan 21 00:00:00 1970 PST
  421 |   1 | 00421      | Thu Jan 22 00:00:00 1970 PST
  422 |   2 | 00422      | Fri Jan 23 00:00:00 1970 PST
  423 |   3 | 00423      | Sat Jan 24 00:00:00 1970 PST
  424 |   4 | 00424      | Sun Jan 25 00:00:00 1970 PST
  425 |   5 | 00425      | Mon Jan 26 00:00:00 1970 PST
  426 |   6 | 00426      | Tue Jan 27 00:00:00 1970 PST
  427 |   7 | 00427      | Wed Jan 28 00:00:00 1970 PST
  428 |   8 | 00428      | Thu Jan 29 00:00:00 1970 PST
  429 |   9 | 00429      | Fri Jan 30 00:00:00 1970 PST
  430 |   0 | 00430      | Sat Jan 31 00:00:00 1970 PST
  431 |   1 | 00431      | Sun Feb 01 00:00:00 1970 PST
  432 |   2 | 00432      | Mon Feb 02 00:00:00 1970 PST
  433 |   3 | 00433      | Tue Feb 03 00:00:00 1970 PST
  434 |   4 | 00434      | Wed Feb 04 00:00:00 1970 PST
  435 |   5 | 00435      | Thu Feb 05 00:00:00 1970 PST
  436 |   6 | 00436      | Fri Feb 06 00:00:00 1970 PST
  437 |   7 | 00437      | Sat Feb 07 00:00:00 1970 PST
  438 |   8 | 00438      | Sun Feb 08 00:00:00 1970 PST
  439 |   9 | 00439      | Mon Feb 09 00:00:00 1970 PST
  440 |   0 | 00440      | Tue Feb 10 00:00:00 1970 PST
  441 |   1 | 00441      | Wed Feb 11 00:00:00 1970 PST
  442 |   2 | 00442      | Thu Feb 12 00:00:00 1970 PST
  443 |   3 | 00443      | Fri Feb 13 00:00:00 1970 PST
  444 |   4 | 00444      | Sat Feb 14 00:00:00 1970 PST
  445 |   5 | 00445      | Sun Feb 15 00:00:00 1970 PST
  446 |   6 | 00446      | Mon Feb 16 00:00:00 1970 PST
  447 |   7 | 00447      | Tue Feb 17 00:00:00 1970 PST
  448 |   8 | 00448      | Wed Feb 18 00:00:00 1970 PST
  449 |   9 | 00449      | Thu Feb 19 00:00:00 1970 PST
  450 |   0 | 00450      | Fri Feb 20 00:00:00 1970 PST
  451 |   1 | 00451      | Sat Feb 21 00:00:00 1970 PST
  452 |   2 | 00452      | Sun Feb 22 00:00:00 1970 PST
  453 |   3 | 00453      | Mon Feb 23 00:00:00 1970 PST
  454 |   4 | 00454      | Tue Feb 24 00:00:00 1970 PST
  455 |   5 | 00455      | Wed Feb 25 00:00:00 1970 PST
  456 |   6 | 00456      | Thu Feb 26 00:00:00 1970 PST
  457 |   7 | 00457      | Fri Feb 27 00:00:00 1970 PST
  458 |   8 | 00458      | Sat Feb 28 00:00:00 1970 PST
  459 |   9 | 00459      | Sun Mar 01 00:00:00 1970 PST
  460 |   0 | 00460      | Mon Mar 02 00:00:00 1970 PST
  461 |   1 | 00461      | Tue Mar 03 00:00:00 1970 PST
  462 |   2 | 00462      | Wed Mar 04 00:00:00 1970 PST
  463 |   3 | 00463      | Thu Mar 05 00:00:00 1970 PST
  464 |   4 | 00464      | Fri Mar 06 00:00:00 1970 PST
  465 |   5 | 00465      | Sat Mar 07 00:00:00 1970 PST
  466 |   6 | 00466      | Sun Mar 08 00:00:00 1970 PST
  467 |   7 | 00467      | Mon Mar 09 00:00:00 1970 PST
  468 |   8 | 00468      | Tue Mar 10 00:00:00 1970 PST
  469 |   9 | 00469      | Wed Mar 11 00:00:00 1970 PST
  470 |   0 | 00470      | Thu Mar 12 00:00:00 1970 PST
  471 |   1 | 00471      | Fri Mar 13 00:00:00 1970 PST
  472 |   2 | 00472      | Sat Mar 14 00:00:00 1970 PST
  473 |   3 | 00473      | Sun Mar 15 00:00:00 1970 PST
  474 |   4 | 00474      | Mon Mar 16 00:00:00 1970 PST
  475 |   5 | 00475      | Tue Mar 17 00:00:00 1970 PST
  476 |   6 | 00476      | Wed Mar 18 00:00:00 1970 PST
  477 |   7 | 00477      | Thu Mar 19 00:00:00 1970 PST
  478 |   8 | 00478      | Fri Mar 20 00:00:00 1970 PST
  479 |   9 | 00479      | Sat Mar 21 00:00:00 1970 PST
  480 |   0 | 00480      | Sun Mar 22 00:00:00 1970 PST
  481 |   1 | 00481      | Mon Mar 23 00:00:00 1970 PST
  482 |   2 | 00482      | Tue Mar 24 00:00:00 1970 PST
  483 |   3 | 00483      | Wed Mar 25 00:00:00 1970 PST
  484 |   4 | 00484      | Thu Mar 26 00:00:00 1970 PST
  485 |   5 | 00485      | Fri Mar 27 00:00:00 1970 PST
  486 |   6 | 00486      | Sat Mar 28 00:00:00 1970 PST
  487 |   7 | 00487      | Sun Mar 29 00:00:00 1970 PST
  488 |   8 | 00488      | Mon Mar 30 00:00:00 1970 PST
  489 |   9 | 00489      | Tue Mar 31 00:00:00 1970 PST
  490 |   0 | 00490      | Wed Apr 01 00:00:00 1970 PST
  491 |   1 | 00491      | Thu Apr 02 00:00:00 1970 PST
  492 |   2 | 00492      | Fri Apr 03 00:00:00 1970 PST
  493 |   3 | 00493      | Sat Apr 04 00:00:00 1970 PST
  494 |   4 | 00494      | Sun Apr 05 00:00:00 1970 PST
  495 |   5 | 00495      | Mon Apr 06 00:00:00 1970 PST
  496 |   6 | 00496      | Tue Apr 07 00:00:00 1970 PST
  497 |   7 | 00497      | Wed Apr 08 00:00:00 1970 PST
  498 |   8 | 00498      | Thu Apr 09 00:00:00 1970 PST
  499 |   9 | 00499      | Fri Apr 10 00:00:00 1970 PST
  500 |   0 | 00500      | Thu Jan 01 00:00:00 1970 PST
  501 |   1 | 00501      | Fri Jan 02 00:00:00 1970 PST
  502 |   2 | 00502      | Sat Jan 03 00:00:00 1970 PST
  503 |   3 | 00503      | Sun Jan 04 00:00:00 1970 PST
  504 |   4 | 00504      | Mon Jan 05 00:00:00 1970 PST
  505 |   5 | 00505      | Tue Jan 06 00:00:00 1970 PST
  506 |   6 | 00506      | Wed Jan 07 00:00:00 1970 PST
  507 |   7 | 00507      | Thu Jan 08 00:00:00 1970 PST
  508 |   8 | 00508      | Fri Jan 09 00:00:00 1970 PST
  509 |   9 | 00509      | Sat Jan 10 00:00:00 1970 PST
  510 |   0 | 00510      | Sun Jan 11 00:00:00 1970 PST
  511 |   1 | 00511      | Mon Jan 12 00:00:00 1970 PST
  512 |   2 | 00512      | Tue Jan 13 00:00:00 1970 PST
  513 |   3 | 00513      | Wed Jan 14 00:00:00 1970 PST
  514 |   4 | 00514      | Thu Jan 15 00:00:00 1970 PST
  515 |   5 | 00515      | Fri Jan 16 00:00:00 1970 PST
  516 |   6 | 00516      | Sat Jan 17 00:00:00 1970 PST
  517 |   7 | 00517      | Sun Jan 18 00:00:00 1970 PST
  518 |   8 | 00518      | Mon Jan 19 00:00:00 1970 PST
  519 |   9 | 00519      | Tue Jan 20 00:00:00 1970 PST
  520 |   0 | 00520      | Wed Jan 21 00:00:00 1970 PST
  521 |   1 | 00521      | Thu Jan 22 00:00:00 1970 PST
  522 |   2 | 00522      | Fri Jan 23 00:00:00 1970 PST
  523 |   3 | 00523      | Sat Jan 24 00:00:00 1970 PST
  524 |   4 | 00524      | Sun Jan 25 00:00:00 1970 PST
  525 |   5 | 00525      | Mon Jan 26 00:00:00 1970 PST
  526 |   6 | 00526      | Tue Jan 27 00:00:00 1970 PST
  527 |   7 | 00527      | Wed Jan 28 00:00:00 1970 PST
  528 |   8 | 00528      | Thu Jan 29 00:00:00 1970 PST
  529 |   9 | 00529      | Fri Jan 30 00:00:00 1970 PST
  530 |   0 | 00530      | Sat Jan 31 00:00:00 1970 PST
  531 |   1 | 00531      | Sun Feb 01 00:00:00 1970 PST
  532 |   2 | 00532      | Mon Feb 02 00:00:00 1970 PST
  533 |   3 | 00533      | Tue Feb 03 00:00:00 1970 PST
  534 |   4 | 00534      | Wed Feb 04 00:00:00 1970 PST
  535 |   5 | 00535      | Thu Feb 05 00:00:00 1970 PST
  536 |   6 | 00536      | Fri Feb 06 00:00:00 1970 PST
  537 |   7 | 00537      | Sat Feb 07 00:00:00 1970 PST
  538 |   8 | 00538      | Sun Feb 08 00:00:00 1970 PST
  539 |   9 | 00539      | Mon Feb 09 00:00:00 1970 PST
  540 |   0 | 00540      | Tue Feb 10 00:00:00 1970 PST
  541 |   1 | 00541      | Wed Feb 11 00:00:00 1970 PST
  542 |   2 | 00542      | Thu Feb 12 00:00:00 1970 PST
  543 |   3 | 00543      | Fri Feb 13 00:00:00 1970 PST
  544 |   4 | 00544      | Sat Feb 14 00:00:00 1970 PST
  545 |   5 | 00545      | Sun Feb 15 00:00:00 1970 PST
  546 |   6 | 00546      | Mon Feb 16 00:00:00 1970 PST
  547 |   7 | 00547      | Tue Feb 17 00:00:00 1970 PST
  548 |   8 | 00548      | Wed Feb 18 00:00:00 1970 PST
  549 |   9 | 00549      | Thu Feb 19 00:00:00 1970 PST
  550 |   0 | 00550      | Fri Feb 20 00:00:00 1970 PST
  551 |   1 | 00551      | Sat Feb 21 00:00:00 1970 PST
  552 |   2 | 00552      | Sun Feb 22 00:00:00 1970 PST
  553 |   3 | 00553      | Mon Feb 23 00:00:00 1970 PST
  554 |   4 | 00554      | Tue Feb 24 00:00:00 1970 PST
  555 |   5 | 00555      | Wed Feb 25 00:00:00 1970 PST
  556 |   6 | 00556      | Thu Feb 26 00:00:00 1970 PST
  557 |   7 | 00557      | Fri Feb 27 00:00:00 1970 PST
  558 |   8 | 00558      | Sat Feb 28 00:00:00 1970 PST
  559 |   9 | 00559      | Sun Mar 01 00:00:00 1970 PST
  560 |   0 | 00560      | Mon Mar 02 00:00:00 1970 PST
  561 |   1 | 00561      | Tue Mar 03 00:00:00 1970 PST
  562 |   2 | 00562      | Wed Mar 04 00:00:00 1970 PST
  563 |   3 | 00563      | Thu Mar 05 00:00:00 1970 PST
  564 |   4 | 00564      | Fri Mar 06 00:00:00 1970 PST
  565 |   5 | 00565      | Sat Mar 07 00:00:00 1970 PST
  566 |   6 | 00566      | Sun Mar 08 00:00:00 1970 PST
  567 |   7 | 00567      | Mon Mar 09 00:00:00 1970 PST
  568 |   8 | 00568      | Tue Mar 10 00:00:00 1970 PST
  569 |   9 | 00569      | Wed Mar 11 00:00:00 1970 PST
  570 |   0 | 00570      | Thu Mar 12 00:00:00 1970 PST
  571 |   1 | 00571      | Fri Mar 13 00:00:00 1970 PST
  572 |   2 | 00572      | Sat Mar 14 00:00:00 1970 PST
  573 |   3 | 00573      | Sun Mar 15 00:00:00 1970 PST
  574 |   4 | 00574      | Mon Mar 16 00:00:00 1970 PST
  575 |   5 | 00575      | Tue Mar 17 00:00:00 1970 PST
  576 |   6 | 00576      | Wed Mar 18 00:00:00 1970 PST
  577 |   7 | 00577      | Thu Mar 19 00:00:00 1970 PST
  578 |   8 | 00578      | Fri Mar 20 00:00:00 1970 PST
  579 |   9 | 00579      | Sat Mar 21 00:00:00 1970 PST
  580 |   0 | 00580      | Sun Mar 22 00:00:00 1970 PST
  581 |   1 | 00581      | Mon Mar 23 00:00:00 1970 PST
  582 |   2 | 00582      | Tue Mar 24 00:00:00 1970 PST
  583 |   3 | 00583      | Wed Mar 25 00:00:00 1970 PST
  584 |   4 | 00584      | Thu Mar 26 00:00:00 1970 PST
  585 |   5 | 00585      | Fri Mar 27 00:00:00 1970 PST
  586 |   6 | 00586      | Sat Mar 28 00:00:00 1970 PST
  587 |   7 | 00587      | Sun Mar 29 00:00:00 1970 PST
  588 |   8 | 00588      | Mon Mar 30 00:00:00 1970 PST
  589 |   9 | 00589      | Tue Mar 31 00:00:00 1970 PST
  590 |   0 | 00590      | Wed Apr 01 00:00:00 1970 PST
  591 |   1 | 00591      | Thu Apr 02 00:00:00 1970 PST
  592 |   2 | 00592      | Fri Apr 03 00:00:00 1970 PST
  593 |   3 | 00593      | Sat Apr 04 00:00:00 1970 PST
  594 |   4 | 00594      | Sun Apr 05 00:00:00 1970 PST
  595 |   5 | 00595      | Mon Apr 06 00:00:00 1970 PST
  596 |   6 | 00596      | Tue Apr 07 00:00:00 1970 PST
  597 |   7 | 00597      | Wed Apr 08 00:00:00 1970 PST
  598 |   8 | 00598      | Thu Apr 09 00:00:00 1970 PST
  599 |   9 | 00599      | Fri Apr 10 00:00:00 1970 PST
  600 |   0 | 00600      | Thu Jan 01 00:00:00 1970 PST
  601 |   1 | 00601      | Fri Jan 02 00:00:00 1970 PST
  602 |   2 | 00602      | Sat Jan 03 00:00:00 1970 PST
  603 |   3 | 00603      | Sun Jan 04 00:00:00 1970 PST
  604 |   4 | 00604      | Mon Jan 05 00:00:00 1970 PST
  605 |   5 | 00605      | Tue Jan 06 00:00:00 1970 PST
  606 |   6 | 00606      | Wed Jan 07 00:00:00 1970 PST
  607 |   7 | 00607      | Thu Jan 08 00:00:00 1970 PST
  608 |   8 | 00608      | Fri Jan 09 00:00:00 1970 PST
  609 |   9 | 00609      | Sat Jan 10 00:00:00 1970 PST
  610 |   0 | 00610      | Sun Jan 11 00:00:00 1970 PST
  611 |   1 | 00611      | Mon Jan 12 00:00:00 1970 PST
  612 |   2 | 00612      | Tue Jan 13 00:00:00 1970 PST
  613 |   3 | 00613      | Wed Jan 14 00:00:00 1970 PST
  614 |   4 | 00614      | Thu Jan 15 00:00:00 1970 PST
  615 |   5 | 00615      | Fri Jan 16 00:00:00 1970 PST
  616 |   6 | 00616      | Sat Jan 17 00:00:00 1970 PST
  617 |   7 | 00617      | Sun Jan 18 00:00:00 1970 PST
  618 |   8 | 00618      | Mon Jan 19 00:00:00 1970 PST
  619 |   9 | 00619      | Tue Jan 20 00:00:00 1970 PST
  620 |   0 | 00620      | Wed Jan 21 00:00:00 1970 PST
  621 |   1 | 00621      | Thu Jan 22 00:00:00 1970 PST
  622 |   2 | 00622      | Fri Jan 23 00:00:00 1970 PST
  623 |   3 | 00623      | Sat Jan 24 00:00:00 1970 PST
  624 |   4 | 00624      | Sun Jan 25 00:00:00 1970 PST
  625 |   5 | 00625      | Mon Jan 26 00:00:00 1970 PST
  626 |   6 | 00626      | Tue Jan 27 00:00:00 1970 PST
  627 |   7 | 00627      | Wed Jan 28 00:00:00 1970 PST
  628 |   8 | 00628      | Thu Jan 29 00:00:00 1970 PST
  629 |   9 | 00629      | Fri Jan 30 00:00:00 1970 PST
  630 |   0 | 00630      | Sat Jan 31 00:00:00 1970 PST
  631 |   1 | 00631      | Sun Feb 01 00:00:00 1970 PST
  632 |   2 | 00632      | Mon Feb 02 00:00:00 1970 PST
  633 |   3 | 00633      | Tue Feb 03 00:00:00 1970 PST
  634 |   4 | 00634      | Wed Feb 04 00:00:00 1970 PST
  635 |   5 | 00635      | Thu Feb 05 00:00:00 1970 PST
  636 |   6 | 00636      | Fri Feb 06 00:00:00 1970 PST
  637 |   7 | 00637      | Sat Feb 07 00:00:00 1970 PST
  638 |   8 | 00638      | Sun Feb 08 00:00:00 1970 PST
  639 |   9 | 00639      | Mon Feb 09 00:00:00 1970 PST
  640 |   0 | 00640      | Tue Feb 10 00:00:00 1970 PST
  641 |   1 | 00641      | Wed Feb 11 00:00:00 1970 PST
  642 |   2 | 00642      | Thu Feb 12 00:00:00 1970 PST
  643 |   3 | 00643      | Fri Feb 13 00:00:00 1970 PST
  644 |   4 | 00644      | Sat Feb 14 00:00:00 1970 PST
  645 |   5 | 00645      | Sun Feb 15 00:00:00 1970 PST
  646 |   6 | 00646      | Mon Feb 16 00:00:00 1970 PST
  647 |   7 | 00647      | Tue Feb 17 00:00:00 1970 PST
  648 |   8 | 00648      | Wed Feb 18 00:00:00 1970 PST
  649 |   9 | 00649      | Thu Feb 19 00:00:00 1970 PST
  650 |   0 | 00650      | Fri Feb 20 00:00:00 1970 PST
  651 |   1 | 00651      | Sat Feb 21 00:00:00 1970 PST
  652 |   2 | 00652      | Sun Feb 22 00:00:00 1970 PST
  653 |   3 | 00653      | Mon Feb 23 00:00:00 1970 PST
  654 |   4 | 00654      | Tue Feb 24 00:00:00 1970 PST
  655 |   5 | 00655      | Wed Feb 25 00:00:00 1970 PST
  656 |   6 | 00656      | Thu Feb 26 00:00:00 1970 PST
  657 |   7 | 00657      | Fri Feb 27 00:00:00 1970 PST
  658 |   8 | 00658      | Sat Feb 28 00:00:00 1970 PST
  659 |   9 | 00659      | Sun Mar 01 00:00:00 1970 PST
  660 |   0 | 00660      | Mon Mar 02 00:00:00 1970 PST
  661 |   1 | 00661      | Tue Mar 03 00:00:00 1970 PST
  662 |   2 | 00662      | Wed Mar 04 00:00:00 1970 PST
  663 |   3 | 00663      | Thu Mar 05 00:00:00 1970 PST
  664 |   4 | 00664      | Fri Mar 06 00:00:00 1970 PST
  665 |   5 | 00665      | Sat Mar 07 00:00:00 1970 PST
  666 |   6 | 00666      | Sun Mar 08 00:00:00 1970 PST
  667 |   7 | 00667      | Mon Mar 09 00:00:00 1970 PST
  668 |   8 | 00668      | Tue Mar 10 00:00:00 1970 PST
  669 |   9 | 00669      | Wed Mar 11 00:00:00 1970 PST
  670 |   0 | 00670      | Thu Mar 12 00:00:00 1970 PST
  671 |   1 | 00671      | Fri Mar 13 00:00:00 1970 PST
  672 |   2 | 00672      | Sat Mar 14 00:00:00 1970 PST
  673 |   3 | 00673      | Sun Mar 15 00:00:00 1970 PST
  674 |   4 | 00674      | Mon Mar 16 00:00:00 1970 PST
  675 |   5 | 00675      | Tue Mar 17 00:00:00 1970 PST
  676 |   6 | 00676      | Wed Mar 18 00:00:00 1970 PST
  677 |   7 | 00677      | Thu Mar 19 00:00:00 1970 PST
  678 |   8 | 00678      | Fri Mar 20 00:00:00 1970 PST
  679 |   9 | 00679      | Sat Mar 21 00:00:00 1970 PST
  680 |   0 | 00680      | Sun Mar 22 00:00:00 1970 PST
  681 |   1 | 00681      | Mon Mar 23 00:00:00 1970 PST
  682 |   2 | 00682      | Tue Mar 24 00:00:00 1970 PST
  683 |   3 | 00683      | Wed Mar 25 00:00:00 1970 PST
  684 |   4 | 00684      | Thu Mar 26 00:00:00 1970 PST
  685 |   5 | 00685      | Fri Mar 27 00:00:00 1970 PST
  686 |   6 | 00686      | Sat Mar 28 00:00:00 1970 PST
  687 |   7 | 00687      | Sun Mar 29 00:00:00 1970 PST
  688 |   8 | 00688      | Mon Mar 30 00:00:00 1970 PST
  689 |   9 | 00689      | Tue Mar 31 00:00:00 1970 PST
  690 |   0 | 00690      | Wed Apr 01 00:00:00 1970 PST
  691 |   1 | 00691      | Thu Apr 02 00:00:00 1970 PST
  692 |   2 | 00692      | Fri Apr 03 00:00:00 1970 PST
  693 |   3 | 00693      | Sat Apr 04 00:00:00 1970 PST
  694 |   4 | 00694      | Sun Apr 05 00:00:00 1970 PST
  695 |   5 | 00695      | Mon Apr 06 00:00:00 1970 PST
  696 |   6 | 00696      | Tue Apr 07 00:00:00 1970 PST
  697 |   7 | 00697      | Wed Apr 08 00:00:00 1970 PST
  698 |   8 | 00698      | Thu Apr 09 00:00:00 1970 PST
  699 |   9 | 00699      | Fri Apr 10 00:00:00 1970 PST
  700 |   0 | 00700      | Thu Jan 01 00:00:00 1970 PST
  701 |   1 | 00701      | Fri Jan 02 00:00:00 1970 PST
  702 |   2 | 00702      | Sat Jan 03 00:00:00 1970 PST
  703 |   3 | 00703      | Sun Jan 04 00:00:00 1970 PST
  704 |   4 | 00704      | Mon Jan 05 00:00:00 1970 PST
  705 |   5 | 00705      | Tue Jan 06 00:00:00 1970 PST
  706 |   6 | 00706      | Wed Jan 07 00:00:00 1970 PST
  707 |   7 | 00707      | Thu Jan 08 00:00:00 1970 PST
  708 |   8 | 00708      | Fri Jan 09 00:00:00 1970 PST
  709 |   9 | 00709      | Sat Jan 10 00:00:00 1970 PST
  710 |   0 | 00710      | Sun Jan 11 00:00:00 1970 PST
  711 |   1 | 00711      | Mon Jan 12 00:00:00 1970 PST
  712 |   2 | 00712      | Tue Jan 13 00:00:00 1970 PST
  713 |   3 | 00713      | Wed Jan 14 00:00:00 1970 PST
  714 |   4 | 00714      | Thu Jan 15 00:00:00 1970 PST
  715 |   5 | 00715      | Fri Jan 16 00:00:00 1970 PST
  716 |   6 | 00716      | Sat Jan 17 00:00:00 1970 PST
  717 |   7 | 00717      | Sun Jan 18 00:00:00 1970 PST
  718 |   8 | 00718      | Mon Jan 19 00:00:00 1970 PST
  719 |   9 | 00719      | Tue Jan 20 00:00:00 1970 PST
  720 |   0 | 00720      | Wed Jan 21 00:00:00 1970 PST
  721 |   1 | 00721      | Thu Jan 22 00:00:00 1970 PST
  722 |   2 | 00722      | Fri Jan 23 00:00:00 1970 PST
  723 |   3 | 00723      | Sat Jan 24 00:00:00 1970 PST
  724 |   4 | 00724      | Sun Jan 25 00:00:00 1970 PST
  725 |   5 | 00725      | Mon Jan 26 00:00:00 1970 PST
  726 |   6 | 00726      | Tue Jan 27 00:00:00 1970 PST
  727 |   7 | 00727      | Wed Jan 28 00:00:00 1970 PST
  728 |   8 | 00728      | Thu Jan 29 00:00:00 1970 PST
  729 |   9 | 00729      | Fri Jan 30 00:00:00 1970 PST
  730 |   0 | 00730      | Sat Jan 31 00:00:00 1970 PST
  731 |   1 | 00731      | Sun Feb 01 00:00:00 1970 PST
  732 |   2 | 00732      | Mon Feb 02 00:00:00 1970 PST
  733 |   3 | 00733      | Tue Feb 03 00:00:00 1970 PST
  734 |   4 | 00734      | Wed Feb 04 00:00:00 1970 PST
  735 |   5 | 00735      | Thu Feb 05 00:00:00 1970 PST
  736 |   6 | 00736      | Fri Feb 06 00:00:00 1970 PST
  737 |   7 | 00737      | Sat Feb 07 00:00:00 1970 PST
  738 |   8 | 00738      | Sun Feb 08 00:00:00 1970 PST
  739 |   9 | 00739      | Mon Feb 09 00:00:00 1970 PST
  740 |   0 | 00740      | Tue Feb 10 00:00:00 1970 PST
  741 |   1 | 00741      | Wed Feb 11 00:00:00 1970 PST
  742 |   2 | 00742      | Thu Feb 12 00:00:00 1970 PST
  743 |   3 | 00743      | Fri Feb 13 00:00:00 1970 PST
  744 |   4 | 00744      | Sat Feb 14 00:00:00 1970 PST
  745 |   5 | 00745      | Sun Feb 15 00:00:00 1970 PST
  746 |   6 | 00746      | Mon Feb 16 00:00:00 1970 PST
  747 |   7 | 00747      | Tue Feb 17 00:00:00 1970 PST
  748 |   8 | 00748      | Wed Feb 18 00:00:00 1970 PST
  749 |   9 | 00749      | Thu Feb 19 00:00:00 1970 PST
  750 |   0 | 00750      | Fri Feb 20 00:00:00 1970 PST
  751 |   1 | 00751      | Sat Feb 21 00:00:00 1970 PST
  752 |   2 | 00752      | Sun Feb 22 00:00:00 1970 PST
  753 |   3 | 00753      | Mon Feb 23 00:00:00 1970 PST
  754 |   4 | 00754      | Tue Feb 24 00:00:00 1970 PST
  755 |   5 | 00755      | Wed Feb 25 00:00:00 1970 PST
  756 |   6 | 00756      | Thu Feb 26 00:00:00 1970 PST
  757 |   7 | 00757      | Fri Feb 27 00:00:00 1970 PST
  758 |   8 | 00758      | Sat Feb 28 00:00:00 1970 PST
  759 |   9 | 00759      | Sun Mar 01 00:00:00 1970 PST
  760 |   0 | 00760      | Mon Mar 02 00:00:00 1970 PST
  761 |   1 | 00761      | Tue Mar 03 00:00:00 1970 PST
  762 |   2 | 00762      | Wed Mar 04 00:00:00 1970 PST
  763 |   3 | 00763      | Thu Mar 05 00:00:00 1970 PST
  764 |   4 | 00764      | Fri Mar 06 00:00:00 1970 PST
  765 |   5 | 00765      | Sat Mar 07 00:00:00 1970 PST
  766 |   6 | 00766      | Sun Mar 08 00:00:00 1970 PST
  767 |   7 | 00767      | Mon Mar 09 00:00:00 1970 PST
  768 |   8 | 00768      | Tue Mar 10 00:00:00 1970 PST
  769 |   9 | 00769      | Wed Mar 11 00:00:00 1970 PST
  770 |   0 | 00770      | Thu Mar 12 00:00:00 1970 PST
  771 |   1 | 00771      | Fri Mar 13 00:00:00 1970 PST
  772 |   2 | 00772      | Sat Mar 14 00:00:00 1970 PST
  773 |   3 | 00773      | Sun Mar 15 00:00:00 1970 PST
  774 |   4 | 00774      | Mon Mar 16 00:00:00 1970 PST
  775 |   5 | 00775      | Tue Mar 17 00:00:00 1970 PST
  776 |   6 | 00776      | Wed Mar 18 00:00:00 1970 PST
  777 |   7 | 00777      | Thu Mar 19 00:00:00 1970 PST
  778 |   8 | 00778      | Fri Mar 20 00:00:00 1970 PST
  779 |   9 | 00779      | Sat Mar 21 00:00:00 1970 PST
  780 |   0 | 00780      | Sun Mar 22 00:00:00 1970 PST
  781 |   1 | 00781      | Mon Mar 23 00:00:00 1970 PST
  782 |   2 | 00782      | Tue Mar 24 00:00:00 1970 PST
  783 |   3 | 00783      | Wed Mar 25 00:00:00 1970 PST
  784 |   4 | 00784      | Thu Mar 26 00:00:00 1970 PST
  785 |   5 | 00785      | Fri Mar 27 00:00:00 1970 PST
  786 |   6 | 00786      | Sat Mar 28 00:00:00 1970 PST
  787 |   7 | 00787      | Sun Mar 29 00:00:00 1970 PST
  788 |   8 | 00788      | Mon Mar 30 00:00:00 1970 PST
  789 |   9 | 00789      | Tue Mar 31 00:00:00 1970 PST
  790 |   0 | 00790      | Wed Apr 01 00:00:00 1970 PST
  791 |   1 | 00791      | Thu Apr 02 00:00:00 1970 PST
  792 |   2 | 00792      | Fri Apr 03 00:00:00 1970 PST
  793 |   3 | 00793      | Sat Apr 04 00:00:00 1970 PST
  794 |   4 | 00794      | Sun Apr 05 00:00:00 1970 PST
  795 |   5 | 00795      | Mon Apr 06 00:00:00 1970 PST
  796 |   6 | 00796      | Tue Apr 07 00:00:00 1970 PST
  797 |   7 | 00797      | Wed Apr 08 00:00:00 1970 PST
  798 |   8 | 00798      | Thu Apr 09 00:00:00 1970 PST
  799 |   9 | 00799      | Fri Apr 10 00:00:00 1970 PST
  800 |   0 | 00800      | Thu Jan 01 00:00:00 1970 PST
  801 |   1 | 00801      | Fri Jan 02 00:00:00 1970 PST
  802 |   2 | 00802      | Sat Jan 03 00:00:00 1970 PST
  803 |   3 | 00803      | Sun Jan 04 00:00:00 1970 PST
  804 |   4 | 00804      | Mon Jan 05 00:00:00 1970 PST
  805 |   5 | 00805      | Tue Jan 06 00:00:00 1970 PST
  806 |   6 | 00806      | Wed Jan 07 00:00:00 1970 PST
  807 |   7 | 00807      | Thu Jan 08 00:00:00 1970 PST
  808 |   8 | 00808      | Fri Jan 09 00:00:00 1970 PST
  809 |   9 | 00809      | Sat Jan 10 00:00:00 1970 PST
  810 |   0 | 00810      | Sun Jan 11 00:00:00 1970 PST
  811 |   1 | 00811      | Mon Jan 12 00:00:00 1970 PST
  812 |   2 | 00812      | Tue Jan 13 00:00:00 1970 PST
  813 |   3 | 00813      | Wed Jan 14 00:00:00 1970 PST
  814 |   4 | 00814      | Thu Jan 15 00:00:00 1970 PST
  815 |   5 | 00815      | Fri Jan 16 00:00:00 1970 PST
  816 |   6 | 00816      | Sat Jan 17 00:00:00 1970 PST
  817 |   7 | 00817      | Sun Jan 18 00:00:00 1970 PST
  818 |   8 | 00818      | Mon Jan 19 00:00:00 1970 PST
  819 |   9 | 00819      | Tue Jan 20 00:00:00 1970 PST
  820 |   0 | 00820      | Wed Jan 21 00:00:00 1970 PST
  821 |   1 | 00821      | Thu Jan 22 00:00:00 1970 PST
  822 |   2 | 00822      | Fri Jan 23 00:00:00 1970 PST
  823 |   3 | 00823      | Sat Jan 24 00:00:00 1970 PST
  824 |   4 | 00824      | Sun Jan 25 00:00:00 1970 PST
  825 |   5 | 00825      | Mon Jan 26 00:00:00 1970 PST
  826 |   6 | 00826      | Tue Jan 27 00:00:00 1970 PST
  827 |   7 | 00827      | Wed Jan 28 00:00:00 1970 PST
  828 |   8 | 00828      | Thu Jan 29 00:00:00 1970 PST
  829 |   9 | 00829      | Fri Jan 30 00:00:00 1970 PST
  830 |   0 | 00830      | Sat Jan 31 00:00:00 1970 PST
  831 |   1 | 00831      | Sun Feb 01 00:00:00 1970 PST
  832 |   2 | 00832      | Mon Feb 02 00:00:00 1970 PST
  833 |   3 | 00833      | Tue Feb 03 00:00:00 1970 PST
  834 |   4 | 00834      | Wed Feb 04 00:00:00 1970 PST
  835 |   5 | 00835      | Thu Feb 05 00:00:00 1970 PST
  836 |   6 | 00836      | Fri Feb 06 00:00:00 1970 PST
  837 |   7 | 00837      | Sat Feb 07 00:00:00 1970 PST
  838 |   8 | 00838      | Sun Feb 08 00:00:00 1970 PST
  839 |   9 | 00839      | Mon Feb 09 00:00:00 1970 PST
  840 |   0 | 00840      | Tue Feb 10 00:00:00 1970 PST
  841 |   1 | 00841      | Wed Feb 11 00:00:00 1970 PST
  842 |   2 | 00842      | Thu Feb 12 00:00:00 1970 PST
  843 |   3 | 00843      | Fri Feb 13 00:00:00 1970 PST
  844 |   4 | 00844      | Sat Feb 14 00:00:00 1970 PST
  845 |   5 | 00845      | Sun Feb 15 00:00:00 1970 PST
  846 |   6 | 00846      | Mon Feb 16 00:00:00 1970 PST
  847 |   7 | 00847      | Tue Feb 17 00:00:00 1970 PST
  848 |   8 | 00848      | Wed Feb 18 00:00:00 1970 PST
  849 |   9 | 00849      | Thu Feb 19 00:00:00 1970 PST
  850 |   0 | 00850      | Fri Feb 20 00:00:00 1970 PST
  851 |   1 | 00851      | Sat Feb 21 00:00:00 1970 PST
  852 |   2 | 00852      | Sun Feb 22 00:00:00 1970 PST
  853 |   3 | 00853      | Mon Feb 23 00:00:00 1970 PST
  854 |   4 | 00854      | Tue Feb 24 00:00:00 1970 PST
  855 |   5 | 00855      | Wed Feb 25 00:00:00 1970 PST
  856 |   6 | 00856      | Thu Feb 26 00:00:00 1970 PST
  857 |   7 | 00857      | Fri Feb 27 00:00:00 1970 PST
  858 |   8 | 00858      | Sat Feb 28 00:00:00 1970 PST
  859 |   9 | 00859      | Sun Mar 01 00:00:00 1970 PST
  860 |   0 | 00860      | Mon Mar 02 00:00:00 1970 PST
  861 |   1 | 00861      | Tue Mar 03 00:00:00 1970 PST
  862 |   2 | 00862      | Wed Mar 04 00:00:00 1970 PST
  863 |   3 | 00863      | Thu Mar 05 00:00:00 1970 PST
  864 |   4 | 00864      | Fri Mar 06 00:00:00 1970 PST
  865 |   5 | 00865      | Sat Mar 07 00:00:00 1970 PST
  866 |   6 | 00866      | Sun Mar 08 00:00:00 1970 PST
  867 |   7 | 00867      | Mon Mar 09 00:00:00 1970 PST
  868 |   8 | 00868      | Tue Mar 10 00:00:00 1970 PST
  869 |   9 | 00869      | Wed Mar 11 00:00:00 1970 PST
  870 |   0 | 00870      | Thu Mar 12 00:00:00 1970 PST
  871 |   1 | 00871      | Fri Mar 13 00:00:00 1970 PST
  872 |   2 | 00872      | Sat Mar 14 00:00:00 1970 PST
  873 |   3 | 00873      | Sun Mar 15 00:00:00 1970 PST
  874 |   4 | 00874      | Mon Mar 16 00:00:00 1970 PST
  875 |   5 | 00875      | Tue Mar 17 00:00:00 1970 PST
  876 |   6 | 00876      | Wed Mar 18 00:00:00 1970 PST
  877 |   7 | 00877      | Thu Mar 19 00:00:00 1970 PST
  878 |   8 | 00878      | Fri Mar 20 00:00:00 1970 PST
  879 |   9 | 00879      | Sat Mar 21 00:00:00 1970 PST
  880 |   0 | 00880      | Sun Mar 22 00:00:00 1970 PST
  881 |   1 | 00881      | Mon Mar 23 00:00:00 1970 PST
  882 |   2 | 00882      | Tue Mar 24 00:00:00 1970 PST
  883 |   3 | 00883      | Wed Mar 25 00:00:00 1970 PST
  884 |   4 | 00884      | Thu Mar 26 00:00:00 1970 PST
  885 |   5 | 00885      | Fri Mar 27 00:00:00 1970 PST
  886 |   6 | 00886      | Sat Mar 28 00:00:00 1970 PST
  887 |   7 | 00887      | Sun Mar 29 00:00:00 1970 PST
  888 |   8 | 00888      | Mon Mar 30 00:00:00 1970 PST
  889 |   9 | 00889      | Tue Mar 31 00:00:00 1970 PST
  890 |   0 | 00890      | Wed Apr 01 00:00:00 1970 PST
  891 |   1 | 00891      | Thu Apr 02 00:00:00 1970 PST
  892 |   2 | 00892      | Fri Apr 03 00:00:00 1970 PST
  893 |   3 | 00893      | Sat Apr 04 00:00:00 1970 PST
  894 |   4 | 00894      | Sun Apr 05 00:00:00 1970 PST
  895 |   5 | 00895      | Mon Apr 06 00:00:00 1970 PST
  896 |   6 | 00896      | Tue Apr 07 00:00:00 1970 PST
  897 |   7 | 00897      | Wed Apr 08 00:00:00 1970 PST
  898 |   8 | 00898      | Thu Apr 09 00:00:00 1970 PST
  899 |   9 | 00899      | Fri Apr 10 00:00:00 1970 PST
  900 |   0 | 00900      | Thu Jan 01 00:00:00 1970 PST
  901 |   1 | 00901      | Fri Jan 02 00:00:00 1970 PST
  902 |   2 | 00902      | Sat Jan 03 00:00:00 1970 PST
  903 |   3 | 00903      | Sun Jan 04 00:00:00 1970 PST
  904 |   4 | 00904      | Mon Jan 05 00:00:00 1970 PST
  905 |   5 | 00905      | Tue Jan 06 00:00:00 1970 PST
  906 |   6 | 00906      | Wed Jan 07 00:00:00 1970 PST
  907 |   7 | 00907      | Thu Jan 08 00:00:00 1970 PST
  908 |   8 | 00908      | Fri Jan 09 00:00:00 1970 PST
  909 |   9 | 00909      | Sat Jan 10 00:00:00 1970 PST
  910 |   0 | 00910      | Sun Jan 11 00:00:00 1970 PST
  911 |   1 | 00911      | Mon Jan 12 00:00:00 1970 PST
  912 |   2 | 00912      | Tue Jan 13 00:00:00 1970 PST
  913 |   3 | 00913      | Wed Jan 14 00:00:00 1970 PST
  914 |   4 | 00914      | Thu Jan 15 00:00:00 1970 PST
  915 |   5 | 00915      | Fri Jan 16 00:00:00 1970 PST
  916 |   6 | 00916      | Sat Jan 17 00:00:00 1970 PST
  917 |   7 | 00917      | Sun Jan 18 00:00:00 1970 PST
  918 |   8 | 00918      | Mon Jan 19 00:00:00 1970 PST
  919 |   9 | 00919      | Tue Jan 20 00:00:00 1970 PST
  920 |   0 | 00920      | Wed Jan 21 00:00:00 1970 PST
  921 |   1 | 00921      | Thu Jan 22 00:00:00 1970 PST
  922 |   2 | 00922      | Fri Jan 23 00:00:00 1970 PST
  923 |   3 | 00923      | Sat Jan 24 00:00:00 1970 PST
  924 |   4 | 00924      | Sun Jan 25 00:00:00 1970 PST
  925 |   5 | 00925      | Mon Jan 26 00:00:00 1970 PST
  926 |   6 | 00926      | Tue Jan 27 00:00:00 1970 PST
  927 |   7 | 00927      | Wed Jan 28 00:00:00 1970 PST
  928 |   8 | 00928      | Thu Jan 29 00:00:00 1970 PST
  929 |   9 | 00929      | Fri Jan 30 00:00:00 1970 PST
  930 |   0 | 00930      | Sat Jan 31 00:00:00 1970 PST
  931 |   1 | 00931      | Sun Feb 01 00:00:00 1970 PST
  932 |   2 | 00932      | Mon Feb 02 00:00:00 1970 PST
  933 |   3 | 00933      | Tue Feb 03 00:00:00 1970 PST
  934 |   4 | 00934      | Wed Feb 04 00:00:00 1970 PST
  935 |   5 | 00935      | Thu Feb 05 00:00:00 1970 PST
  936 |   6 | 00936      | Fri Feb 06 00:00:00 1970 PST
  937 |   7 | 00937      | Sat Feb 07 00:00:00 1970 PST
  938 |   8 | 00938      | Sun Feb 08 00:00:00 1970 PST
  939 |   9 | 00939      | Mon Feb 09 00:00:00 1970 PST
  940 |   0 | 00940      | Tue Feb 10 00:00:00 1970 PST
  941 |   1 | 00941      | Wed Feb 11 00:00:00 1970 PST
  942 |   2 | 00942      | Thu Feb 12 00:00:00 1970 PST
  943 |   3 | 00943      | Fri Feb 13 00:00:00 1970 PST
  944 |   4 | 00944      | Sat Feb 14 00:00:00 1970 PST
  945 |   5 | 00945      | Sun Feb 15 00:00:00 1970 PST
  946 |   6 | 00946      | Mon Feb 16 00:00:00 1970 PST
  947 |   7 | 00947      | Tue Feb 17 00:00:00 1970 PST
  948 |   8 | 00948      | Wed Feb 18 00:00:00 1970 PST
  949 |   9 | 00949      | Thu Feb 19 00:00:00 1970 PST
  950 |   0 | 00950      | Fri Feb 20 00:00:00 1970 PST
  951 |   1 | 00951      | Sat Feb 21 00:00:00 1970 PST
  952 |   2 | 00952      | Sun Feb 22 00:00:00 1970 PST
  953 |   3 | 00953      | Mon Feb 23 00:00:00 1970 PST
  954 |   4 | 00954      | Tue Feb 24 00:00:00 1970 PST
  955 |   5 | 00955      | Wed Feb 25 00:00:00 1970 PST
  956 |   6 | 00956      | Thu Feb 26 00:00:00 1970 PST
  957 |   7 | 00957      | Fri Feb 27 00:00:00 1970 PST
  958 |   8 | 00958      | Sat Feb 28 00:00:00 1970 PST
  959 |   9 | 00959      | Sun Mar 01 00:00:00 1970 PST
  960 |   0 | 00960      | Mon Mar 02 00:00:00 1970 PST
  961 |   1 | 00961      | Tue Mar 03 00:00:00 1970 PST
  962 |   2 | 00962      | Wed Mar 04 00:00:00 1970 PST
  963 |   3 | 00963      | Thu Mar 05 00:00:00 1970 PST
  964 |   4 | 00964      | Fri Mar 06 00:00:00 1970 PST
  965 |   5 | 00965      | Sat Mar 07 00:00:00 1970 PST
  966 |   6 | 00966      | Sun Mar 08 00:00:00 1970 PST
  967 |   7 | 00967      | Mon Mar 09 00:00:00 1970 PST
  968 |   8 | 00968      | Tue Mar 10 00:00:00 1970 PST
  969 |   9 | 00969      | Wed Mar 11 00:00:00 1970 PST
  970 |   0 | 00970      | Thu Mar 12 00:00:00 1970 PST
  971 |   1 | 00971      | Fri Mar 13 00:00:00 1970 PST
  972 |   2 | 00972      | Sat Mar 14 00:00:00 1970 PST
  973 |   3 | 00973      | Sun Mar 15 00:00:00 1970 PST
  974 |   4 | 00974      | Mon Mar 16 00:00:00 1970 PST
  975 |   5 | 00975      | Tue Mar 17 00:00:00 1970 PST
  976 |   6 | 00976      | Wed Mar 18 00:00:00 1970 PST
  977 |   7 | 00977      | Thu Mar 19 00:00:00 1970 PST
  978 |   8 | 00978      | Fri Mar 20 00:00:00 1970 PST
  979 |   9 | 00979      | Sat Mar 21 00:00:00 1970 PST
  980 |   0 | 00980      | Sun Mar 22 00:00:00 1970 PST
  981 |   1 | 00981      | Mon Mar 23 00:00:00 1970 PST
  982 |   2 | 00982      | Tue Mar 24 00:00:00 1970 PST
  983 |   3 | 00983      | Wed Mar 25 00:00:00 1970 PST
  984 |   4 | 00984      | Thu Mar 26 00:00:00 1970 PST
  985 |   5 | 00985      | Fri Mar 27 00:00:00 1970 PST
  986 |   6 | 00986      | Sat Mar 28 00:00:00 1970 PST
  987 |   7 | 00987      | Sun Mar 29 00:00:00 1970 PST
  988 |   8 | 00988      | Mon Mar 30 00:00:00 1970 PST
  989 |   9 | 00989      | Tue Mar 31 00:00:00 1970 PST
  990 |   0 | 00990      | Wed Apr 01 00:00:00 1970 PST
  991 |   1 | 00991      | Thu Apr 02 00:00:00 1970 PST
  992 |   2 | 00992      | Fri Apr 03 00:00:00 1970 PST
  993 |   3 | 00993      | Sat Apr 04 00:00:00 1970 PST
  994 |   4 | 00994      | Sun Apr 05 00:00:00 1970 PST
  995 |   5 | 00995      | Mon Apr 06 00:00:00 1970 PST
  996 |   6 | 00996      | Tue Apr 07 00:00:00 1970 PST
  997 |   7 | 00997      | Wed Apr 08 00:00:00 1970 PST
  998 |   8 | 00998      | Thu Apr 09 00:00:00 1970 PST
  999 |   9 | 00999      | Fri Apr 10 00:00:00 1970 PST
 1000 |   0 | 01000      | Thu Jan 01 00:00:00 1970 PST
 1081 | 101 | 0008100081 |
 1101 | 201 | aaa        |
 1102 | 202 | bbb        |
 1103 | 203 | ccc        |
 1104 | 204 | ddd        |
 1105 | 205 | eee        |
 1115 | 105 | 0011500115 |
 1135 | 105 | 0013500135 |
 1144 | 104 | 0014400144 |
 1149 | 109 | 0014900149 |
 1311 | 101 | 0031100311 |
 1399 | 109 | 0039900399 |
 1488 | 108 | 0048800488 |
 1489 | 109 | 0048900489 |
 1600 | 100 | 0060000600 |
 1789 | 109 | 0078900789 |
 1835 | 105 | 0083500835 |
 1840 | 100 | 0084000840 |
 1854 | 104 | 0085400854 |
 1967 | 107 | 0096700967 |
 1970 | 100 | 0097000970 |
 1984 | 104 | 0098400984 |
 1985 | 105 | 0098500985 |
 1988 | 108 | 0098800988 |
 1990 | 100 | 0099000990 |
(1025 rows)

EXPLAIN (verbose, costs off)
INSERT INTO ft2 (c1,c2,c3) VALUES (1200,999,'foo') RETURNING tableoid::regclass;
                                                                                           QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft2
   Output: (ft2.tableoid)::regclass
   Remote SQL: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
   Batch Size: 1
   ->  Result
         Output: 1200, 999, NULL::integer, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft2       '::character(10), NULL::user_enum
(6 rows)

INSERT INTO ft2 (c1,c2,c3) VALUES (1200,999,'foo') RETURNING tableoid::regclass;
 tableoid
----------
 ft2
(1 row)

EXPLAIN (verbose, costs off)
UPDATE ft2 SET c3 = 'bar' WHERE c1 = 1200 RETURNING tableoid::regclass;             -- can be pushed down
ERROR:  System column "ctid" is not supported yet
CONTEXT:  remote SQL command: EXPLAIN SELECT "C 1", c2, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" WHERE (("C 1" = 1200)) FOR UPDATE
UPDATE ft2 SET c3 = 'bar' WHERE c1 = 1200 RETURNING tableoid::regclass;
ERROR:  System column "ctid" is not supported yet
CONTEXT:  remote SQL command: EXPLAIN SELECT "C 1", c2, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" WHERE (("C 1" = 1200)) FOR UPDATE
EXPLAIN (verbose, costs off)
DELETE FROM ft2 WHERE c1 = 1200 RETURNING tableoid::regclass;                       -- can be pushed down
ERROR:  System column "ctid" is not supported yet
CONTEXT:  remote SQL command: EXPLAIN SELECT ctid FROM "S 1"."T 1" WHERE (("C 1" = 1200)) FOR UPDATE
DELETE FROM ft2 WHERE c1 = 1200 RETURNING tableoid::regclass;
ERROR:  System column "ctid" is not supported yet
CONTEXT:  remote SQL command: EXPLAIN SELECT ctid FROM "S 1"."T 1" WHERE (("C 1" = 1200)) FOR UPDATE
-- YB note: catalog snapshot invalidated, remove pg_sleeps when issue #11554 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- Test UPDATE/DELETE with RETURNING on a three-table join
INSERT INTO ft2 (c1,c2,c3)
  SELECT id, id - 1200, to_char(id, 'FM00000') FROM generate_series(1201, 1300) id;
-- YB note: CTID not supported yet, see issue #11419, reenable commented out part below when fixed
EXPLAIN (verbose, costs off)
UPDATE ft2 SET c3 = 'foo'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2.c1 > 1200 AND ft2.c2 = ft4.c1
  RETURNING ft2, ft2.*, ft4, ft4.*;       -- can be pushed down
ERROR:  System column "ctid" is not supported yet
CONTEXT:  remote SQL command: EXPLAIN SELECT "C 1", c2, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" WHERE (("C 1" > 1200)) FOR UPDATE
--UPDATE ft2 SET c3 = 'foo'
--  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--  WHERE ft2.c1 > 1200 AND ft2.c2 = ft4.c1
--  RETURNING ft2, ft2.*, ft4, ft4.*;
--EXPLAIN (verbose, costs off)
--DELETE FROM ft2
--  USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
--  WHERE ft2.c1 > 1200 AND ft2.c1 % 10 = 0 AND ft2.c2 = ft4.c1
--  RETURNING 100;                          -- can be pushed down
--DELETE FROM ft2
--  USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
--  WHERE ft2.c1 > 1200 AND ft2.c1 % 10 = 0 AND ft2.c2 = ft4.c1
--  RETURNING 100;
--DELETE FROM ft2 WHERE ft2.c1 > 1200;
-- Test UPDATE/DELETE with WHERE or JOIN/ON conditions containing
-- user-defined operators/functions
ALTER SERVER loopback OPTIONS (DROP extensions);
-- YB note: CTID not supported yet, see issue #11419, reenable commented out part below when fixed
INSERT INTO ft2 (c1,c2,c3)
  SELECT id, id % 10, to_char(id, 'FM00000') FROM generate_series(2001, 2010) id;
--EXPLAIN (verbose, costs off)
--UPDATE ft2 SET c3 = 'bar' WHERE postgres_fdw_abs(c1) > 2000 RETURNING *;            -- can't be pushed down
--UPDATE ft2 SET c3 = 'bar' WHERE postgres_fdw_abs(c1) > 2000 RETURNING *;
--EXPLAIN (verbose, costs off)
--UPDATE ft2 SET c3 = 'baz'
--  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--  WHERE ft2.c1 > 2000 AND ft2.c2 === ft4.c1
--  RETURNING ft2.*, ft4.*, ft5.*;                                                    -- can't be pushed down
--UPDATE ft2 SET c3 = 'baz'
--  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--  WHERE ft2.c1 > 2000 AND ft2.c2 === ft4.c1
--  RETURNING ft2.*, ft4.*, ft5.*;
--EXPLAIN (verbose, costs off)
--DELETE FROM ft2
--  USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
--  WHERE ft2.c1 > 2000 AND ft2.c2 = ft4.c1
--  RETURNING ft2.c1, ft2.c2, ft2.c3;       -- can't be pushed down
--DELETE FROM ft2
--  USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
--  WHERE ft2.c1 > 2000 AND ft2.c2 = ft4.c1
--  RETURNING ft2.c1, ft2.c2, ft2.c3;
--DELETE FROM ft2 WHERE ft2.c1 > 2000;
ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
-- Test that trigger on remote table works as expected
CREATE OR REPLACE FUNCTION "S 1".F_BRTRIG() RETURNS trigger AS $$
BEGIN
    NEW.c3 = NEW.c3 || '_trig_update';
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER t1_br_insert BEFORE INSERT OR UPDATE
    ON "S 1"."T 1" FOR EACH ROW EXECUTE PROCEDURE "S 1".F_BRTRIG();
INSERT INTO ft2 (c1,c2,c3) VALUES (1208, 818, 'fff') RETURNING *;
ERROR:  duplicate key value violates unique constraint "t1_pkey"
CONTEXT:  remote SQL command: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING "C 1", c2, c3, c4, c5, c6, c7, c8
INSERT INTO ft2 (c1,c2,c3,c6) VALUES (1218, 818, 'ggg', '(--;') RETURNING *;
ERROR:  duplicate key value violates unique constraint "t1_pkey"
CONTEXT:  remote SQL command: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING "C 1", c2, c3, c4, c5, c6, c7, c8
-- YB note: CTID not supported yet, see issue #11419
UPDATE ft1 SET c2 = c2 + 600 WHERE c1 % 10 = 8 AND c1 < 1200 RETURNING *;
 c1  | c2  |  c3   |              c4              |            c5            | c6 |     c7     | c8
-----+-----+-------+------------------------------+--------------------------+----+------------+-----
 488 | 608 | 00488 | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
 988 | 608 | 00988 | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
 658 | 608 | 00658 | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
 228 | 608 | 00228 | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
 508 | 608 | 00508 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
 718 | 608 | 00718 | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
 568 | 608 | 00568 | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
 478 | 608 | 00478 | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
 948 | 608 | 00948 | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
 888 | 608 | 00888 | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
 348 | 608 | 00348 | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
 908 | 608 | 00908 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
 398 | 608 | 00398 | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
 438 | 608 | 00438 | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
  98 | 608 | 00098 | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
  78 | 608 | 00078 | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
 418 | 608 | 00418 | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
 328 | 608 | 00328 | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
 668 | 608 | 00668 | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
 578 | 608 | 00578 | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
 458 | 608 | 00458 | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
 178 | 608 | 00178 | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
 148 | 608 | 00148 | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
 598 | 608 | 00598 | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
 318 | 608 | 00318 | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
 268 | 608 | 00268 | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
 978 | 608 | 00978 | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
 858 | 608 | 00858 | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
  38 | 608 | 00038 | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
 498 | 608 | 00498 | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
 408 | 608 | 00408 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
 918 | 608 | 00918 | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
 748 | 608 | 00748 | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
 808 | 608 | 00808 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
 518 | 608 | 00518 | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
 838 | 608 | 00838 | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
 678 | 608 | 00678 | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
 238 | 608 | 00238 | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
 778 | 608 | 00778 | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
 548 | 608 | 00548 | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
 538 | 608 | 00538 | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
 208 | 608 | 00208 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
 648 | 608 | 00648 | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
 848 | 608 | 00848 | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
  48 | 608 | 00048 | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
 708 | 608 | 00708 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
 928 | 608 | 00928 | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
 958 | 608 | 00958 | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
 198 | 608 | 00198 | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
 618 | 608 | 00618 | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
 738 | 608 | 00738 | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
 588 | 608 | 00588 | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
 188 | 608 | 00188 | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
 898 | 608 | 00898 | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
 788 | 608 | 00788 | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
 288 | 608 | 00288 | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
 998 | 608 | 00998 | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
 868 | 608 | 00868 | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
 128 | 608 | 00128 | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
 938 | 608 | 00938 | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
 638 | 608 | 00638 | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
 358 | 608 | 00358 | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
 828 | 608 | 00828 | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
  58 | 608 | 00058 | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
 698 | 608 | 00698 | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
 378 | 608 | 00378 | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
 278 | 608 | 00278 | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
 468 | 608 | 00468 | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
 258 | 608 | 00258 | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
 608 | 608 | 00608 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
 528 | 608 | 00528 | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
 308 | 608 | 00308 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
 728 | 608 | 00728 | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
 628 | 608 | 00628 | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
  18 | 608 | 00018 | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
 968 | 608 | 00968 | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
  68 | 608 | 00068 | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
 138 | 608 | 00138 | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
  88 | 608 | 00088 | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
 388 | 608 | 00388 | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
 448 | 608 | 00448 | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
 168 | 608 | 00168 | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
 248 | 608 | 00248 | Wed Feb 18 00:00:00 1970 PST | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo
   8 | 608 | 00008 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
 688 | 608 | 00688 | Mon Mar 30 00:00:00 1970 PST | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo
 798 | 608 | 00798 | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
 338 | 608 | 00338 | Sun Feb 08 00:00:00 1970 PST | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo
 158 | 608 | 00158 | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
 118 | 608 | 00118 | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
 818 | 608 | 00818 | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
  28 | 608 | 00028 | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
 298 | 608 | 00298 | Thu Apr 09 00:00:00 1970 PST | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo
 558 | 608 | 00558 | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
 878 | 608 | 00878 | Fri Mar 20 00:00:00 1970 PST | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo
 768 | 608 | 00768 | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
 428 | 608 | 00428 | Thu Jan 29 00:00:00 1970 PST | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo
 108 | 608 | 00108 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo
 218 | 608 | 00218 | Mon Jan 19 00:00:00 1970 PST | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo
 758 | 608 | 00758 | Sat Feb 28 00:00:00 1970 PST | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo
 368 | 608 | 00368 | Tue Mar 10 00:00:00 1970 PST | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo
(100 rows)

-- Test errors thrown on remote side during update
ALTER TABLE "S 1"."T 1" ADD CONSTRAINT c2positive CHECK (c2 >= 0);
-- YB note: catalog snapshot invalidated, remove pg_sleeps when issue #11554 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

INSERT INTO ft1(c1, c2) VALUES(11, 12);  -- duplicate key
ERROR:  duplicate key value violates unique constraint "t1_pkey"
CONTEXT:  remote SQL command: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT DO NOTHING; -- works
INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO NOTHING; -- unsupported
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO UPDATE SET c3 = 'ffg'; -- unsupported
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
INSERT INTO ft1(c1, c2) VALUES(1111, -2);  -- c2positive
ERROR:  new row for relation "T 1" violates check constraint "c2positive"
DETAIL:  Failing row contains (1111, -2, null, null, null, null, ft1       , null).
CONTEXT:  remote SQL command: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
INSERT INTO ft1(c1, c2) VALUES(1, 12);
ERROR:  duplicate key value violates unique constraint "t1_pkey"
CONTEXT:  remote SQL command: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
UPDATE ft1 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
ERROR:  new row for relation "T 1" violates check constraint "c2positive"
DETAIL:  Failing row contains (1, -1, 00001_trig_update, 1970-01-02 08:00:00+00, 1970-01-02 00:00:00, 1, 1         , foo).
CONTEXT:  remote SQL command: UPDATE "S 1"."T 1" SET c2 = (- c2) WHERE (("C 1" = 1))
-- Test savepoint/rollback behavior
select c2, count(*) from ft1 where c2 < 500 group by 1 order by 1;
 c2  | count
-----+-------
   0 |   101
   1 |   102
   2 |   102
   3 |   102
   4 |   102
   5 |   102
   6 |   102
   7 |   102
   8 |     2
   9 |   102
  10 |     1
  11 |     1
  12 |     1
  13 |     1
  14 |     1
  15 |     1
  16 |     1
  17 |     1
  18 |     1
  19 |     1
  20 |     1
  21 |     1
  22 |     1
  23 |     1
  24 |     1
  25 |     1
  26 |     1
  27 |     1
  28 |     1
  29 |     1
  30 |     1
  31 |     1
  32 |     1
  33 |     1
  34 |     1
  35 |     1
  36 |     1
  37 |     1
  38 |     1
  39 |     1
  40 |     1
  41 |     1
  42 |     1
  43 |     1
  44 |     1
  45 |     1
  46 |     1
  47 |     1
  48 |     1
  49 |     1
  50 |     1
  51 |     1
  52 |     1
  53 |     1
  54 |     1
  55 |     1
  56 |     1
  57 |     1
  58 |     1
  59 |     1
  60 |     1
  61 |     1
  62 |     1
  63 |     1
  64 |     1
  65 |     1
  66 |     1
  67 |     1
  68 |     1
  69 |     1
  70 |     1
  71 |     1
  72 |     1
  73 |     1
  74 |     1
  75 |     1
  76 |     1
  77 |     1
  78 |     1
  79 |     1
  80 |     1
  81 |     1
  82 |     1
  83 |     1
  84 |     1
  85 |     1
  86 |     1
  87 |     1
  88 |     1
  89 |     1
  90 |     1
  91 |     1
  92 |     1
  93 |     1
  94 |     1
  95 |     1
  96 |     1
  97 |     1
  98 |     1
  99 |     1
 100 |     5
 101 |     2
 104 |     3
 105 |     4
 107 |     1
 108 |     2
 109 |     4
 201 |     1
 202 |     1
 203 |     1
 204 |     1
 205 |     1
(112 rows)

select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
 c2  | count
-----+-------
   0 |   101
   1 |   102
   2 |   102
   3 |   102
   4 |   102
   5 |   102
   6 |   102
   7 |   102
   8 |     2
   9 |   102
  10 |     1
  11 |     1
  12 |     1
  13 |     1
  14 |     1
  15 |     1
  16 |     1
  17 |     1
  18 |     1
  19 |     1
  20 |     1
  21 |     1
  22 |     1
  23 |     1
  24 |     1
  25 |     1
  26 |     1
  27 |     1
  28 |     1
  29 |     1
  30 |     1
  31 |     1
  32 |     1
  33 |     1
  34 |     1
  35 |     1
  36 |     1
  37 |     1
  38 |     1
  39 |     1
  40 |     1
  41 |     1
  42 |     1
  43 |     1
  44 |     1
  45 |     1
  46 |     1
  47 |     1
  48 |     1
  49 |     1
  50 |     1
  51 |     1
  52 |     1
  53 |     1
  54 |     1
  55 |     1
  56 |     1
  57 |     1
  58 |     1
  59 |     1
  60 |     1
  61 |     1
  62 |     1
  63 |     1
  64 |     1
  65 |     1
  66 |     1
  67 |     1
  68 |     1
  69 |     1
  70 |     1
  71 |     1
  72 |     1
  73 |     1
  74 |     1
  75 |     1
  76 |     1
  77 |     1
  78 |     1
  79 |     1
  80 |     1
  81 |     1
  82 |     1
  83 |     1
  84 |     1
  85 |     1
  86 |     1
  87 |     1
  88 |     1
  89 |     1
  90 |     1
  91 |     1
  92 |     1
  93 |     1
  94 |     1
  95 |     1
  96 |     1
  97 |     1
  98 |     1
  99 |     1
 100 |     5
 101 |     2
 104 |     3
 105 |     4
 107 |     1
 108 |     2
 109 |     4
 201 |     1
 202 |     1
 203 |     1
 204 |     1
 205 |     1
(112 rows)

begin;
update ft1 set c2 = 42 where c2 = 0;
select c2, count(*) from ft1 where c2 < 500 group by 1 order by 1;
 c2  | count
-----+-------
   1 |   102
   2 |   102
   3 |   102
   4 |   102
   5 |   102
   6 |   102
   7 |   102
   8 |     2
   9 |   102
  10 |     1
  11 |     1
  12 |     1
  13 |     1
  14 |     1
  15 |     1
  16 |     1
  17 |     1
  18 |     1
  19 |     1
  20 |     1
  21 |     1
  22 |     1
  23 |     1
  24 |     1
  25 |     1
  26 |     1
  27 |     1
  28 |     1
  29 |     1
  30 |     1
  31 |     1
  32 |     1
  33 |     1
  34 |     1
  35 |     1
  36 |     1
  37 |     1
  38 |     1
  39 |     1
  40 |     1
  41 |     1
  42 |   102
  43 |     1
  44 |     1
  45 |     1
  46 |     1
  47 |     1
  48 |     1
  49 |     1
  50 |     1
  51 |     1
  52 |     1
  53 |     1
  54 |     1
  55 |     1
  56 |     1
  57 |     1
  58 |     1
  59 |     1
  60 |     1
  61 |     1
  62 |     1
  63 |     1
  64 |     1
  65 |     1
  66 |     1
  67 |     1
  68 |     1
  69 |     1
  70 |     1
  71 |     1
  72 |     1
  73 |     1
  74 |     1
  75 |     1
  76 |     1
  77 |     1
  78 |     1
  79 |     1
  80 |     1
  81 |     1
  82 |     1
  83 |     1
  84 |     1
  85 |     1
  86 |     1
  87 |     1
  88 |     1
  89 |     1
  90 |     1
  91 |     1
  92 |     1
  93 |     1
  94 |     1
  95 |     1
  96 |     1
  97 |     1
  98 |     1
  99 |     1
 100 |     5
 101 |     2
 104 |     3
 105 |     4
 107 |     1
 108 |     2
 109 |     4
 201 |     1
 202 |     1
 203 |     1
 204 |     1
 205 |     1
(111 rows)

savepoint s1;
update ft1 set c2 = 44 where c2 = 4;
select c2, count(*) from ft1 where c2 < 500 group by 1 order by 1;
 c2  | count
-----+-------
   1 |   102
   2 |   102
   3 |   102
   5 |   102
   6 |   102
   7 |   102
   8 |     2
   9 |   102
  10 |     1
  11 |     1
  12 |     1
  13 |     1
  14 |     1
  15 |     1
  16 |     1
  17 |     1
  18 |     1
  19 |     1
  20 |     1
  21 |     1
  22 |     1
  23 |     1
  24 |     1
  25 |     1
  26 |     1
  27 |     1
  28 |     1
  29 |     1
  30 |     1
  31 |     1
  32 |     1
  33 |     1
  34 |     1
  35 |     1
  36 |     1
  37 |     1
  38 |     1
  39 |     1
  40 |     1
  41 |     1
  42 |   102
  43 |     1
  44 |   103
  45 |     1
  46 |     1
  47 |     1
  48 |     1
  49 |     1
  50 |     1
  51 |     1
  52 |     1
  53 |     1
  54 |     1
  55 |     1
  56 |     1
  57 |     1
  58 |     1
  59 |     1
  60 |     1
  61 |     1
  62 |     1
  63 |     1
  64 |     1
  65 |     1
  66 |     1
  67 |     1
  68 |     1
  69 |     1
  70 |     1
  71 |     1
  72 |     1
  73 |     1
  74 |     1
  75 |     1
  76 |     1
  77 |     1
  78 |     1
  79 |     1
  80 |     1
  81 |     1
  82 |     1
  83 |     1
  84 |     1
  85 |     1
  86 |     1
  87 |     1
  88 |     1
  89 |     1
  90 |     1
  91 |     1
  92 |     1
  93 |     1
  94 |     1
  95 |     1
  96 |     1
  97 |     1
  98 |     1
  99 |     1
 100 |     5
 101 |     2
 104 |     3
 105 |     4
 107 |     1
 108 |     2
 109 |     4
 201 |     1
 202 |     1
 203 |     1
 204 |     1
 205 |     1
(110 rows)

release savepoint s1;
select c2, count(*) from ft1 where c2 < 500 group by 1 order by 1;
 c2  | count
-----+-------
   1 |   102
   2 |   102
   3 |   102
   5 |   102
   6 |   102
   7 |   102
   8 |     2
   9 |   102
  10 |     1
  11 |     1
  12 |     1
  13 |     1
  14 |     1
  15 |     1
  16 |     1
  17 |     1
  18 |     1
  19 |     1
  20 |     1
  21 |     1
  22 |     1
  23 |     1
  24 |     1
  25 |     1
  26 |     1
  27 |     1
  28 |     1
  29 |     1
  30 |     1
  31 |     1
  32 |     1
  33 |     1
  34 |     1
  35 |     1
  36 |     1
  37 |     1
  38 |     1
  39 |     1
  40 |     1
  41 |     1
  42 |   102
  43 |     1
  44 |   103
  45 |     1
  46 |     1
  47 |     1
  48 |     1
  49 |     1
  50 |     1
  51 |     1
  52 |     1
  53 |     1
  54 |     1
  55 |     1
  56 |     1
  57 |     1
  58 |     1
  59 |     1
  60 |     1
  61 |     1
  62 |     1
  63 |     1
  64 |     1
  65 |     1
  66 |     1
  67 |     1
  68 |     1
  69 |     1
  70 |     1
  71 |     1
  72 |     1
  73 |     1
  74 |     1
  75 |     1
  76 |     1
  77 |     1
  78 |     1
  79 |     1
  80 |     1
  81 |     1
  82 |     1
  83 |     1
  84 |     1
  85 |     1
  86 |     1
  87 |     1
  88 |     1
  89 |     1
  90 |     1
  91 |     1
  92 |     1
  93 |     1
  94 |     1
  95 |     1
  96 |     1
  97 |     1
  98 |     1
  99 |     1
 100 |     5
 101 |     2
 104 |     3
 105 |     4
 107 |     1
 108 |     2
 109 |     4
 201 |     1
 202 |     1
 203 |     1
 204 |     1
 205 |     1
(110 rows)

savepoint s2;
update ft1 set c2 = 46 where c2 = 6;
select c2, count(*) from ft1 where c2 < 500 group by 1 order by 1;
 c2  | count
-----+-------
   1 |   102
   2 |   102
   3 |   102
   5 |   102
   7 |   102
   8 |     2
   9 |   102
  10 |     1
  11 |     1
  12 |     1
  13 |     1
  14 |     1
  15 |     1
  16 |     1
  17 |     1
  18 |     1
  19 |     1
  20 |     1
  21 |     1
  22 |     1
  23 |     1
  24 |     1
  25 |     1
  26 |     1
  27 |     1
  28 |     1
  29 |     1
  30 |     1
  31 |     1
  32 |     1
  33 |     1
  34 |     1
  35 |     1
  36 |     1
  37 |     1
  38 |     1
  39 |     1
  40 |     1
  41 |     1
  42 |   102
  43 |     1
  44 |   103
  45 |     1
  46 |   103
  47 |     1
  48 |     1
  49 |     1
  50 |     1
  51 |     1
  52 |     1
  53 |     1
  54 |     1
  55 |     1
  56 |     1
  57 |     1
  58 |     1
  59 |     1
  60 |     1
  61 |     1
  62 |     1
  63 |     1
  64 |     1
  65 |     1
  66 |     1
  67 |     1
  68 |     1
  69 |     1
  70 |     1
  71 |     1
  72 |     1
  73 |     1
  74 |     1
  75 |     1
  76 |     1
  77 |     1
  78 |     1
  79 |     1
  80 |     1
  81 |     1
  82 |     1
  83 |     1
  84 |     1
  85 |     1
  86 |     1
  87 |     1
  88 |     1
  89 |     1
  90 |     1
  91 |     1
  92 |     1
  93 |     1
  94 |     1
  95 |     1
  96 |     1
  97 |     1
  98 |     1
  99 |     1
 100 |     5
 101 |     2
 104 |     3
 105 |     4
 107 |     1
 108 |     2
 109 |     4
 201 |     1
 202 |     1
 203 |     1
 204 |     1
 205 |     1
(109 rows)

rollback to savepoint s2;
select c2, count(*) from ft1 where c2 < 500 group by 1 order by 1;
 c2  | count
-----+-------
   1 |   102
   2 |   102
   3 |   102
   5 |   102
   6 |   102
   7 |   102
   8 |     2
   9 |   102
  10 |     1
  11 |     1
  12 |     1
  13 |     1
  14 |     1
  15 |     1
  16 |     1
  17 |     1
  18 |     1
  19 |     1
  20 |     1
  21 |     1
  22 |     1
  23 |     1
  24 |     1
  25 |     1
  26 |     1
  27 |     1
  28 |     1
  29 |     1
  30 |     1
  31 |     1
  32 |     1
  33 |     1
  34 |     1
  35 |     1
  36 |     1
  37 |     1
  38 |     1
  39 |     1
  40 |     1
  41 |     1
  42 |   102
  43 |     1
  44 |   103
  45 |     1
  46 |     1
  47 |     1
  48 |     1
  49 |     1
  50 |     1
  51 |     1
  52 |     1
  53 |     1
  54 |     1
  55 |     1
  56 |     1
  57 |     1
  58 |     1
  59 |     1
  60 |     1
  61 |     1
  62 |     1
  63 |     1
  64 |     1
  65 |     1
  66 |     1
  67 |     1
  68 |     1
  69 |     1
  70 |     1
  71 |     1
  72 |     1
  73 |     1
  74 |     1
  75 |     1
  76 |     1
  77 |     1
  78 |     1
  79 |     1
  80 |     1
  81 |     1
  82 |     1
  83 |     1
  84 |     1
  85 |     1
  86 |     1
  87 |     1
  88 |     1
  89 |     1
  90 |     1
  91 |     1
  92 |     1
  93 |     1
  94 |     1
  95 |     1
  96 |     1
  97 |     1
  98 |     1
  99 |     1
 100 |     5
 101 |     2
 104 |     3
 105 |     4
 107 |     1
 108 |     2
 109 |     4
 201 |     1
 202 |     1
 203 |     1
 204 |     1
 205 |     1
(110 rows)

release savepoint s2;
select c2, count(*) from ft1 where c2 < 500 group by 1 order by 1;
 c2  | count
-----+-------
   1 |   102
   2 |   102
   3 |   102
   5 |   102
   6 |   102
   7 |   102
   8 |     2
   9 |   102
  10 |     1
  11 |     1
  12 |     1
  13 |     1
  14 |     1
  15 |     1
  16 |     1
  17 |     1
  18 |     1
  19 |     1
  20 |     1
  21 |     1
  22 |     1
  23 |     1
  24 |     1
  25 |     1
  26 |     1
  27 |     1
  28 |     1
  29 |     1
  30 |     1
  31 |     1
  32 |     1
  33 |     1
  34 |     1
  35 |     1
  36 |     1
  37 |     1
  38 |     1
  39 |     1
  40 |     1
  41 |     1
  42 |   102
  43 |     1
  44 |   103
  45 |     1
  46 |     1
  47 |     1
  48 |     1
  49 |     1
  50 |     1
  51 |     1
  52 |     1
  53 |     1
  54 |     1
  55 |     1
  56 |     1
  57 |     1
  58 |     1
  59 |     1
  60 |     1
  61 |     1
  62 |     1
  63 |     1
  64 |     1
  65 |     1
  66 |     1
  67 |     1
  68 |     1
  69 |     1
  70 |     1
  71 |     1
  72 |     1
  73 |     1
  74 |     1
  75 |     1
  76 |     1
  77 |     1
  78 |     1
  79 |     1
  80 |     1
  81 |     1
  82 |     1
  83 |     1
  84 |     1
  85 |     1
  86 |     1
  87 |     1
  88 |     1
  89 |     1
  90 |     1
  91 |     1
  92 |     1
  93 |     1
  94 |     1
  95 |     1
  96 |     1
  97 |     1
  98 |     1
  99 |     1
 100 |     5
 101 |     2
 104 |     3
 105 |     4
 107 |     1
 108 |     2
 109 |     4
 201 |     1
 202 |     1
 203 |     1
 204 |     1
 205 |     1
(110 rows)

savepoint s3;
update ft1 set c2 = -2 where c2 = 42 and c1 = 10; -- fail on remote side
ERROR:  new row for relation "T 1" violates check constraint "c2positive"
DETAIL:  Failing row contains (10, -2, 00010_trig_update_trig_update, 1970-01-11 08:00:00+00, 1970-01-11 00:00:00, 0, 0         , foo).
CONTEXT:  remote SQL command: UPDATE "S 1"."T 1" SET c2 = (-2) WHERE ((c2 = 42)) AND (("C 1" = 10))
rollback to savepoint s3;
select c2, count(*) from ft1 where c2 < 500 group by 1 order by 1;
 c2  | count
-----+-------
   1 |   102
   2 |   102
   3 |   102
   5 |   102
   6 |   102
   7 |   102
   8 |     2
   9 |   102
  10 |     1
  11 |     1
  12 |     1
  13 |     1
  14 |     1
  15 |     1
  16 |     1
  17 |     1
  18 |     1
  19 |     1
  20 |     1
  21 |     1
  22 |     1
  23 |     1
  24 |     1
  25 |     1
  26 |     1
  27 |     1
  28 |     1
  29 |     1
  30 |     1
  31 |     1
  32 |     1
  33 |     1
  34 |     1
  35 |     1
  36 |     1
  37 |     1
  38 |     1
  39 |     1
  40 |     1
  41 |     1
  42 |   102
  43 |     1
  44 |   103
  45 |     1
  46 |     1
  47 |     1
  48 |     1
  49 |     1
  50 |     1
  51 |     1
  52 |     1
  53 |     1
  54 |     1
  55 |     1
  56 |     1
  57 |     1
  58 |     1
  59 |     1
  60 |     1
  61 |     1
  62 |     1
  63 |     1
  64 |     1
  65 |     1
  66 |     1
  67 |     1
  68 |     1
  69 |     1
  70 |     1
  71 |     1
  72 |     1
  73 |     1
  74 |     1
  75 |     1
  76 |     1
  77 |     1
  78 |     1
  79 |     1
  80 |     1
  81 |     1
  82 |     1
  83 |     1
  84 |     1
  85 |     1
  86 |     1
  87 |     1
  88 |     1
  89 |     1
  90 |     1
  91 |     1
  92 |     1
  93 |     1
  94 |     1
  95 |     1
  96 |     1
  97 |     1
  98 |     1
  99 |     1
 100 |     5
 101 |     2
 104 |     3
 105 |     4
 107 |     1
 108 |     2
 109 |     4
 201 |     1
 202 |     1
 203 |     1
 204 |     1
 205 |     1
(110 rows)

release savepoint s3;
select c2, count(*) from ft1 where c2 < 500 group by 1 order by 1;
 c2  | count
-----+-------
   1 |   102
   2 |   102
   3 |   102
   5 |   102
   6 |   102
   7 |   102
   8 |     2
   9 |   102
  10 |     1
  11 |     1
  12 |     1
  13 |     1
  14 |     1
  15 |     1
  16 |     1
  17 |     1
  18 |     1
  19 |     1
  20 |     1
  21 |     1
  22 |     1
  23 |     1
  24 |     1
  25 |     1
  26 |     1
  27 |     1
  28 |     1
  29 |     1
  30 |     1
  31 |     1
  32 |     1
  33 |     1
  34 |     1
  35 |     1
  36 |     1
  37 |     1
  38 |     1
  39 |     1
  40 |     1
  41 |     1
  42 |   102
  43 |     1
  44 |   103
  45 |     1
  46 |     1
  47 |     1
  48 |     1
  49 |     1
  50 |     1
  51 |     1
  52 |     1
  53 |     1
  54 |     1
  55 |     1
  56 |     1
  57 |     1
  58 |     1
  59 |     1
  60 |     1
  61 |     1
  62 |     1
  63 |     1
  64 |     1
  65 |     1
  66 |     1
  67 |     1
  68 |     1
  69 |     1
  70 |     1
  71 |     1
  72 |     1
  73 |     1
  74 |     1
  75 |     1
  76 |     1
  77 |     1
  78 |     1
  79 |     1
  80 |     1
  81 |     1
  82 |     1
  83 |     1
  84 |     1
  85 |     1
  86 |     1
  87 |     1
  88 |     1
  89 |     1
  90 |     1
  91 |     1
  92 |     1
  93 |     1
  94 |     1
  95 |     1
  96 |     1
  97 |     1
  98 |     1
  99 |     1
 100 |     5
 101 |     2
 104 |     3
 105 |     4
 107 |     1
 108 |     2
 109 |     4
 201 |     1
 202 |     1
 203 |     1
 204 |     1
 205 |     1
(110 rows)

-- none of the above is committed yet remotely
select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
 c2  | count
-----+-------
   0 |   101
   1 |   102
   2 |   102
   3 |   102
   4 |   102
   5 |   102
   6 |   102
   7 |   102
   8 |     2
   9 |   102
  10 |     1
  11 |     1
  12 |     1
  13 |     1
  14 |     1
  15 |     1
  16 |     1
  17 |     1
  18 |     1
  19 |     1
  20 |     1
  21 |     1
  22 |     1
  23 |     1
  24 |     1
  25 |     1
  26 |     1
  27 |     1
  28 |     1
  29 |     1
  30 |     1
  31 |     1
  32 |     1
  33 |     1
  34 |     1
  35 |     1
  36 |     1
  37 |     1
  38 |     1
  39 |     1
  40 |     1
  41 |     1
  42 |     1
  43 |     1
  44 |     1
  45 |     1
  46 |     1
  47 |     1
  48 |     1
  49 |     1
  50 |     1
  51 |     1
  52 |     1
  53 |     1
  54 |     1
  55 |     1
  56 |     1
  57 |     1
  58 |     1
  59 |     1
  60 |     1
  61 |     1
  62 |     1
  63 |     1
  64 |     1
  65 |     1
  66 |     1
  67 |     1
  68 |     1
  69 |     1
  70 |     1
  71 |     1
  72 |     1
  73 |     1
  74 |     1
  75 |     1
  76 |     1
  77 |     1
  78 |     1
  79 |     1
  80 |     1
  81 |     1
  82 |     1
  83 |     1
  84 |     1
  85 |     1
  86 |     1
  87 |     1
  88 |     1
  89 |     1
  90 |     1
  91 |     1
  92 |     1
  93 |     1
  94 |     1
  95 |     1
  96 |     1
  97 |     1
  98 |     1
  99 |     1
 100 |     5
 101 |     2
 104 |     3
 105 |     4
 107 |     1
 108 |     2
 109 |     4
 201 |     1
 202 |     1
 203 |     1
 204 |     1
 205 |     1
(112 rows)

commit;
select c2, count(*) from ft1 where c2 < 500 group by 1 order by 1;
 c2  | count
-----+-------
   1 |   102
   2 |   102
   3 |   102
   5 |   102
   6 |   102
   7 |   102
   8 |     2
   9 |   102
  10 |     1
  11 |     1
  12 |     1
  13 |     1
  14 |     1
  15 |     1
  16 |     1
  17 |     1
  18 |     1
  19 |     1
  20 |     1
  21 |     1
  22 |     1
  23 |     1
  24 |     1
  25 |     1
  26 |     1
  27 |     1
  28 |     1
  29 |     1
  30 |     1
  31 |     1
  32 |     1
  33 |     1
  34 |     1
  35 |     1
  36 |     1
  37 |     1
  38 |     1
  39 |     1
  40 |     1
  41 |     1
  42 |   102
  43 |     1
  44 |   103
  45 |     1
  46 |     1
  47 |     1
  48 |     1
  49 |     1
  50 |     1
  51 |     1
  52 |     1
  53 |     1
  54 |     1
  55 |     1
  56 |     1
  57 |     1
  58 |     1
  59 |     1
  60 |     1
  61 |     1
  62 |     1
  63 |     1
  64 |     1
  65 |     1
  66 |     1
  67 |     1
  68 |     1
  69 |     1
  70 |     1
  71 |     1
  72 |     1
  73 |     1
  74 |     1
  75 |     1
  76 |     1
  77 |     1
  78 |     1
  79 |     1
  80 |     1
  81 |     1
  82 |     1
  83 |     1
  84 |     1
  85 |     1
  86 |     1
  87 |     1
  88 |     1
  89 |     1
  90 |     1
  91 |     1
  92 |     1
  93 |     1
  94 |     1
  95 |     1
  96 |     1
  97 |     1
  98 |     1
  99 |     1
 100 |     5
 101 |     2
 104 |     3
 105 |     4
 107 |     1
 108 |     2
 109 |     4
 201 |     1
 202 |     1
 203 |     1
 204 |     1
 205 |     1
(110 rows)

select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
 c2  | count
-----+-------
   1 |   102
   2 |   102
   3 |   102
   5 |   102
   6 |   102
   7 |   102
   8 |     2
   9 |   102
  10 |     1
  11 |     1
  12 |     1
  13 |     1
  14 |     1
  15 |     1
  16 |     1
  17 |     1
  18 |     1
  19 |     1
  20 |     1
  21 |     1
  22 |     1
  23 |     1
  24 |     1
  25 |     1
  26 |     1
  27 |     1
  28 |     1
  29 |     1
  30 |     1
  31 |     1
  32 |     1
  33 |     1
  34 |     1
  35 |     1
  36 |     1
  37 |     1
  38 |     1
  39 |     1
  40 |     1
  41 |     1
  42 |   102
  43 |     1
  44 |   103
  45 |     1
  46 |     1
  47 |     1
  48 |     1
  49 |     1
  50 |     1
  51 |     1
  52 |     1
  53 |     1
  54 |     1
  55 |     1
  56 |     1
  57 |     1
  58 |     1
  59 |     1
  60 |     1
  61 |     1
  62 |     1
  63 |     1
  64 |     1
  65 |     1
  66 |     1
  67 |     1
  68 |     1
  69 |     1
  70 |     1
  71 |     1
  72 |     1
  73 |     1
  74 |     1
  75 |     1
  76 |     1
  77 |     1
  78 |     1
  79 |     1
  80 |     1
  81 |     1
  82 |     1
  83 |     1
  84 |     1
  85 |     1
  86 |     1
  87 |     1
  88 |     1
  89 |     1
  90 |     1
  91 |     1
  92 |     1
  93 |     1
  94 |     1
  95 |     1
  96 |     1
  97 |     1
  98 |     1
  99 |     1
 100 |     5
 101 |     2
 104 |     3
 105 |     4
 107 |     1
 108 |     2
 109 |     4
 201 |     1
 202 |     1
 203 |     1
 204 |     1
 205 |     1
(110 rows)

VACUUM ANALYZE "S 1"."T 1";
NOTICE:  VACUUM is a no-op statement since YugabyteDB performs garbage collection of dead tuples automatically
-- Above DMLs add data with c6 as NULL in ft1, so test ORDER BY NULLS LAST and NULLs
-- FIRST behavior here.
-- ORDER BY DESC NULLS LAST options
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795 LIMIT 10;
                                                                          QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c6 DESC NULLS LAST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 795::bigint
(3 rows)

SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795  LIMIT 10;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8
-----+----+-------+------------------------------+--------------------------+----+------------+-----
 952 |  2 | 00952 | Sun Feb 22 00:00:00 1970 PST | Sun Feb 22 00:00:00 1970 | 2  | 2          | foo
 962 |  2 | 00962 | Wed Mar 04 00:00:00 1970 PST | Wed Mar 04 00:00:00 1970 | 2  | 2          | foo
 972 |  2 | 00972 | Sat Mar 14 00:00:00 1970 PST | Sat Mar 14 00:00:00 1970 | 2  | 2          | foo
 982 |  2 | 00982 | Tue Mar 24 00:00:00 1970 PST | Tue Mar 24 00:00:00 1970 | 2  | 2          | foo
 992 |  2 | 00992 | Fri Apr 03 00:00:00 1970 PST | Fri Apr 03 00:00:00 1970 | 2  | 2          | foo
   1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo
  11 |  1 | 00011 | Mon Jan 12 00:00:00 1970 PST | Mon Jan 12 00:00:00 1970 | 1  | 1          | foo
  21 |  1 | 00021 | Thu Jan 22 00:00:00 1970 PST | Thu Jan 22 00:00:00 1970 | 1  | 1          | foo
  31 |  1 | 00031 | Sun Feb 01 00:00:00 1970 PST | Sun Feb 01 00:00:00 1970 | 1  | 1          | foo
  41 |  1 | 00041 | Wed Feb 11 00:00:00 1970 PST | Wed Feb 11 00:00:00 1970 | 1  | 1          | foo
(10 rows)

-- ORDER BY DESC NULLS FIRST options
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
                                                                          QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c6 DESC NULLS FIRST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 15::bigint
(3 rows)

SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
  c1  | c2 |  c3   | c4 | c5 | c6 |     c7     | c8
------+----+-------+----+----+----+------------+----
 1205 |  5 | 01205 |    |    |    | ft2        |
 1206 |  6 | 01206 |    |    |    | ft2        |
 1207 |  7 | 01207 |    |    |    | ft2        |
 1208 |  8 | 01208 |    |    |    | ft2        |
 1209 |  9 | 01209 |    |    |    | ft2        |
 1210 | 10 | 01210 |    |    |    | ft2        |
 1211 | 11 | 01211 |    |    |    | ft2        |
 1212 | 12 | 01212 |    |    |    | ft2        |
 1213 | 13 | 01213 |    |    |    | ft2        |
 1214 | 14 | 01214 |    |    |    | ft2        |
(10 rows)

-- ORDER BY ASC NULLS FIRST options
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
                                                                          QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c6 ASC NULLS FIRST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 15::bigint
(3 rows)

SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
  c1  | c2 |  c3   | c4 | c5 | c6 |     c7     | c8
------+----+-------+----+----+----+------------+----
 1205 |  5 | 01205 |    |    |    | ft2        |
 1206 |  6 | 01206 |    |    |    | ft2        |
 1207 |  7 | 01207 |    |    |    | ft2        |
 1208 |  8 | 01208 |    |    |    | ft2        |
 1209 |  9 | 01209 |    |    |    | ft2        |
 1210 | 10 | 01210 |    |    |    | ft2        |
 1211 | 11 | 01211 |    |    |    | ft2        |
 1212 | 12 | 01212 |    |    |    | ft2        |
 1213 | 13 | 01213 |    |    |    | ft2        |
 1214 | 14 | 01214 |    |    |    | ft2        |
(10 rows)

-- ===================================================================
-- test check constraints
-- ===================================================================
-- Consistent check constraints provide consistent results
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c2positive CHECK (c2 >= 0);
-- YB note: catalog snapshot invalidated, remove pg_sleeps when issue #11554 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

--EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
SELECT count(*) FROM ft1 WHERE c2 < 0;
 count
-------
     0
(1 row)

SET constraint_exclusion = 'on';
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
           QUERY PLAN
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

SELECT count(*) FROM ft1 WHERE c2 < 0;
 count
-------
     0
(1 row)

RESET constraint_exclusion;
-- YB note: catalog snapshot invalidated, remove pg_sleeps when issue #11554 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- check constraint is enforced on the remote side, not locally
INSERT INTO ft1(c1, c2) VALUES(1111, -2);  -- c2positive
ERROR:  new row for relation "T 1" violates check constraint "c2positive"
DETAIL:  Failing row contains (1111, -2, null, null, null, null, ft1       , null).
CONTEXT:  remote SQL command: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
UPDATE ft1 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
ERROR:  new row for relation "T 1" violates check constraint "c2positive"
DETAIL:  Failing row contains (1, -1, 00001_trig_update, 1970-01-02 08:00:00+00, 1970-01-02 00:00:00, 1, 1         , foo).
CONTEXT:  remote SQL command: UPDATE "S 1"."T 1" SET c2 = (- c2) WHERE (("C 1" = 1))
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c2positive;
-- But inconsistent check constraints provide inconsistent results
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c2negative CHECK (c2 < 0);
-- YB note: catalog snapshot invalidated, remove pg_sleeps when issue #11554 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

--EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
SELECT count(*) FROM ft1 WHERE c2 >= 0;
 count
-------
  1136
(1 row)

SET constraint_exclusion = 'on';
--EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
SELECT count(*) FROM ft1 WHERE c2 >= 0;
 count
-------
     0
(1 row)

RESET constraint_exclusion;
-- YB note: catalog snapshot invalidated, remove pg_sleeps when issue #11554 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- local check constraint is not actually enforced
INSERT INTO ft1(c1, c2) VALUES(1111, 2);
UPDATE ft1 SET c2 = c2 + 1 WHERE c1 = 1;
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c2negative;
-- ===================================================================
-- test WITH CHECK OPTION constraints
-- ===================================================================
-- YB note: ERROR:  VIEW WITH CHECK OPTION not supported yet, reenable when supported
CREATE TABLE base_tbl (a int, b int);
ALTER TABLE base_tbl SET (autovacuum_enabled = 'false');
NOTICE:  storage parameters are currently ignored in YugabyteDB
CREATE FOREIGN TABLE foreign_tbl (a int, b int)
  SERVER loopback OPTIONS(table_name 'base_tbl');
CREATE VIEW rw_view AS SELECT * FROM foreign_tbl
  WHERE a < b WITH CHECK OPTION;
ERROR:  VIEW WITH CHECK OPTION not supported yet
LINE 2:   WHERE a < b WITH CHECK OPTION;
                      ^
HINT:  Please report the issue on https://github.com/YugaByte/yugabyte-db/issues
--\d+ rw_view
--INSERT INTO rw_view VALUES (0, 10); -- ok
--INSERT INTO rw_view VALUES (10, 0); -- should fail
--EXPLAIN (VERBOSE, COSTS OFF)
--UPDATE rw_view SET b = 20 WHERE a = 0; -- not pushed down
--UPDATE rw_view SET b = 20 WHERE a = 0; -- ok
--EXPLAIN (VERBOSE, COSTS OFF)
--UPDATE rw_view SET b = -20 WHERE a = 0; -- not pushed down
--UPDATE rw_view SET b = -20 WHERE a = 0; -- should fail
--SELECT * FROM foreign_tbl;
DROP FOREIGN TABLE foreign_tbl CASCADE;
DROP TABLE base_tbl;
-- ===================================================================
-- test serial columns (ie, sequence-based defaults)
-- ===================================================================
create table loc1 (f1 serial, f2 text);
--alter table loc1 set (autovacuum_enabled = 'false');
create foreign table rem1 (f1 serial, f2 text)
  server loopback options(table_name 'loc1');
select pg_catalog.setval('rem1_f1_seq', 10, false);
 setval
--------
     10
(1 row)

insert into loc1(f2) values('hi');
insert into rem1(f2) values('hi remote');
insert into loc1(f2) values('bye');
insert into rem1(f2) values('bye remote');
select * from loc1 order by f1;
 f1 |     f2
----+------------
  1 | hi
  2 | bye
 10 | hi remote
 11 | bye remote
(4 rows)

select * from rem1 order by f1;
 f1 |     f2
----+------------
  1 | hi
  2 | bye
 10 | hi remote
 11 | bye remote
(4 rows)

-- ===================================================================
-- test local triggers
-- ===================================================================
-- YB note: CTID not supported yet, see issue #11419, reenable commented out part below when fixed
-- Trigger functions "borrowed" from triggers regress test.
--CREATE FUNCTION trigger_func() RETURNS trigger LANGUAGE plpgsql AS $$
--BEGIN
--RAISE NOTICE 'trigger_func(%) called: action = %, when = %, level = %',
--TG_ARGV[0], TG_OP, TG_WHEN, TG_LEVEL;
--RETURN NULL;
--END;$$;
--
--CREATE TRIGGER trig_stmt_before BEFORE DELETE OR INSERT OR UPDATE ON rem1
--FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--CREATE TRIGGER trig_stmt_after AFTER DELETE OR INSERT OR UPDATE ON rem1
--FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--
--CREATE OR REPLACE FUNCTION trigger_data()  RETURNS trigger
--LANGUAGE plpgsql AS $$
--
--declare
--oldnew text[];
--relid text;
--    argstr text;
--begin
--
--relid := TG_relid::regclass;
--argstr := '';
--for i in 0 .. TG_nargs - 1 loop
--if i > 0 then
--argstr := argstr || ', ';
--end if;
--argstr := argstr || TG_argv[i];
--end loop;
--
--    RAISE NOTICE '%(%) % % % ON %',
--tg_name, argstr, TG_when, TG_level, TG_OP, relid;
--    oldnew := '{}'::text[];
--if TG_OP != 'INSERT' then
--oldnew := array_append(oldnew, format('OLD: %s', OLD));
--end if;
--
--if TG_OP != 'DELETE' then
--oldnew := array_append(oldnew, format('NEW: %s', NEW));
--end if;
--
--    RAISE NOTICE '%', array_to_string(oldnew, ',');
--
--if TG_OP = 'DELETE' then
--return OLD;
--else
--return NEW;
--end if;
--end;
--$$;
-- Test basic functionality
--CREATE TRIGGER trig_row_before
--BEFORE INSERT OR UPDATE OR DELETE ON rem1
--FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--
--CREATE TRIGGER trig_row_after
--AFTER INSERT OR UPDATE OR DELETE ON rem1
--FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--
--delete from rem1;
--insert into rem1 values(1,'insert');
--update rem1 set f2  = 'update' where f1 = 1;
--update rem1 set f2 = f2 || f2;
-- cleanup
--DROP TRIGGER trig_row_before ON rem1;
--DROP TRIGGER trig_row_after ON rem1;
--DROP TRIGGER trig_stmt_before ON rem1;
--DROP TRIGGER trig_stmt_after ON rem1;
--DELETE from rem1;
-- Test WHEN conditions
--CREATE TRIGGER trig_row_before_insupd
--BEFORE INSERT OR UPDATE ON rem1
--FOR EACH ROW
--WHEN (NEW.f2 like '%update%')
--EXECUTE PROCEDURE trigger_data(23,'skidoo');
--
--CREATE TRIGGER trig_row_after_insupd
--AFTER INSERT OR UPDATE ON rem1
--FOR EACH ROW
--WHEN (NEW.f2 like '%update%')
--EXECUTE PROCEDURE trigger_data(23,'skidoo');
--
---- Insert or update not matching: nothing happens
--INSERT INTO rem1 values(1, 'insert');
--UPDATE rem1 set f2 = 'test';
-- Insert or update matching: triggers are fired
--INSERT INTO rem1 values(2, 'update');
--UPDATE rem1 set f2 = 'update update' where f1 = '2';
--CREATE TRIGGER trig_row_before_delete
--BEFORE DELETE ON rem1
--FOR EACH ROW
--WHEN (OLD.f2 like '%update%')
--EXECUTE PROCEDURE trigger_data(23,'skidoo');
--
--CREATE TRIGGER trig_row_after_delete
--AFTER DELETE ON rem1
--FOR EACH ROW
--WHEN (OLD.f2 like '%update%')
--EXECUTE PROCEDURE trigger_data(23,'skidoo');
--
---- Trigger is fired for f1=2, not for f1=1
--DELETE FROM rem1;
-- cleanup
--DROP TRIGGER trig_row_before_insupd ON rem1;
--DROP TRIGGER trig_row_after_insupd ON rem1;
--DROP TRIGGER trig_row_before_delete ON rem1;
--DROP TRIGGER trig_row_after_delete ON rem1;
-- Test various RETURN statements in BEFORE triggers.
CREATE FUNCTION trig_row_before_insupdate() RETURNS TRIGGER AS $$
  BEGIN
    NEW.f2 := NEW.f2 || ' triggered !';
    RETURN NEW;
  END
$$ language plpgsql;
CREATE TRIGGER trig_row_before_insupd
BEFORE INSERT OR UPDATE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
-- YB note: triggers don't work immediately, remove once #11555 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- The new values should have 'triggered' appended
INSERT INTO rem1 values(1, 'insert');
SELECT * from loc1 ORDER BY f1, f2;
 f1 |         f2
----+--------------------
  1 | hi
  1 | insert triggered !
  2 | bye
 10 | hi remote
 11 | bye remote
(5 rows)

INSERT INTO rem1 values(2, 'insert') RETURNING f2;
         f2
--------------------
 insert triggered !
(1 row)

SELECT * from loc1 ORDER BY f1, f2;
 f1 |         f2
----+--------------------
  1 | hi
  1 | insert triggered !
  2 | bye
  2 | insert triggered !
 10 | hi remote
 11 | bye remote
(6 rows)

UPDATE rem1 set f2 = '';
ERROR:  System column "ctid" is not supported yet
CONTEXT:  remote SQL command: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
SELECT * from loc1 ORDER BY f1, f2;
 f1 |         f2
----+--------------------
  1 | hi
  1 | insert triggered !
  2 | bye
  2 | insert triggered !
 10 | hi remote
 11 | bye remote
(6 rows)

UPDATE rem1 set f2 = 'skidoo' RETURNING f2;
ERROR:  System column "ctid" is not supported yet
CONTEXT:  remote SQL command: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
SELECT * from loc1 ORDER BY f1, f2;
 f1 |         f2
----+--------------------
  1 | hi
  1 | insert triggered !
  2 | bye
  2 | insert triggered !
 10 | hi remote
 11 | bye remote
(6 rows)

DELETE FROM rem1;
-- Add a second trigger, to check that the changes are propagated correctly
-- from trigger to trigger
CREATE TRIGGER trig_row_before_insupd2
BEFORE INSERT OR UPDATE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
-- YB note: triggers don't work immediately, remove once #11555 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

INSERT INTO rem1 values(1, 'insert');
SELECT * from loc1 ORDER BY f1, f2;
 f1 |               f2
----+--------------------------------
  1 | insert triggered ! triggered !
(1 row)

INSERT INTO rem1 values(2, 'insert') RETURNING f2;
               f2
--------------------------------
 insert triggered ! triggered !
(1 row)

SELECT * from loc1 ORDER BY f1, f2;
 f1 |               f2
----+--------------------------------
  1 | insert triggered ! triggered !
  2 | insert triggered ! triggered !
(2 rows)

UPDATE rem1 set f2 = '';
ERROR:  System column "ctid" is not supported yet
CONTEXT:  remote SQL command: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
SELECT * from loc1 ORDER BY f1, f2;
 f1 |               f2
----+--------------------------------
  1 | insert triggered ! triggered !
  2 | insert triggered ! triggered !
(2 rows)

UPDATE rem1 set f2 = 'skidoo' RETURNING f2;
ERROR:  System column "ctid" is not supported yet
CONTEXT:  remote SQL command: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
SELECT * from loc1 ORDER BY f1, f2;
 f1 |               f2
----+--------------------------------
  1 | insert triggered ! triggered !
  2 | insert triggered ! triggered !
(2 rows)

DROP TRIGGER trig_row_before_insupd ON rem1;
DROP TRIGGER trig_row_before_insupd2 ON rem1;
DELETE from rem1;
INSERT INTO rem1 VALUES (1, 'test');
-- Test with a trigger returning NULL
CREATE FUNCTION trig_null() RETURNS TRIGGER AS $$
  BEGIN
    RETURN NULL;
  END
$$ language plpgsql;
CREATE TRIGGER trig_null
BEFORE INSERT OR UPDATE OR DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trig_null();
-- YB note: triggers don't work immediately, remove once #11555 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- Nothing should have changed.
INSERT INTO rem1 VALUES (2, 'test2');
SELECT * from loc1 order by f1;
 f1 |  f2
----+------
  1 | test
(1 row)

-- YB note: CTID not supported yet, see issue #11419, reenable commented out part below when fixed
--UPDATE rem1 SET f2 = 'test2';
SELECT * from loc1 order by f1;
 f1 |  f2
----+------
  1 | test
(1 row)

DELETE from rem1;
ERROR:  System column "ctid" is not supported yet
CONTEXT:  remote SQL command: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
SELECT * from loc1 order by f1;
 f1 |  f2
----+------
  1 | test
(1 row)

DROP TRIGGER trig_null ON rem1;
DELETE from rem1;
-- Test a combination of local and remote triggers
CREATE TRIGGER trig_row_before
BEFORE INSERT OR UPDATE OR DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
ERROR:  function trigger_data() does not exist
CREATE TRIGGER trig_row_after
AFTER INSERT OR UPDATE OR DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
ERROR:  function trigger_data() does not exist
CREATE TRIGGER trig_local_before BEFORE INSERT OR UPDATE ON loc1
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
-- YB note: triggers don't work immediately, remove once #11555 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

INSERT INTO rem1(f2) VALUES ('test');
UPDATE rem1 SET f2 = 'testo';
-- Test returning a system attribute
INSERT INTO rem1(f2) VALUES ('test') RETURNING ctid;
ERROR:  System column "ctid" is not supported yet
CONTEXT:  remote SQL command: INSERT INTO public.loc1(f1, f2) VALUES ($1, $2) RETURNING ctid
-- cleanup
DROP TRIGGER trig_row_before ON rem1;
ERROR:  trigger "trig_row_before" for table "rem1" does not exist
DROP TRIGGER trig_row_after ON rem1;
ERROR:  trigger "trig_row_after" for table "rem1" does not exist
DROP TRIGGER trig_local_before ON loc1;
-- Test direct foreign table modification functionality
-- Test with statement-level triggers
CREATE TRIGGER trig_stmt_before
	BEFORE DELETE OR INSERT OR UPDATE ON rem1
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
ERROR:  function trigger_func() does not exist
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can be pushed down
                        QUERY PLAN
----------------------------------------------------------
 Update on public.rem1
   ->  Foreign Update on public.rem1
         Remote SQL: UPDATE public.loc1 SET f2 = ''::text
(3 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can be pushed down
                 QUERY PLAN
---------------------------------------------
 Delete on public.rem1
   ->  Foreign Delete on public.rem1
         Remote SQL: DELETE FROM public.loc1
(3 rows)

DROP TRIGGER trig_stmt_before ON rem1;
ERROR:  trigger "trig_stmt_before" for table "rem1" does not exist
CREATE TRIGGER trig_stmt_after
	AFTER DELETE OR INSERT OR UPDATE ON rem1
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
ERROR:  function trigger_func() does not exist
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can be pushed down
                        QUERY PLAN
----------------------------------------------------------
 Update on public.rem1
   ->  Foreign Update on public.rem1
         Remote SQL: UPDATE public.loc1 SET f2 = ''::text
(3 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can be pushed down
                 QUERY PLAN
---------------------------------------------
 Delete on public.rem1
   ->  Foreign Delete on public.rem1
         Remote SQL: DELETE FROM public.loc1
(3 rows)

DROP TRIGGER trig_stmt_after ON rem1;
ERROR:  trigger "trig_stmt_after" for table "rem1" does not exist
-- Test with row-level ON INSERT triggers
CREATE TRIGGER trig_row_before_insert
BEFORE INSERT ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
ERROR:  function trigger_data() does not exist
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can be pushed down
                        QUERY PLAN
----------------------------------------------------------
 Update on public.rem1
   ->  Foreign Update on public.rem1
         Remote SQL: UPDATE public.loc1 SET f2 = ''::text
(3 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can be pushed down
                 QUERY PLAN
---------------------------------------------
 Delete on public.rem1
   ->  Foreign Delete on public.rem1
         Remote SQL: DELETE FROM public.loc1
(3 rows)

DROP TRIGGER trig_row_before_insert ON rem1;
ERROR:  trigger "trig_row_before_insert" for table "rem1" does not exist
CREATE TRIGGER trig_row_after_insert
AFTER INSERT ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
ERROR:  function trigger_data() does not exist
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can be pushed down
                        QUERY PLAN
----------------------------------------------------------
 Update on public.rem1
   ->  Foreign Update on public.rem1
         Remote SQL: UPDATE public.loc1 SET f2 = ''::text
(3 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can be pushed down
                 QUERY PLAN
---------------------------------------------
 Delete on public.rem1
   ->  Foreign Delete on public.rem1
         Remote SQL: DELETE FROM public.loc1
(3 rows)

DROP TRIGGER trig_row_after_insert ON rem1;
ERROR:  trigger "trig_row_after_insert" for table "rem1" does not exist
-- Test with row-level ON UPDATE triggers
CREATE TRIGGER trig_row_before_update
BEFORE UPDATE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
ERROR:  function trigger_data() does not exist
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can't be pushed down
                        QUERY PLAN
----------------------------------------------------------
 Update on public.rem1
   ->  Foreign Update on public.rem1
         Remote SQL: UPDATE public.loc1 SET f2 = ''::text
(3 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can be pushed down
                 QUERY PLAN
---------------------------------------------
 Delete on public.rem1
   ->  Foreign Delete on public.rem1
         Remote SQL: DELETE FROM public.loc1
(3 rows)

DROP TRIGGER trig_row_before_update ON rem1;
ERROR:  trigger "trig_row_before_update" for table "rem1" does not exist
CREATE TRIGGER trig_row_after_update
AFTER UPDATE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
ERROR:  function trigger_data() does not exist
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can't be pushed down
                        QUERY PLAN
----------------------------------------------------------
 Update on public.rem1
   ->  Foreign Update on public.rem1
         Remote SQL: UPDATE public.loc1 SET f2 = ''::text
(3 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can be pushed down
                 QUERY PLAN
---------------------------------------------
 Delete on public.rem1
   ->  Foreign Delete on public.rem1
         Remote SQL: DELETE FROM public.loc1
(3 rows)

DROP TRIGGER trig_row_after_update ON rem1;
ERROR:  trigger "trig_row_after_update" for table "rem1" does not exist
-- Test with row-level ON DELETE triggers
CREATE TRIGGER trig_row_before_delete
BEFORE DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
ERROR:  function trigger_data() does not exist
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can be pushed down
                        QUERY PLAN
----------------------------------------------------------
 Update on public.rem1
   ->  Foreign Update on public.rem1
         Remote SQL: UPDATE public.loc1 SET f2 = ''::text
(3 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can't be pushed down
                 QUERY PLAN
---------------------------------------------
 Delete on public.rem1
   ->  Foreign Delete on public.rem1
         Remote SQL: DELETE FROM public.loc1
(3 rows)

DROP TRIGGER trig_row_before_delete ON rem1;
ERROR:  trigger "trig_row_before_delete" for table "rem1" does not exist
CREATE TRIGGER trig_row_after_delete
AFTER DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
ERROR:  function trigger_data() does not exist
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can be pushed down
                        QUERY PLAN
----------------------------------------------------------
 Update on public.rem1
   ->  Foreign Update on public.rem1
         Remote SQL: UPDATE public.loc1 SET f2 = ''::text
(3 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can't be pushed down
                 QUERY PLAN
---------------------------------------------
 Delete on public.rem1
   ->  Foreign Delete on public.rem1
         Remote SQL: DELETE FROM public.loc1
(3 rows)

DROP TRIGGER trig_row_after_delete ON rem1;
ERROR:  trigger "trig_row_after_delete" for table "rem1" does not exist
-- ===================================================================
-- test inheritance features
-- ===================================================================
-- YB note: ERROR:  INHERITS not supported yet, reenable when fixed, see issue #5956
CREATE TABLE a (aa TEXT);
CREATE TABLE loct (aa TEXT, bb TEXT);
--ALTER TABLE a SET (autovacuum_enabled = 'false');
--ALTER TABLE loct SET (autovacuum_enabled = 'false');
CREATE FOREIGN TABLE b (bb TEXT) INHERITS (a)
  SERVER loopback OPTIONS (table_name 'loct');
ERROR:  INHERITS not supported yet
LINE 1: CREATE FOREIGN TABLE b (bb TEXT) INHERITS (a)
                                         ^
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/1129. React with thumbs up to raise its priority
--INSERT INTO a(aa) VALUES('aaa');
--INSERT INTO a(aa) VALUES('aaaa');
--INSERT INTO a(aa) VALUES('aaaaa');
--
--INSERT INTO b(aa) VALUES('bbb');
--INSERT INTO b(aa) VALUES('bbbb');
--INSERT INTO b(aa) VALUES('bbbbb');
--
--SELECT tableoid::regclass, * FROM a;
--SELECT tableoid::regclass, * FROM b;
--SELECT tableoid::regclass, * FROM ONLY a;
--
--UPDATE a SET aa = 'zzzzzz' WHERE aa LIKE 'aaaa%';
--
--SELECT tableoid::regclass, * FROM a;
--SELECT tableoid::regclass, * FROM b;
--SELECT tableoid::regclass, * FROM ONLY a;
--
--UPDATE b SET aa = 'new';
--
--SELECT tableoid::regclass, * FROM a;
--SELECT tableoid::regclass, * FROM b;
--SELECT tableoid::regclass, * FROM ONLY a;
--
--UPDATE a SET aa = 'newtoo';
--
--SELECT tableoid::regclass, * FROM a;
--SELECT tableoid::regclass, * FROM b;
--SELECT tableoid::regclass, * FROM ONLY a;
--
--DELETE FROM a;
--
--SELECT tableoid::regclass, * FROM a;
--SELECT tableoid::regclass, * FROM b;
--SELECT tableoid::regclass, * FROM ONLY a;
DROP TABLE a CASCADE;
DROP TABLE loct;
---- Check SELECT FOR UPDATE/SHARE with an inherited source table
--create table loct1 (f1 int, f2 int, f3 int);
--create table loct2 (f1 int, f2 int, f3 int);
--
--alter table loct1 set (autovacuum_enabled = 'false');
--alter table loct2 set (autovacuum_enabled = 'false');
--
--create table foo (f1 int, f2 int);
--create foreign table foo2 (f3 int) inherits (foo)
--  server loopback options (table_name 'loct1');
--create table bar (f1 int, f2 int);
--create foreign table bar2 (f3 int) inherits (bar)
--  server loopback options (table_name 'loct2');
--
--alter table foo set (autovacuum_enabled = 'false');
--alter table bar set (autovacuum_enabled = 'false');
--
--insert into foo values(1,1);
--insert into foo values(3,3);
--insert into foo2 values(2,2,2);
--insert into foo2 values(4,4,4);
--insert into bar values(1,11);
--insert into bar values(2,22);
--insert into bar values(6,66);
--insert into bar2 values(3,33,33);
--insert into bar2 values(4,44,44);
--insert into bar2 values(7,77,77);
--
--explain (verbose, costs off)
--select * from bar where f1 in (select f1 from foo) for update;
--select * from bar where f1 in (select f1 from foo) for update;
--
--explain (verbose, costs off)
--select * from bar where f1 in (select f1 from foo) for share;
--select * from bar where f1 in (select f1 from foo) for share;
--
---- Check UPDATE with inherited target and an inherited source table
--explain (verbose, costs off)
--update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
--update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
--
--select tableoid::regclass, * from bar order by 1,2;
--
---- Check UPDATE with inherited target and an appendrel subquery
--explain (verbose, costs off)
--update bar set f2 = f2 + 100
--from
--  ( select f1 from foo union all select f1+3 from foo ) ss
--where bar.f1 = ss.f1;
--update bar set f2 = f2 + 100
--from
--  ( select f1 from foo union all select f1+3 from foo ) ss
--where bar.f1 = ss.f1;
--
--select tableoid::regclass, * from bar order by 1,2;
--
---- Test forcing the remote server to produce sorted data for a merge join,
---- but the foreign table is an inheritance child.
--truncate table loct1;
--truncate table only foo;
--\set num_rows_foo 2000
--insert into loct1 select generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2);
--insert into foo select generate_series(1, :num_rows_foo, 2), generate_series(1, :num_rows_foo, 2);
--SET enable_hashjoin to false;
--SET enable_nestloop to false;
--alter foreign table foo2 options (use_remote_estimate 'true');
--create index i_loct1_f1 on loct1(f1);
--create index i_foo_f1 on foo(f1);
--analyze foo;
--analyze loct1;
---- inner join; expressions in the clauses appear in the equivalence class list
--explain (verbose, costs off)
--select foo.f1, loct1.f1 from foo join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
--select foo.f1, loct1.f1 from foo join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
---- outer join; expressions in the clauses do not appear in equivalence class
---- list but no output change as compared to the previous query
--explain (verbose, costs off)
--select foo.f1, loct1.f1 from foo left join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
--select foo.f1, loct1.f1 from foo left join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
--RESET enable_hashjoin;
--RESET enable_nestloop;
--
---- Test that WHERE CURRENT OF is not supported
--begin;
--declare c cursor for select * from bar where f1 = 7;
--fetch from c;
--update bar set f2 = null where current of c;
--rollback;
--
--explain (verbose, costs off)
--delete from foo where f1 < 5 returning *;
--delete from foo where f1 < 5 returning *;
--explain (verbose, costs off)
--update bar set f2 = f2 + 100 returning *;
--update bar set f2 = f2 + 100 returning *;
--
---- Test that UPDATE/DELETE with inherited target works with row-level triggers
--CREATE TRIGGER trig_row_before
--BEFORE UPDATE OR DELETE ON bar2
--FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--
--CREATE TRIGGER trig_row_after
--AFTER UPDATE OR DELETE ON bar2
--FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--
--explain (verbose, costs off)
--update bar set f2 = f2 + 100;
--update bar set f2 = f2 + 100;
--
--explain (verbose, costs off)
--delete from bar where f2 < 400;
--delete from bar where f2 < 400;
--
---- cleanup
--drop table foo cascade;
--drop table bar cascade;
--drop table loct1;
--drop table loct2;
--
---- Test pushing down UPDATE/DELETE joins to the remote server
--create table parent (a int, b text);
--create table loct1 (a int, b text);
--create table loct2 (a int, b text);
--create foreign table remt1 (a int, b text)
--  server loopback options (table_name 'loct1');
--create foreign table remt2 (a int, b text)
--  server loopback options (table_name 'loct2');
--alter foreign table remt1 inherit parent;
--
--insert into remt1 values (1, 'foo');
--insert into remt1 values (2, 'bar');
--insert into remt2 values (1, 'foo');
--insert into remt2 values (2, 'bar');
--
--analyze remt1;
--analyze remt2;
--
--explain (verbose, costs off)
--update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
--update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
--explain (verbose, costs off)
--delete from parent using remt2 where parent.a = remt2.a returning parent;
--delete from parent using remt2 where parent.a = remt2.a returning parent;
--
---- cleanup
--drop foreign table remt1;
--drop foreign table remt2;
--drop table loct1;
--drop table loct2;
--drop table parent;
-- ===================================================================
-- test tuple routing for foreign-table partitions
-- ===================================================================
-- Test insert tuple routing
create table itrtest (a int, b text) partition by list (a);
create table loct1 (a int check (a in (1)), b text);
create foreign table remp1 (a int check (a in (1)), b text) server loopback options (table_name 'loct1');
create table loct2 (a int check (a in (2)), b text);
create foreign table remp2 (b text, a int check (a in (2))) server loopback options (table_name 'loct2');
alter table itrtest attach partition remp1 for values in (1);
alter table itrtest attach partition remp2 for values in (2);
insert into itrtest values (1, 'foo');
insert into itrtest values (1, 'bar') returning *;
 a |  b
---+-----
 1 | bar
(1 row)

insert into itrtest values (2, 'baz');
insert into itrtest values (2, 'qux') returning *;
 a |  b
---+-----
 2 | qux
(1 row)

insert into itrtest values (1, 'test1'), (2, 'test2') returning *;
 a |   b
---+-------
 1 | test1
 2 | test2
(2 rows)

select tableoid::regclass, * FROM itrtest order by 1, 2, 3;
 tableoid | a |   b
----------+---+-------
 remp1    | 1 | bar
 remp1    | 1 | foo
 remp1    | 1 | test1
 remp2    | 2 | baz
 remp2    | 2 | qux
 remp2    | 2 | test2
(6 rows)

select tableoid::regclass, * FROM remp1 order by 1, 2, 3;
 tableoid | a |   b
----------+---+-------
 remp1    | 1 | bar
 remp1    | 1 | foo
 remp1    | 1 | test1
(3 rows)

select tableoid::regclass, * FROM remp2 order by 1, 2, 3;
 tableoid |   b   | a
----------+-------+---
 remp2    | baz   | 2
 remp2    | qux   | 2
 remp2    | test2 | 2
(3 rows)

--delete from itrtest;
-- YB note: Index still exists after aborted unique index creation, see #11424
--create unique index loct1_idx on loct1 (a);
-- DO NOTHING without an inference specification is supported
--insert into itrtest values (1, 'foo') on conflict do nothing returning *;
--insert into itrtest values (1, 'foo') on conflict do nothing returning *;
--
---- But other cases are not supported
--insert into itrtest values (1, 'bar') on conflict (a) do nothing;
--insert into itrtest values (1, 'bar') on conflict (a) do update set b = excluded.b;
--
--select tableoid::regclass, * FROM itrtest;
--delete from itrtest;
--drop index loct1_idx;
-- Test that remote triggers work with insert tuple routing
create function br_insert_trigfunc() returns trigger as $$
begin
	new.b := new.b || ' triggered !';
	return new;
end
$$ language plpgsql;
create trigger loct1_br_insert_trigger before insert on loct1
	for each row execute procedure br_insert_trigfunc();
create trigger loct2_br_insert_trigger before insert on loct2
	for each row execute procedure br_insert_trigfunc();
-- YB note: triggers don't work immediately, remove once #11555 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- The new values are concatenated with ' triggered !'
insert into itrtest values (1, 'foo') returning *;
 a |        b
---+-----------------
 1 | foo triggered !
(1 row)

insert into itrtest values (2, 'qux') returning *;
 a |        b
---+-----------------
 2 | qux triggered !
(1 row)

insert into itrtest values (1, 'test1'), (2, 'test2') returning *;
 a |         b
---+-------------------
 1 | test1 triggered !
 2 | test2 triggered !
(2 rows)

with result as (insert into itrtest values (1, 'test1'), (2, 'test2') returning *) select * from result;
 a |         b
---+-------------------
 1 | test1 triggered !
 2 | test2 triggered !
(2 rows)

drop trigger loct1_br_insert_trigger on loct1;
drop trigger loct2_br_insert_trigger on loct2;
drop table itrtest;
drop table loct1;
drop table loct2;
-- Test update tuple routing
create table utrtest (a int, b text) partition by list (a);
create table loct (a int check (a in (1)), b text);
create foreign table remp (a int check (a in (1)), b text) server loopback options (table_name 'loct');
create table locp (a int check (a in (2)), b text);
alter table utrtest attach partition remp for values in (1);
alter table utrtest attach partition locp for values in (2);
insert into utrtest values (1, 'foo');
insert into utrtest values (2, 'qux');
select tableoid::regclass, * FROM utrtest;
 tableoid | a |  b
----------+---+-----
 remp     | 1 | foo
 locp     | 2 | qux
(2 rows)

select tableoid::regclass, * FROM remp;
 tableoid | a |  b
----------+---+-----
 remp     | 1 | foo
(1 row)

select tableoid::regclass, * FROM locp;
 tableoid | a |  b
----------+---+-----
 locp     | 2 | qux
(1 row)

-- It's not allowed to move a row from a partition that is foreign to another
-- YB note: ERROR:  could not find junk ybctid column
update utrtest set a = 2 where b = 'foo' returning *;
ERROR:  new row for relation "loct" violates check constraint "loct_a_check"
DETAIL:  Failing row contains (2, foo).
CONTEXT:  remote SQL command: UPDATE public.loct SET a = 2 WHERE ((b = 'foo')) RETURNING a, b
-- But the reverse is allowed
--update utrtest set a = 1 where b = 'qux' returning *;
--select tableoid::regclass, * FROM utrtest;
--select tableoid::regclass, * FROM remp;
--select tableoid::regclass, * FROM locp;
-- The executor should not let unexercised FDWs shut down
--update utrtest set a = 1 where b = 'foo';
-- Test that remote triggers work with update tuple routing
--create trigger loct_br_insert_trigger before insert on loct
--for each row execute procedure br_insert_trigfunc();
--delete from utrtest;
--insert into utrtest values (2, 'qux');
-- Check case where the foreign partition is a subplan target rel
--explain (verbose, costs off)
--update utrtest set a = 1 where a = 1 or a = 2 returning *;
-- The new values are concatenated with ' triggered !'
--update utrtest set a = 1 where a = 1 or a = 2 returning *;
--delete from utrtest;
--insert into utrtest values (2, 'qux');
--
---- Check case where the foreign partition isn't a subplan target rel
--explain (verbose, costs off)
--update utrtest set a = 1 where a = 2 returning *;
---- The new values are concatenated with ' triggered !'
--update utrtest set a = 1 where a = 2 returning *;
--
--drop trigger loct_br_insert_trigger on loct;
--
--drop table utrtest;
--drop table loct;
-- Test copy tuple routing
create table ctrtest (a int, b text) partition by list (a);
create table loct1 (a int check (a in (1)), b text);
create foreign table remp1 (a int check (a in (1)), b text) server loopback options (table_name 'loct1');
create table loct2 (a int check (a in (2)), b text);
create foreign table remp2 (b text, a int check (a in (2))) server loopback options (table_name 'loct2');
alter table ctrtest attach partition remp1 for values in (1);
alter table ctrtest attach partition remp2 for values in (2);
copy ctrtest from stdin;
select tableoid::regclass, * FROM ctrtest order by 1, 2, 3;
 tableoid | a |  b
----------+---+-----
 remp1    | 1 | foo
 remp2    | 2 | qux
(2 rows)

select tableoid::regclass, * FROM remp1 order by 1, 2, 3;
 tableoid | a |  b
----------+---+-----
 remp1    | 1 | foo
(1 row)

select tableoid::regclass, * FROM remp2 order by 1, 2, 3;
 tableoid |  b  | a
----------+-----+---
 remp2    | qux | 2
(1 row)

-- Copying into foreign partitions directly should work as well
copy remp1 from stdin;
WARNING:  Batched COPY is not supported on foreign tables. Defaulting to using one transaction for the entire copy.
HINT:  Either copy onto non-temporary table or set rows_per_transaction option to `0` to disable batching and remove this warning.
SELECT relid::regclass, command, yb_status, type, bytes_processed, bytes_total,
          tuples_processed, tuples_excluded FROM pg_stat_progress_copy;
 relid |  command  | yb_status | type | bytes_processed | bytes_total | tuples_processed | tuples_excluded
-------+-----------+-----------+------+-----------------+-------------+------------------+-----------------
 remp1 | COPY FROM | SUCCESS   | PIPE |               6 |           0 |                1 |               0
(1 row)

select tableoid::regclass, * FROM remp1 order by 1, 2, 3;
 tableoid | a |  b
----------+---+-----
 remp1    | 1 | bar
 remp1    | 1 | foo
(2 rows)

drop table ctrtest;
drop table loct1;
drop table loct2;
-- ===================================================================
-- test COPY FROM
-- ===================================================================
create table loc2 (f1 int, f2 text);
alter table loc2 set (autovacuum_enabled = 'false');
NOTICE:  storage parameters are currently ignored in YugabyteDB
create foreign table rem2 (f1 int, f2 text) server loopback options(table_name 'loc2');
-- YB note: catalog snapshot invalidated, remove pg_sleeps when issue #11554 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- Test basic functionality
copy rem2 from stdin;
WARNING:  Batched COPY is not supported on foreign tables. Defaulting to using one transaction for the entire copy.
HINT:  Either copy onto non-temporary table or set rows_per_transaction option to `0` to disable batching and remove this warning.
select * from rem2 order by f1;
 f1 | f2
----+-----
  1 | foo
  2 | bar
(2 rows)

delete from rem2;
-- Test check constraints
alter table loc2 add constraint loc2_f1positive check (f1 >= 0);
alter foreign table rem2 add constraint rem2_f1positive check (f1 >= 0);
-- YB note: constraints don't work immediately, remove pg_sleeps when issue #11598 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- check constraint is enforced on the remote side, not locally
copy rem2 from stdin;
WARNING:  Batched COPY is not supported on foreign tables. Defaulting to using one transaction for the entire copy.
HINT:  Either copy onto non-temporary table or set rows_per_transaction option to `0` to disable batching and remove this warning.
copy rem2 from stdin; -- ERROR
WARNING:  Batched COPY is not supported on foreign tables. Defaulting to using one transaction for the entire copy.
HINT:  Either copy onto non-temporary table or set rows_per_transaction option to `0` to disable batching and remove this warning.
ERROR:  new row for relation "loc2" violates check constraint "loc2_f1positive"
DETAIL:  Failing row contains (-1, xyzzy).
CONTEXT:  remote SQL command: INSERT INTO public.loc2(f1, f2) VALUES ($1, $2)
COPY rem2, line 1: "-1	xyzzy"
select * from rem2 order by f1;
 f1 | f2
----+-----
  1 | foo
  2 | bar
(2 rows)

alter foreign table rem2 drop constraint rem2_f1positive;
alter table loc2 drop constraint loc2_f1positive;
-- YB note: catalog snapshot invalidated, remove pg_sleeps when issue #11554 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

delete from rem2;
-- Test local triggers
create trigger trig_stmt_before before insert on rem2
	for each statement execute procedure trigger_func();
ERROR:  function trigger_func() does not exist
create trigger trig_stmt_after after insert on rem2
	for each statement execute procedure trigger_func();
ERROR:  function trigger_func() does not exist
create trigger trig_row_before before insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
ERROR:  function trigger_data() does not exist
create trigger trig_row_after after insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
ERROR:  function trigger_data() does not exist
-- YB note: triggers don't work immediately, remove once #11555 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

copy rem2 from stdin;
WARNING:  Batched COPY is not supported on foreign tables. Defaulting to using one transaction for the entire copy.
HINT:  Either copy onto non-temporary table or set rows_per_transaction option to `0` to disable batching and remove this warning.
select * from rem2 order by f1;
 f1 | f2
----+-----
  1 | foo
  2 | bar
(2 rows)

drop trigger trig_row_before on rem2;
ERROR:  trigger "trig_row_before" for table "rem2" does not exist
drop trigger trig_row_after on rem2;
ERROR:  trigger "trig_row_after" for table "rem2" does not exist
drop trigger trig_stmt_before on rem2;
ERROR:  trigger "trig_stmt_before" for table "rem2" does not exist
drop trigger trig_stmt_after on rem2;
ERROR:  trigger "trig_stmt_after" for table "rem2" does not exist
delete from rem2;
create trigger trig_row_before_insert before insert on rem2
for each row execute procedure trig_row_before_insupdate();
-- YB note: triggers don't work immediately, remove once #11555 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- The new values are concatenated with ' triggered !'
copy rem2 from stdin;
WARNING:  Batched COPY is not supported on foreign tables. Defaulting to using one transaction for the entire copy.
HINT:  Either copy onto non-temporary table or set rows_per_transaction option to `0` to disable batching and remove this warning.
select * from rem2 order by f1;
 f1 |       f2
----+-----------------
  1 | foo triggered !
  2 | bar triggered !
(2 rows)

drop trigger trig_row_before_insert on rem2;
delete from rem2;
create trigger trig_null before insert on rem2
	for each row execute procedure trig_null();
-- YB note: triggers don't work immediately, remove once #11555 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- Nothing happens
copy rem2 from stdin;
WARNING:  Batched COPY is not supported on foreign tables. Defaulting to using one transaction for the entire copy.
HINT:  Either copy onto non-temporary table or set rows_per_transaction option to `0` to disable batching and remove this warning.
select * from rem2 order by f1;
 f1 | f2
----+----
(0 rows)

drop trigger trig_null on rem2;
delete from rem2;
-- Test remote triggers
create trigger trig_row_before_insert before insert on loc2
	for each row execute procedure trig_row_before_insupdate();
-- YB note: triggers don't work immediately, remove once #11555 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- The new values are concatenated with ' triggered !'
copy rem2 from stdin;
WARNING:  Batched COPY is not supported on foreign tables. Defaulting to using one transaction for the entire copy.
HINT:  Either copy onto non-temporary table or set rows_per_transaction option to `0` to disable batching and remove this warning.
select * from rem2 order by f1;
 f1 |       f2
----+-----------------
  1 | foo triggered !
  2 | bar triggered !
(2 rows)

drop trigger trig_row_before_insert on loc2;
delete from rem2;
create trigger trig_null before insert on loc2
	for each row execute procedure trig_null();
-- YB note: triggers don't work immediately, remove once #11555 is fixed
select pg_sleep(2);
 pg_sleep
----------

(1 row)

-- Nothing happens
copy rem2 from stdin;
WARNING:  Batched COPY is not supported on foreign tables. Defaulting to using one transaction for the entire copy.
HINT:  Either copy onto non-temporary table or set rows_per_transaction option to `0` to disable batching and remove this warning.
select * from rem2 order by f1;
 f1 | f2
----+----
(0 rows)

drop trigger trig_null on loc2;
delete from rem2;
-- Test a combination of local and remote triggers
create trigger rem2_trig_row_before before insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
ERROR:  function trigger_data() does not exist
create trigger rem2_trig_row_after after insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
ERROR:  function trigger_data() does not exist
create trigger loc2_trig_row_before_insert before insert on loc2
	for each row execute procedure trig_row_before_insupdate();
-- YB note: catalog snapshot invalidated, remove pg_sleeps when issue #11554 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

copy rem2 from stdin;
WARNING:  Batched COPY is not supported on foreign tables. Defaulting to using one transaction for the entire copy.
HINT:  Either copy onto non-temporary table or set rows_per_transaction option to `0` to disable batching and remove this warning.
select * from rem2 order by f1;
 f1 |       f2
----+-----------------
  1 | foo triggered !
  2 | bar triggered !
(2 rows)

drop trigger rem2_trig_row_before on rem2;
ERROR:  trigger "rem2_trig_row_before" for table "rem2" does not exist
drop trigger rem2_trig_row_after on rem2;
ERROR:  trigger "rem2_trig_row_after" for table "rem2" does not exist
drop trigger loc2_trig_row_before_insert on loc2;
delete from rem2;
-- test COPY FROM with foreign table created in the same transaction
create table loc3 (f1 int, f2 text);
begin;
create foreign table rem3 (f1 int, f2 text)
	server loopback options(table_name 'loc3');
copy rem3 from stdin;
WARNING:  Batched COPY is not supported on foreign tables. Defaulting to using one transaction for the entire copy.
HINT:  Either copy onto non-temporary table or set rows_per_transaction option to `0` to disable batching and remove this warning.
commit;
select * from rem3 order by f1;
 f1 | f2
----+-----
  1 | foo
  2 | bar
(2 rows)

drop foreign table rem3;
drop table loc3;
-- ===================================================================
-- test IMPORT FOREIGN SCHEMA
-- ===================================================================
CREATE SCHEMA import_source;
CREATE TABLE import_source.t1 (c1 int, c2 varchar NOT NULL);
CREATE TABLE import_source.t2 (c1 int default 42, c2 varchar NULL, c3 text collate "POSIX");
CREATE TYPE typ1 AS (m1 int, m2 varchar);
CREATE TABLE import_source.t3 (c1 timestamptz default now(), c2 typ1);
CREATE TABLE import_source."x 4" (c1 float8, "C 2" text, c3 varchar(42));
CREATE TABLE import_source."x 5" (c1 float8);
ALTER TABLE import_source."x 5" DROP COLUMN c1;
CREATE TABLE import_source.t4 (c1 int) PARTITION BY RANGE (c1);
CREATE TABLE import_source.t4_part PARTITION OF import_source.t4
  FOR VALUES FROM (1) TO (100);
CREATE SCHEMA import_dest1;
IMPORT FOREIGN SCHEMA import_source FROM SERVER loopback INTO import_dest1;
\det+ import_dest1.*
                                     List of foreign tables
    Schema    | Table |  Server  |                   FDW options                   | Description
--------------+-------+----------+-------------------------------------------------+-------------
 import_dest1 | t1    | loopback | (schema_name 'import_source', table_name 't1')  |
 import_dest1 | t2    | loopback | (schema_name 'import_source', table_name 't2')  |
 import_dest1 | t3    | loopback | (schema_name 'import_source', table_name 't3')  |
 import_dest1 | t4    | loopback | (schema_name 'import_source', table_name 't4')  |
 import_dest1 | x 4   | loopback | (schema_name 'import_source', table_name 'x 4') |
 import_dest1 | x 5   | loopback | (schema_name 'import_source', table_name 'x 5') |
(6 rows)

\d import_dest1.*
                         Foreign table "import_dest1.t1"
 Column |       Type        | Collation | Nullable | Default |    FDW options
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          |         | (column_name 'c1')
 c2     | character varying |           | not null |         | (column_name 'c2')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't1')

                         Foreign table "import_dest1.t2"
 Column |       Type        | Collation | Nullable | Default |    FDW options
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          |         | (column_name 'c1')
 c2     | character varying |           |          |         | (column_name 'c2')
 c3     | text              | POSIX     |          |         | (column_name 'c3')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't2')

                             Foreign table "import_dest1.t3"
 Column |           Type           | Collation | Nullable | Default |    FDW options
--------+--------------------------+-----------+----------+---------+--------------------
 c1     | timestamp with time zone |           |          |         | (column_name 'c1')
 c2     | typ1                     |           |          |         | (column_name 'c2')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't3')

                    Foreign table "import_dest1.t4"
 Column |  Type   | Collation | Nullable | Default |    FDW options
--------+---------+-----------+----------+---------+--------------------
 c1     | integer |           |          |         | (column_name 'c1')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't4')

                           Foreign table "import_dest1.x 4"
 Column |         Type          | Collation | Nullable | Default |     FDW options
--------+-----------------------+-----------+----------+---------+---------------------
 c1     | double precision      |           |          |         | (column_name 'c1')
 C 2    | text                  |           |          |         | (column_name 'C 2')
 c3     | character varying(42) |           |          |         | (column_name 'c3')
Server: loopback
FDW options: (schema_name 'import_source', table_name 'x 4')

               Foreign table "import_dest1.x 5"
 Column | Type | Collation | Nullable | Default | FDW options
--------+------+-----------+----------+---------+-------------
Server: loopback
FDW options: (schema_name 'import_source', table_name 'x 5')

-- Options
CREATE SCHEMA import_dest2;
IMPORT FOREIGN SCHEMA import_source FROM SERVER loopback INTO import_dest2
  OPTIONS (import_default 'true');
\det+ import_dest2.*
                                     List of foreign tables
    Schema    | Table |  Server  |                   FDW options                   | Description
--------------+-------+----------+-------------------------------------------------+-------------
 import_dest2 | t1    | loopback | (schema_name 'import_source', table_name 't1')  |
 import_dest2 | t2    | loopback | (schema_name 'import_source', table_name 't2')  |
 import_dest2 | t3    | loopback | (schema_name 'import_source', table_name 't3')  |
 import_dest2 | t4    | loopback | (schema_name 'import_source', table_name 't4')  |
 import_dest2 | x 4   | loopback | (schema_name 'import_source', table_name 'x 4') |
 import_dest2 | x 5   | loopback | (schema_name 'import_source', table_name 'x 5') |
(6 rows)

\d import_dest2.*
                         Foreign table "import_dest2.t1"
 Column |       Type        | Collation | Nullable | Default |    FDW options
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          |         | (column_name 'c1')
 c2     | character varying |           | not null |         | (column_name 'c2')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't1')

                         Foreign table "import_dest2.t2"
 Column |       Type        | Collation | Nullable | Default |    FDW options
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          | 42      | (column_name 'c1')
 c2     | character varying |           |          |         | (column_name 'c2')
 c3     | text              | POSIX     |          |         | (column_name 'c3')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't2')

                             Foreign table "import_dest2.t3"
 Column |           Type           | Collation | Nullable | Default |    FDW options
--------+--------------------------+-----------+----------+---------+--------------------
 c1     | timestamp with time zone |           |          | now()   | (column_name 'c1')
 c2     | typ1                     |           |          |         | (column_name 'c2')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't3')

                    Foreign table "import_dest2.t4"
 Column |  Type   | Collation | Nullable | Default |    FDW options
--------+---------+-----------+----------+---------+--------------------
 c1     | integer |           |          |         | (column_name 'c1')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't4')

                           Foreign table "import_dest2.x 4"
 Column |         Type          | Collation | Nullable | Default |     FDW options
--------+-----------------------+-----------+----------+---------+---------------------
 c1     | double precision      |           |          |         | (column_name 'c1')
 C 2    | text                  |           |          |         | (column_name 'C 2')
 c3     | character varying(42) |           |          |         | (column_name 'c3')
Server: loopback
FDW options: (schema_name 'import_source', table_name 'x 4')

               Foreign table "import_dest2.x 5"
 Column | Type | Collation | Nullable | Default | FDW options
--------+------+-----------+----------+---------+-------------
Server: loopback
FDW options: (schema_name 'import_source', table_name 'x 5')

CREATE SCHEMA import_dest3;
IMPORT FOREIGN SCHEMA import_source FROM SERVER loopback INTO import_dest3
  OPTIONS (import_collate 'false', import_not_null 'false');
\det+ import_dest3.*
                                     List of foreign tables
    Schema    | Table |  Server  |                   FDW options                   | Description
--------------+-------+----------+-------------------------------------------------+-------------
 import_dest3 | t1    | loopback | (schema_name 'import_source', table_name 't1')  |
 import_dest3 | t2    | loopback | (schema_name 'import_source', table_name 't2')  |
 import_dest3 | t3    | loopback | (schema_name 'import_source', table_name 't3')  |
 import_dest3 | t4    | loopback | (schema_name 'import_source', table_name 't4')  |
 import_dest3 | x 4   | loopback | (schema_name 'import_source', table_name 'x 4') |
 import_dest3 | x 5   | loopback | (schema_name 'import_source', table_name 'x 5') |
(6 rows)

\d import_dest3.*
                         Foreign table "import_dest3.t1"
 Column |       Type        | Collation | Nullable | Default |    FDW options
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          |         | (column_name 'c1')
 c2     | character varying |           |          |         | (column_name 'c2')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't1')

                         Foreign table "import_dest3.t2"
 Column |       Type        | Collation | Nullable | Default |    FDW options
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          |         | (column_name 'c1')
 c2     | character varying |           |          |         | (column_name 'c2')
 c3     | text              |           |          |         | (column_name 'c3')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't2')

                             Foreign table "import_dest3.t3"
 Column |           Type           | Collation | Nullable | Default |    FDW options
--------+--------------------------+-----------+----------+---------+--------------------
 c1     | timestamp with time zone |           |          |         | (column_name 'c1')
 c2     | typ1                     |           |          |         | (column_name 'c2')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't3')

                    Foreign table "import_dest3.t4"
 Column |  Type   | Collation | Nullable | Default |    FDW options
--------+---------+-----------+----------+---------+--------------------
 c1     | integer |           |          |         | (column_name 'c1')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't4')

                           Foreign table "import_dest3.x 4"
 Column |         Type          | Collation | Nullable | Default |     FDW options
--------+-----------------------+-----------+----------+---------+---------------------
 c1     | double precision      |           |          |         | (column_name 'c1')
 C 2    | text                  |           |          |         | (column_name 'C 2')
 c3     | character varying(42) |           |          |         | (column_name 'c3')
Server: loopback
FDW options: (schema_name 'import_source', table_name 'x 4')

               Foreign table "import_dest3.x 5"
 Column | Type | Collation | Nullable | Default | FDW options
--------+------+-----------+----------+---------+-------------
Server: loopback
FDW options: (schema_name 'import_source', table_name 'x 5')

-- Check LIMIT TO and EXCEPT
CREATE SCHEMA import_dest4;
IMPORT FOREIGN SCHEMA import_source LIMIT TO (t1, nonesuch)
  FROM SERVER loopback INTO import_dest4;
\det+ import_dest4.*
                                     List of foreign tables
    Schema    | Table |  Server  |                  FDW options                   | Description
--------------+-------+----------+------------------------------------------------+-------------
 import_dest4 | t1    | loopback | (schema_name 'import_source', table_name 't1') |
(1 row)

IMPORT FOREIGN SCHEMA import_source EXCEPT (t1, "x 4", nonesuch)
  FROM SERVER loopback INTO import_dest4;
\det+ import_dest4.*
                                     List of foreign tables
    Schema    | Table |  Server  |                   FDW options                   | Description
--------------+-------+----------+-------------------------------------------------+-------------
 import_dest4 | t1    | loopback | (schema_name 'import_source', table_name 't1')  |
 import_dest4 | t2    | loopback | (schema_name 'import_source', table_name 't2')  |
 import_dest4 | t3    | loopback | (schema_name 'import_source', table_name 't3')  |
 import_dest4 | t4    | loopback | (schema_name 'import_source', table_name 't4')  |
 import_dest4 | x 5   | loopback | (schema_name 'import_source', table_name 'x 5') |
(5 rows)

-- Assorted error cases
IMPORT FOREIGN SCHEMA import_source FROM SERVER loopback INTO import_dest4;
ERROR:  relation "t1" already exists
CONTEXT:  importing foreign table "t1"
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER loopback INTO import_dest4;
ERROR:  schema "nonesuch" is not present on foreign server "loopback"
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER loopback INTO notthere;
ERROR:  schema "notthere" does not exist
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER nowhere INTO notthere;
ERROR:  server "nowhere" does not exist
-- Check case of a type present only on the remote server.
-- We can fake this by dropping the type locally in our transaction.
CREATE TYPE "Colors" AS ENUM ('red', 'green', 'blue');
CREATE TABLE import_source.t5 (c1 int, c2 text collate "C", "Col" "Colors");
CREATE SCHEMA import_dest5;
BEGIN;
DROP TYPE "Colors" CASCADE;
NOTICE:  drop cascades to column Col of table import_source.t5
-- YB note: type dropping in transaction is not respected, should error when issue #11742 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

IMPORT FOREIGN SCHEMA import_source LIMIT TO (t5)
  FROM SERVER loopback INTO import_dest5;  -- ERROR
ROLLBACK;
BEGIN;
CREATE SERVER fetch101 FOREIGN DATA WRAPPER postgres_fdw OPTIONS( fetch_size '101' );
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=101'];
 count
-------
     1
(1 row)

ALTER SERVER fetch101 OPTIONS( SET fetch_size '202' );
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=101'];
 count
-------
     0
(1 row)

SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=202'];
 count
-------
     1
(1 row)

CREATE FOREIGN TABLE table30000 ( x int ) SERVER fetch101 OPTIONS ( fetch_size '30000' );
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30000'::regclass
AND ftoptions @> array['fetch_size=30000'];
 count
-------
     1
(1 row)

-- YB note: ERROR:  ALTER TABLE not supported yet
ALTER FOREIGN TABLE table30000 OPTIONS ( SET fetch_size '60000');
ERROR:  ALTER TABLE not supported yet
LINE 1: ALTER FOREIGN TABLE table30000 OPTIONS ( SET fetch_size '600...
                                       ^
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/1124. React with thumbs up to raise its priority
--SELECT COUNT(*)
--FROM pg_foreign_table
--WHERE ftrelid = 'table30000'::regclass
--AND ftoptions @> array['fetch_size=30000'];
--
--SELECT COUNT(*)
--FROM pg_foreign_table
--WHERE ftrelid = 'table30000'::regclass
--AND ftoptions @> array['fetch_size=60000'];
ROLLBACK;
-- ===================================================================
-- test partitionwise joins
-- ===================================================================
SET enable_partitionwise_join=on;
CREATE TABLE fprt1 (a int, b int, c varchar) PARTITION BY RANGE(a);
-- YB note: ERROR:  LIKE clause not supported yet
--CREATE TABLE fprt1_p1 (LIKE fprt1);
--CREATE TABLE fprt1_p2 (LIKE fprt1);
CREATE TABLE fprt1_p1 (a int, b int, c varchar);
CREATE TABLE fprt1_p2 (a int, b int, c varchar);
--ALTER TABLE fprt1_p1 SET (autovacuum_enabled = 'false');
--ALTER TABLE fprt1_p2 SET (autovacuum_enabled = 'false');
INSERT INTO fprt1_p1 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(0, 249, 2) i;
INSERT INTO fprt1_p2 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(250, 499, 2) i;
CREATE FOREIGN TABLE ftprt1_p1 PARTITION OF fprt1 FOR VALUES FROM (0) TO (250)
	SERVER loopback OPTIONS (table_name 'fprt1_p1', use_remote_estimate 'true');
CREATE FOREIGN TABLE ftprt1_p2 PARTITION OF fprt1 FOR VALUES FROM (250) TO (500)
	SERVER loopback OPTIONS (TABLE_NAME 'fprt1_p2');
ANALYZE fprt1;
ANALYZE fprt1_p1;
ANALYZE fprt1_p2;
CREATE TABLE fprt2 (a int, b int, c varchar) PARTITION BY RANGE(b);
-- YB note: ERROR:  LIKE clause not supported yet
CREATE TABLE fprt2_p1 (a int, b int, c varchar);
CREATE TABLE fprt2_p2 (a int, b int, c varchar);
--ALTER TABLE fprt2_p1 SET (autovacuum_enabled = 'false');
--ALTER TABLE fprt2_p2 SET (autovacuum_enabled = 'false');
INSERT INTO fprt2_p1 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(0, 249, 3) i;
INSERT INTO fprt2_p2 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(250, 499, 3) i;
CREATE FOREIGN TABLE ftprt2_p1 (b int, c varchar, a int)
SERVER loopback OPTIONS (table_name 'fprt2_p1', use_remote_estimate 'true');
ALTER TABLE fprt2 ATTACH PARTITION ftprt2_p1 FOR VALUES FROM (0) TO (250);
CREATE FOREIGN TABLE ftprt2_p2 PARTITION OF fprt2 FOR VALUES FROM (250) TO (500)
SERVER loopback OPTIONS (table_name 'fprt2_p2', use_remote_estimate 'true');
select pg_sleep(1);
 pg_sleep
----------

(1 row)

ANALYZE fprt2;
ANALYZE fprt2_p1;
ANALYZE fprt2_p2;
-- YB note: catalog snapshot invalidated, remove pg_sleeps when issue #11554 is fixed
select pg_sleep(1);
 pg_sleep
----------

(1 row)

-- inner join three tables
--EXPLAIN (COSTS OFF)
--SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
  a  |  b  |  c
-----+-----+------
   0 |   0 | 0000
 150 | 150 | 0003
 250 | 250 | 0005
 400 | 400 | 0008
(4 rows)

-- left outer join + nullable clasue
--EXPLAIN (COSTS OFF)
--SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
 a | b |  c
---+---+------
 0 | 0 | 0000
 2 |   |
 4 |   |
 6 | 6 | 0000
 8 |   |
(5 rows)

-- with whole-row reference; partitionwise join does not apply
EXPLAIN (COSTS OFF)
SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
                       QUERY PLAN
---------------------------------------------------------
 Sort
   Sort Key: ((t1.*)::fprt1), ((t2.*)::fprt2)
   ->  Hash Full Join
         Hash Cond: (t2.b = t1.a)
         ->  Append
               ->  Foreign Scan on ftprt2_p1 t2_1
                     Remote Filter: ((b % 25) = 0)
               ->  Foreign Scan on ftprt2_p2 t2_2
                     Remote Filter: ((b % 25) = 0)
         ->  Hash
               ->  Append
                     ->  Foreign Scan on ftprt1_p1 t1_1
                           Remote Filter: ((a % 25) = 0)
                     ->  Foreign Scan on ftprt1_p2 t1_2
                           Remote Filter: ((a % 25) = 0)
(15 rows)

SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
       wr       |       wr
----------------+----------------
 (0,0,0000)     | (0,0,0000)
 (50,50,0001)   |
 (100,100,0002) |
 (150,150,0003) | (150,150,0003)
 (200,200,0004) |
 (250,250,0005) | (250,250,0005)
 (300,300,0006) |
 (350,350,0007) |
 (400,400,0008) | (400,400,0008)
 (450,450,0009) |
                | (75,75,0001)
                | (225,225,0004)
                | (325,325,0006)
                | (475,475,0009)
(14 rows)

-- join with lateral reference
--EXPLAIN (COSTS OFF)
--SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
  a  |  b
-----+-----
   0 |   0
 150 | 150
 250 | 250
 400 | 400
(4 rows)

-- with PHVs, partitionwise join selected but no join pushdown
EXPLAIN (COSTS OFF)
SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
                        QUERY PLAN
-----------------------------------------------------------
 Sort
   Sort Key: fprt1.a, fprt2.b
   ->  Append
         ->  Hash Full Join
               Hash Cond: (fprt1_1.a = fprt2_1.b)
               ->  Foreign Scan on ftprt1_p1 fprt1_1
                     Remote Filter: ((a % 25) = 0)
               ->  Hash
                     ->  Foreign Scan on ftprt2_p1 fprt2_1
                           Remote Filter: ((b % 25) = 0)
         ->  Hash Full Join
               Hash Cond: (fprt2_2.b = fprt1_2.a)
               ->  Foreign Scan on ftprt2_p2 fprt2_2
                     Remote Filter: ((b % 25) = 0)
               ->  Hash
                     ->  Foreign Scan on ftprt1_p2 fprt1_2
                           Remote Filter: ((a % 25) = 0)
(17 rows)

SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
  a  |  phv   |  b  |  phv
-----+--------+-----+--------
   0 | t1_phv |   0 | t2_phv
  50 | t1_phv |     |
 100 | t1_phv |     |
 150 | t1_phv | 150 | t2_phv
 200 | t1_phv |     |
 250 | t1_phv | 250 | t2_phv
 300 | t1_phv |     |
 350 | t1_phv |     |
 400 | t1_phv | 400 | t2_phv
 450 | t1_phv |     |
     |        |  75 | t2_phv
     |        | 225 | t2_phv
     |        | 325 | t2_phv
     |        | 475 | t2_phv
(14 rows)

-- test FOR UPDATE; partitionwise join does not apply
--EXPLAIN (COSTS OFF)
--SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
-- YB note: Segmentation fault in MakeExpandedObjectReadOnlyInternal(), issue #11426
--SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
RESET enable_partitionwise_join;
-- ===================================================================
-- test partitionwise aggregates
-- ===================================================================
CREATE TABLE pagg_tab (a int, b int, c text) PARTITION BY RANGE(a);
-- YB note: ERROR:  LIKE clause not supported yet
CREATE TABLE pagg_tab_p1 (a int, b int, c text);
CREATE TABLE pagg_tab_p2 (a int, b int, c text);
CREATE TABLE pagg_tab_p3 (a int, b int, c text);
INSERT INTO pagg_tab_p1 SELECT i % 30, i % 50, to_char(i/30, 'FM0000') FROM generate_series(1, 3000) i WHERE (i % 30) < 10;
INSERT INTO pagg_tab_p2 SELECT i % 30, i % 50, to_char(i/30, 'FM0000') FROM generate_series(1, 3000) i WHERE (i % 30) < 20 and (i % 30) >= 10;
INSERT INTO pagg_tab_p3 SELECT i % 30, i % 50, to_char(i/30, 'FM0000') FROM generate_series(1, 3000) i WHERE (i % 30) < 30 and (i % 30) >= 20;
-- Create foreign partitions
CREATE FOREIGN TABLE fpagg_tab_p1 PARTITION OF pagg_tab FOR VALUES FROM (0) TO (10) SERVER loopback OPTIONS (table_name 'pagg_tab_p1');
CREATE FOREIGN TABLE fpagg_tab_p2 PARTITION OF pagg_tab FOR VALUES FROM (10) TO (20) SERVER loopback OPTIONS (table_name 'pagg_tab_p2');;
CREATE FOREIGN TABLE fpagg_tab_p3 PARTITION OF pagg_tab FOR VALUES FROM (20) TO (30) SERVER loopback OPTIONS (table_name 'pagg_tab_p3');;
ANALYZE pagg_tab;
ANALYZE fpagg_tab_p1;
ANALYZE fpagg_tab_p2;
ANALYZE fpagg_tab_p3;
-- When GROUP BY clause matches with PARTITION KEY.
-- Plan with partitionwise aggregates is disabled
SET enable_partitionwise_aggregate TO false;
EXPLAIN (COSTS OFF)
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                        QUERY PLAN
-----------------------------------------------------------
 Sort
   Sort Key: pagg_tab.a
   ->  HashAggregate
         Group Key: pagg_tab.a
         Filter: (avg(pagg_tab.b) < '22'::numeric)
         ->  Append
               ->  Foreign Scan on fpagg_tab_p1 pagg_tab_1
               ->  Foreign Scan on fpagg_tab_p2 pagg_tab_2
               ->  Foreign Scan on fpagg_tab_p3 pagg_tab_3
(9 rows)

-- Plan with partitionwise aggregates is enabled
SET enable_partitionwise_aggregate TO true;
--EXPLAIN (COSTS OFF)
--SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
 a  | sum  | min | count
----+------+-----+-------
  0 | 2000 |   0 |   100
  1 | 2100 |   1 |   100
 10 | 2000 |   0 |   100
 11 | 2100 |   1 |   100
 20 | 2000 |   0 |   100
 21 | 2100 |   1 |   100
(6 rows)

-- Check with whole-row reference
-- Should have all the columns in the target list for the given relation
EXPLAIN (VERBOSE, COSTS OFF)
SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                               QUERY PLAN
------------------------------------------------------------------------
 Sort
   Output: t1.a, (count(((t1.*)::pagg_tab)))
   Sort Key: t1.a
   ->  Append
         ->  HashAggregate
               Output: t1.a, count(((t1.*)::pagg_tab))
               Group Key: t1.a
               Filter: (avg(t1.b) < '22'::numeric)
               ->  Foreign Scan on public.fpagg_tab_p1 t1
                     Output: t1.a, t1.*, t1.b
                     Remote SQL: SELECT a, b, c FROM public.pagg_tab_p1
         ->  HashAggregate
               Output: t1_1.a, count(((t1_1.*)::pagg_tab))
               Group Key: t1_1.a
               Filter: (avg(t1_1.b) < '22'::numeric)
               ->  Foreign Scan on public.fpagg_tab_p2 t1_1
                     Output: t1_1.a, t1_1.*, t1_1.b
                     Remote SQL: SELECT a, b, c FROM public.pagg_tab_p2
         ->  HashAggregate
               Output: t1_2.a, count(((t1_2.*)::pagg_tab))
               Group Key: t1_2.a
               Filter: (avg(t1_2.b) < '22'::numeric)
               ->  Foreign Scan on public.fpagg_tab_p3 t1_2
                     Output: t1_2.a, t1_2.*, t1_2.b
                     Remote SQL: SELECT a, b, c FROM public.pagg_tab_p3
(25 rows)

SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
 a  | count
----+-------
  0 |   100
  1 |   100
 10 |   100
 11 |   100
 20 |   100
 21 |   100
(6 rows)

-- When GROUP BY clause does not match with PARTITION KEY.
EXPLAIN (COSTS OFF)
SELECT b, avg(a), max(a), count(*) FROM pagg_tab GROUP BY b HAVING sum(a) < 700 ORDER BY 1;
                           QUERY PLAN
-----------------------------------------------------------------
 Sort
   Sort Key: pagg_tab.b
   ->  Finalize HashAggregate
         Group Key: pagg_tab.b
         Filter: (sum(pagg_tab.a) < 700)
         ->  Append
               ->  Partial HashAggregate
                     Group Key: pagg_tab.b
                     ->  Foreign Scan on fpagg_tab_p1 pagg_tab
               ->  Partial HashAggregate
                     Group Key: pagg_tab_1.b
                     ->  Foreign Scan on fpagg_tab_p2 pagg_tab_1
               ->  Partial HashAggregate
                     Group Key: pagg_tab_2.b
                     ->  Foreign Scan on fpagg_tab_p3 pagg_tab_2
(15 rows)

-- Clean-up
RESET enable_partitionwise_aggregate;
