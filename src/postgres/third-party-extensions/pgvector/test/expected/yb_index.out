CREATE TABLE items (id bigserial PRIMARY KEY, embedding vector(3)) SPLIT INTO 1 TABLETS;
CREATE INDEX ON items USING ybdummyann (embedding vector_l2_ops);
WARNING:  ybdummyann is meant for internal-testing only and does not yield ordered results
INSERT INTO items VALUES (1, '[1.0, 0.4, 0.3]');
INSERT INTO items VALUES (2, '[0.001, 0.432, 0.32]');
\d items
                               Table "public.items"
  Column   |   Type    | Collation | Nullable |              Default
-----------+-----------+-----------+----------+-----------------------------------
 id        | bigint    |           | not null | nextval('items_id_seq'::regclass)
 embedding | vector(3) |           |          |
Indexes:
    "items_pkey" PRIMARY KEY, lsm (id HASH)
    "items_embedding_idx" ybdummyann (embedding)

EXPLAIN (COSTS OFF) SELECT * FROM items ORDER BY embedding <-> '[1.0, 0.4, 0.3]' LIMIT 5;
                       QUERY PLAN
---------------------------------------------------------
 Limit
   ->  Index Scan using items_embedding_idx on items
         Order By: (embedding <-> '[1,0.4,0.3]'::vector)
(3 rows)

SELECT * FROM items ORDER BY embedding <-> '[1.0, 0.4, 0.3]' LIMIT 5;
 id |     embedding
----+--------------------
  1 | [1,0.4,0.3]
  2 | [0.001,0.432,0.32]
(2 rows)

EXPLAIN (COSTS OFF) SELECT embedding FROM items ORDER BY embedding <-> '[1.0, 0.4, 0.3]' LIMIT 5;
                        QUERY PLAN
----------------------------------------------------------
 Limit
   ->  Index Only Scan using items_embedding_idx on items
         Order By: (embedding <-> '[1,0.4,0.3]'::vector)
(3 rows)

SELECT embedding FROM items ORDER BY embedding <-> '[1.0, 0.4, 0.3]' LIMIT 5;
     embedding
--------------------
 [1,0.4,0.3]
 [0.001,0.432,0.32]
(2 rows)

DELETE FROM items WHERE id = 1;
SELECT * FROM items ORDER BY embedding <-> '[1.0, 0.4, 0.3]' LIMIT 5;
 id |     embedding
----+--------------------
  2 | [0.001,0.432,0.32]
(1 row)

DROP TABLE items;
CREATE TABLE itemmultitablets (id serial PRIMARY KEY, embedding vector(3)) SPLIT INTO 2 TABLETS;
-- Should not work on a table with multiple tablets.
CREATE INDEX ON items USING ybhnsw (embedding vector_l2_ops);
ERROR:  relation "items" does not exist
-- Create a table with a vector column of size 10.
CREATE TABLE items (id serial PRIMARY KEY, embedding vector(10)) SPLIT INTO 1 TABLETS;
-- Does not order results across tablets yet.
CREATE INDEX ON items USING ybhnsw (embedding vector_l2_ops);
-- Insert 30 rows of sample data with embeddings having float values between 0 and 1.
INSERT INTO items (embedding) VALUES
-- Base vector and very close neighbors (unique tiny differences)
('[1,1,1,1,1,1,1,1,1,1]'),
('[1,1,1,1,1,1,1,1,1,1.1]'),
('[1,1,1,1,1,1,1,1,1,1.3]'),
('[1,1,1,1,1,1,1,1,1,1.5]'),
-- Single dimension variations
('[1,1,1,1,1,1,1,1.7,1,1]'),
('[1,1,1,1,1,1.9,1,1,1,1]'),
('[1,1,1,2.1,1,1,1,1,1,1]'),
('[2.3,1,1,1,1,1,1,1,1,1]'),
-- Two dimension variations
('[2,2.5,1,1,1,1,1,1,1,1]'),
('[1,1,2.7,2.8,1,1,1,1,1,1]'),
('[1,1,1,1,2.9,3,1,1,1,1]'),
('[1,1,1,1,1,1,3.1,3.2,1,1]'),
-- Three dimension variations
('[3.3,3.4,3.5,1,1,1,1,1,1,1]'),
('[1,1,1,3.6,3.7,3.8,1,1,1,1]'),
('[1,1,1,1,1,1,3.9,4,4.1,1]'),
-- Larger differences in various positions
('[4.2,1,1,1,1,1,1,1,1,1]'),
('[1,4.4,1,1,1,1,1,1,1,1]'),
('[1,1,4.6,1,1,1,1,1,1,1]'),
('[1,1,1,4.8,1,1,1,1,1,1]'),
-- Multiple large differences
('[5,5.1,1,1,1,1,1,1,1,1]'),
('[1,1,5.2,5.3,1,1,1,1,1,1]'),
('[1,1,1,1,5.4,5.5,1,1,1,1]'),
('[1,1,1,1,1,1,5.6,5.7,1,1]'),
('[1,1,1,1,1,1,1,1,5.8,5.9]'),
-- Extreme outliers
('[6,1,1,1,1,1,1,1,1,1]'),
('[7,7.1,1,1,1,1,1,1,1,1]'),
('[8,8.1,8.2,1,1,1,1,1,1,1]'),
('[1,1,1,1,1,1,1,1,9,9.1]'),
('[10,10,10,10,10,1,1,1,1,1]');
-- Reference query.
/*+SeqScan(items)*/ EXPLAIN (COSTS OFF) SELECT * FROM items ORDER BY embedding <-> '[1,1,1,1,1,1,1,1,1,1]';
                          QUERY PLAN
---------------------------------------------------------------
 Sort
   Sort Key: ((embedding <-> '[1,1,1,1,1,1,1,1,1,1]'::vector))
   ->  Seq Scan on items
(3 rows)

/*+SeqScan(items)*/ SELECT * FROM items ORDER BY embedding <-> '[1,1,1,1,1,1,1,1,1,1]';
 id |          embedding
----+-----------------------------
  1 | [1,1,1,1,1,1,1,1,1,1]
  2 | [1,1,1,1,1,1,1,1,1,1.1]
  3 | [1,1,1,1,1,1,1,1,1,1.3]
  4 | [1,1,1,1,1,1,1,1,1,1.5]
  5 | [1,1,1,1,1,1,1,1.7,1,1]
  6 | [1,1,1,1,1,1.9,1,1,1,1]
  7 | [1,1,1,2.1,1,1,1,1,1,1]
  8 | [2.3,1,1,1,1,1,1,1,1,1]
  9 | [2,2.5,1,1,1,1,1,1,1,1]
 10 | [1,1,2.7,2.8,1,1,1,1,1,1]
 11 | [1,1,1,1,2.9,3,1,1,1,1]
 12 | [1,1,1,1,1,1,3.1,3.2,1,1]
 16 | [4.2,1,1,1,1,1,1,1,1,1]
 17 | [1,4.4,1,1,1,1,1,1,1,1]
 18 | [1,1,4.6,1,1,1,1,1,1,1]
 19 | [1,1,1,4.8,1,1,1,1,1,1]
 13 | [3.3,3.4,3.5,1,1,1,1,1,1,1]
 14 | [1,1,1,3.6,3.7,3.8,1,1,1,1]
 25 | [6,1,1,1,1,1,1,1,1,1]
 15 | [1,1,1,1,1,1,3.9,4,4.1,1]
 20 | [5,5.1,1,1,1,1,1,1,1,1]
 21 | [1,1,5.2,5.3,1,1,1,1,1,1]
 22 | [1,1,1,1,5.4,5.5,1,1,1,1]
 23 | [1,1,1,1,1,1,5.6,5.7,1,1]
 24 | [1,1,1,1,1,1,1,1,5.8,5.9]
 26 | [7,7.1,1,1,1,1,1,1,1,1]
 28 | [1,1,1,1,1,1,1,1,9,9.1]
 27 | [8,8.1,8.2,1,1,1,1,1,1,1]
 29 | [10,10,10,10,10,1,1,1,1,1]
(29 rows)

/*+IndexScan(items)*/ EXPLAIN (COSTS OFF) SELECT * FROM items ORDER BY embedding <-> '[1,1,1,1,1,1,1,1,1,1]';
                         QUERY PLAN
-------------------------------------------------------------
 Index Scan using items_embedding_idx on items
   Order By: (embedding <-> '[1,1,1,1,1,1,1,1,1,1]'::vector)
(2 rows)

/*+IndexScan(items)*/ SELECT * FROM items ORDER BY embedding <-> '[1,1,1,1,1,1,1,1,1,1]';
 id |          embedding
----+-----------------------------
  1 | [1,1,1,1,1,1,1,1,1,1]
  2 | [1,1,1,1,1,1,1,1,1,1.1]
  3 | [1,1,1,1,1,1,1,1,1,1.3]
  4 | [1,1,1,1,1,1,1,1,1,1.5]
  5 | [1,1,1,1,1,1,1,1.7,1,1]
  6 | [1,1,1,1,1,1.9,1,1,1,1]
  7 | [1,1,1,2.1,1,1,1,1,1,1]
  8 | [2.3,1,1,1,1,1,1,1,1,1]
  9 | [2,2.5,1,1,1,1,1,1,1,1]
 10 | [1,1,2.7,2.8,1,1,1,1,1,1]
 11 | [1,1,1,1,2.9,3,1,1,1,1]
 12 | [1,1,1,1,1,1,3.1,3.2,1,1]
 16 | [4.2,1,1,1,1,1,1,1,1,1]
 17 | [1,4.4,1,1,1,1,1,1,1,1]
 18 | [1,1,4.6,1,1,1,1,1,1,1]
 19 | [1,1,1,4.8,1,1,1,1,1,1]
 13 | [3.3,3.4,3.5,1,1,1,1,1,1,1]
 14 | [1,1,1,3.6,3.7,3.8,1,1,1,1]
 25 | [6,1,1,1,1,1,1,1,1,1]
 15 | [1,1,1,1,1,1,3.9,4,4.1,1]
 20 | [5,5.1,1,1,1,1,1,1,1,1]
 21 | [1,1,5.2,5.3,1,1,1,1,1,1]
 22 | [1,1,1,1,5.4,5.5,1,1,1,1]
 23 | [1,1,1,1,1,1,5.6,5.7,1,1]
 24 | [1,1,1,1,1,1,1,1,5.8,5.9]
 26 | [7,7.1,1,1,1,1,1,1,1,1]
 28 | [1,1,1,1,1,1,1,1,9,9.1]
 27 | [8,8.1,8.2,1,1,1,1,1,1,1]
 29 | [10,10,10,10,10,1,1,1,1,1]
(29 rows)

-- Reference query.
/*+SeqScan(items)*/ EXPLAIN (COSTS OFF) SELECT * FROM items ORDER BY embedding <-> '[10,10,10,10,10,1,1,1,1,1]';
                             QUERY PLAN
--------------------------------------------------------------------
 Sort
   Sort Key: ((embedding <-> '[10,10,10,10,10,1,1,1,1,1]'::vector))
   ->  Seq Scan on items
(3 rows)

/*+SeqScan(items)*/ SELECT * FROM items ORDER BY embedding <-> '[10,10,10,10,10,1,1,1,1,1]';
 id |          embedding
----+-----------------------------
 29 | [10,10,10,10,10,1,1,1,1,1]
 27 | [8,8.1,8.2,1,1,1,1,1,1,1]
 26 | [7,7.1,1,1,1,1,1,1,1,1]
 21 | [1,1,5.2,5.3,1,1,1,1,1,1]
 20 | [5,5.1,1,1,1,1,1,1,1,1]
 13 | [3.3,3.4,3.5,1,1,1,1,1,1,1]
 14 | [1,1,1,3.6,3.7,3.8,1,1,1,1]
 25 | [6,1,1,1,1,1,1,1,1,1]
 10 | [1,1,2.7,2.8,1,1,1,1,1,1]
 19 | [1,1,1,4.8,1,1,1,1,1,1]
 18 | [1,1,4.6,1,1,1,1,1,1,1]
 17 | [1,4.4,1,1,1,1,1,1,1,1]
 16 | [4.2,1,1,1,1,1,1,1,1,1]
  9 | [2,2.5,1,1,1,1,1,1,1,1]
 22 | [1,1,1,1,5.4,5.5,1,1,1,1]
 11 | [1,1,1,1,2.9,3,1,1,1,1]
  8 | [2.3,1,1,1,1,1,1,1,1,1]
  7 | [1,1,1,2.1,1,1,1,1,1,1]
  1 | [1,1,1,1,1,1,1,1,1,1]
  2 | [1,1,1,1,1,1,1,1,1,1.1]
  3 | [1,1,1,1,1,1,1,1,1,1.3]
  4 | [1,1,1,1,1,1,1,1,1,1.5]
  5 | [1,1,1,1,1,1,1,1.7,1,1]
  6 | [1,1,1,1,1,1.9,1,1,1,1]
 12 | [1,1,1,1,1,1,3.1,3.2,1,1]
 15 | [1,1,1,1,1,1,3.9,4,4.1,1]
 23 | [1,1,1,1,1,1,5.6,5.7,1,1]
 24 | [1,1,1,1,1,1,1,1,5.8,5.9]
 28 | [1,1,1,1,1,1,1,1,9,9.1]
(29 rows)

/*+IndexScan(items)*/ EXPLAIN (COSTS OFF) SELECT * FROM items ORDER BY embedding <-> '[10,10,10,10,10,1,1,1,1,1]';
                            QUERY PLAN
------------------------------------------------------------------
 Index Scan using items_embedding_idx on items
   Order By: (embedding <-> '[10,10,10,10,10,1,1,1,1,1]'::vector)
(2 rows)

/*+IndexScan(items)*/ SELECT * FROM items ORDER BY embedding <-> '[10,10,10,10,10,1,1,1,1,1]';
 id |          embedding
----+-----------------------------
 29 | [10,10,10,10,10,1,1,1,1,1]
 27 | [8,8.1,8.2,1,1,1,1,1,1,1]
 26 | [7,7.1,1,1,1,1,1,1,1,1]
 21 | [1,1,5.2,5.3,1,1,1,1,1,1]
 20 | [5,5.1,1,1,1,1,1,1,1,1]
 13 | [3.3,3.4,3.5,1,1,1,1,1,1,1]
 14 | [1,1,1,3.6,3.7,3.8,1,1,1,1]
 25 | [6,1,1,1,1,1,1,1,1,1]
 10 | [1,1,2.7,2.8,1,1,1,1,1,1]
 19 | [1,1,1,4.8,1,1,1,1,1,1]
 18 | [1,1,4.6,1,1,1,1,1,1,1]
 17 | [1,4.4,1,1,1,1,1,1,1,1]
 16 | [4.2,1,1,1,1,1,1,1,1,1]
  9 | [2,2.5,1,1,1,1,1,1,1,1]
 22 | [1,1,1,1,5.4,5.5,1,1,1,1]
 11 | [1,1,1,1,2.9,3,1,1,1,1]
  8 | [2.3,1,1,1,1,1,1,1,1,1]
  7 | [1,1,1,2.1,1,1,1,1,1,1]
  1 | [1,1,1,1,1,1,1,1,1,1]
  2 | [1,1,1,1,1,1,1,1,1,1.1]
  3 | [1,1,1,1,1,1,1,1,1,1.3]
  4 | [1,1,1,1,1,1,1,1,1,1.5]
  5 | [1,1,1,1,1,1,1,1.7,1,1]
  6 | [1,1,1,1,1,1.9,1,1,1,1]
 12 | [1,1,1,1,1,1,3.1,3.2,1,1]
 15 | [1,1,1,1,1,1,3.9,4,4.1,1]
 23 | [1,1,1,1,1,1,5.6,5.7,1,1]
 24 | [1,1,1,1,1,1,1,1,5.8,5.9]
 28 | [1,1,1,1,1,1,1,1,9,9.1]
(29 rows)

-- Wrong dimensionality, shouldn't work.
SELECT * FROM items ORDER BY embedding <-> '[1.0, 0.4, 0.3]' LIMIT 5;
ERROR:  different vector dimensions 10 and 3
DROP INDEX items_embedding_idx;
-- Dummy implementation, should only provide Exact ANN within a tablet.
CREATE INDEX ON items USING ybdummyann (embedding vector_l2_ops);
WARNING:  ybdummyann is meant for internal-testing only and does not yield ordered results
EXPLAIN (COSTS OFF) SELECT * FROM items ORDER BY embedding <-> '[1,1,1,1,1,1,1,1,1,1]';
                         QUERY PLAN
-------------------------------------------------------------
 Index Scan using items_embedding_idx on items
   Order By: (embedding <-> '[1,1,1,1,1,1,1,1,1,1]'::vector)
(2 rows)

SELECT * FROM items ORDER BY embedding <-> '[1,1,1,1,1,1,1,1,1,1]';
 id |          embedding
----+-----------------------------
  1 | [1,1,1,1,1,1,1,1,1,1]
  2 | [1,1,1,1,1,1,1,1,1,1.1]
  3 | [1,1,1,1,1,1,1,1,1,1.3]
  4 | [1,1,1,1,1,1,1,1,1,1.5]
  5 | [1,1,1,1,1,1,1,1.7,1,1]
  6 | [1,1,1,1,1,1.9,1,1,1,1]
  7 | [1,1,1,2.1,1,1,1,1,1,1]
  8 | [2.3,1,1,1,1,1,1,1,1,1]
  9 | [2,2.5,1,1,1,1,1,1,1,1]
 10 | [1,1,2.7,2.8,1,1,1,1,1,1]
 11 | [1,1,1,1,2.9,3,1,1,1,1]
 12 | [1,1,1,1,1,1,3.1,3.2,1,1]
 16 | [4.2,1,1,1,1,1,1,1,1,1]
 17 | [1,4.4,1,1,1,1,1,1,1,1]
 18 | [1,1,4.6,1,1,1,1,1,1,1]
 19 | [1,1,1,4.8,1,1,1,1,1,1]
 13 | [3.3,3.4,3.5,1,1,1,1,1,1,1]
 14 | [1,1,1,3.6,3.7,3.8,1,1,1,1]
 25 | [6,1,1,1,1,1,1,1,1,1]
 15 | [1,1,1,1,1,1,3.9,4,4.1,1]
 20 | [5,5.1,1,1,1,1,1,1,1,1]
 21 | [1,1,5.2,5.3,1,1,1,1,1,1]
 22 | [1,1,1,1,5.4,5.5,1,1,1,1]
 23 | [1,1,1,1,1,1,5.6,5.7,1,1]
 24 | [1,1,1,1,1,1,1,1,5.8,5.9]
 26 | [7,7.1,1,1,1,1,1,1,1,1]
 28 | [1,1,1,1,1,1,1,1,9,9.1]
 27 | [8,8.1,8.2,1,1,1,1,1,1,1]
 29 | [10,10,10,10,10,1,1,1,1,1]
(29 rows)

DROP TABLE items;
