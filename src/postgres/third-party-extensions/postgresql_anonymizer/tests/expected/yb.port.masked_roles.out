-- This test cannot be run in a single transaction
-- This test must be run on a database named 'contrib_regression'
-- YB: the database doesn't need to be 'contrib_regression'
CREATE EXTENSION IF NOT EXISTS anon CASCADE;
-- INIT
SET anon.maskschema TO 'foo';
BEGIN; -- YB: Workaround for read time error, check #25665
SET yb_non_ddl_txn_for_sys_tables_allowed = true; -- YB: next statement updates pg_seclabel and is not a DDL
SELECT anon.start_dynamic_masking();
 start_dynamic_masking 
-----------------------
 t
(1 row)

COMMIT; -- YB: Workaround for read time error, check #25665
CREATE ROLE skynet LOGIN PASSWORD 'x';
SECURITY LABEL FOR anon ON ROLE skynet IS 'MASKED';
SELECT anon.mask_update();
 mask_update 
-------------
 t
(1 row)

-- search_path must be 'foo,public'
\! PGPASSWORD=x ${YB_BUILD_ROOT}/postgres/bin/ysqlsh -U skynet -c 'SHOW search_path;' # YB: Use ysqlsh and the default database
 search_path 
-------------
 foo, public
(1 row)

CREATE ROLE hal LOGIN PASSWORD 'x';
SECURITY LABEL FOR anon ON ROLE hal IS 'MASKED';
SELECT anon.mask_update();
 mask_update 
-------------
 t
(1 row)

-- search_path must be 'foo,public'
\! PGPASSWORD=x ${YB_BUILD_ROOT}/postgres/bin/ysqlsh -U hal -c 'SHOW search_path;' # YB: Use ysqlsh and the default database
 search_path 
-------------
 foo, public
(1 row)

-- STOP
SELECT anon.stop_dynamic_masking();
NOTICE:  The previous priviledges of 'skynet' are not restored. You need to grant them manually.
NOTICE:  The previous priviledges of 'hal' are not restored. You need to grant them manually.
 stop_dynamic_masking 
----------------------
 t
(1 row)

-- REMOVE MASKS
SELECT anon.remove_masks_for_all_roles();
 remove_masks_for_all_roles 
----------------------------
 t
(1 row)

SELECT COUNT(*)=0 FROM anon.pg_masked_roles WHERE hasmask;
 ?column? 
----------
 t
(1 row)

--  CLEAN
DROP EXTENSION anon CASCADE;
REASSIGN OWNED BY skynet TO postgres;
DROP OWNED BY skynet CASCADE;
DROP ROLE skynet;
REASSIGN OWNED BY hal TO postgres;
DROP OWNED BY hal CASCADE;
DROP ROLE hal;
