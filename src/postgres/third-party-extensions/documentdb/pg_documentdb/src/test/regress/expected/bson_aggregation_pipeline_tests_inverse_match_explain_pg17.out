NOTICE:  identifier "pg_regress/bson_aggregation_pipeline_tests_inverse_match_explain_pg17" will be truncated to "pg_regress/bson_aggregation_pipeline_tests_inverse_match_explai"
SET search_path TO documentdb_api,documentdb_core,documentdb_api_catalog;
\i sql/bson_aggregation_pipeline_tests_inverse_match_explain_core.sql
SET search_path TO documentdb_api,documentdb_core,documentdb_api_catalog;
SET documentdb.next_collection_id TO 12300;
SET documentdb.next_collection_index_id TO 12300;
-- Insert data
SELECT documentdb_api.insert_one('invmatchexp','airports','{ "_id": 1, "airport_id": 10165, "city": "Adak Island", "state": "AK", "name": "Adak", "rule": { "flight_type": "private"} }', NULL);
psql:sql/bson_aggregation_pipeline_tests_inverse_match_explain_core.sql:7: NOTICE:  creating collection
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('invmatchexp','airports','{ "_id": 3, "airport_id": 11308, "city": "Dothan", "state": "AL", "name": "Dothan Regional", "rule": { "$or": [ { "origin": "WA"}, {"flight_type": "private"}] } }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('invmatchexp','airports','{ "_id": 4, "airport_id": 11778, "city": "Fort Smith", "state": "AR", "name": "Fort Smith Regional", "rule": { "$in": [{"is_emergency": true}, {"is_vip": true}] }}', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('invmatchexp','airports','{ "_id": 6, "airport_id": 14689, "city": "Santa Barbara", "state": "CA", "name": "Santa Barbara Municipal", "rule": { "$or": [ {"$and": [{"flight_type": "private"}, {"origin": "CA"}]}, {"$or": [{"is_emergency": true}, {"is_vip": true}]} ] }}', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('invmatchexp','airports','{ "_id": 7, "airport_id": 13442, "city": "Everet", "state": "WA", "name": "Paine Field", "rule": { "tags": { "$all": ["private", "vip"]}}}', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('invmatchexp','user_roles','{ "_id": 1, "user_id": 100, "roles": ["basic"]}', NULL);
psql:sql/bson_aggregation_pipeline_tests_inverse_match_explain_core.sql:13: NOTICE:  creating collection
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('invmatchexp','user_roles','{ "_id": 2, "user_id": 101, "roles": ["basic", "sales"]}', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('invmatchexp','user_roles','{ "_id": 3, "user_id": 102, "roles": ["admin"]}', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('invmatchexp','sales','{ "_id": 1, "order": 100, "paid": true, "total": 0, "rule": {"roles": {"$in": ["basic", "sales", "admin"]}}}', NULL);
psql:sql/bson_aggregation_pipeline_tests_inverse_match_explain_core.sql:17: NOTICE:  creating collection
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('invmatchexp','sales','{ "_id": 2, "order": 102, "paid": true, "total": 1000, "rule": {"roles": {"$in": ["sales", "admin"]}}}', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('invmatchexp','sales','{ "_id": 3, "order": 103, "paid": true, "total": 1000, "rule": {"roles": {"$in": ["admin"]}}}', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document from bson_aggregation_pipeline('invmatchexp', '{ "aggregate": "sales", "pipeline": [ { "$inverseMatch": {"path": "rule", "from": "user_roles", "pipeline": [{"$match": {"user_id": { "$ne": 200 }}}, {"$limit": 1}]}} ], "cursor": {} }'); 
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on documentdb_data.documents_12303 collection
   Output: collection.document
   Recheck Cond: (collection.shard_key_value = '12303'::bigint)
   Filter: documentdb_api_internal.bson_dollar_inverse_match(collection.document, (InitPlan 2).col1)
   InitPlan 2
     ->  Result
           Output: documentdb_api_internal.bson_dollar_merge_documents('{ "path" : "rule", "defaultResult" : false }'::bson, (InitPlan 1).col1)
           InitPlan 1
             ->  Limit
                   Output: (COALESCE(bson_array_agg(collection_0_1.document, 'input'::text), '{ "input" : [  ] }'::bson))
                   ->  Aggregate
                         Output: COALESCE(bson_array_agg(collection_0_1.document, 'input'::text), '{ "input" : [  ] }'::bson)
                         ->  Bitmap Heap Scan on documentdb_data.documents_12302 collection_0_1
                               Output: collection_0_1.shard_key_value, collection_0_1.object_id, collection_0_1.document, collection_0_1.creation_time
                               Recheck Cond: (collection_0_1.shard_key_value = '12302'::bigint)
                               Filter: (collection_0_1.document @!= '{ "user_id" : { "$numberInt" : "200" } }'::bson)
                               ->  Bitmap Index Scan on _id_
                                     Index Cond: (collection_0_1.shard_key_value = '12302'::bigint)
   ->  Bitmap Index Scan on _id_
         Index Cond: (collection.shard_key_value = '12303'::bigint)
(20 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document from bson_aggregation_pipeline('invmatchexp', '{ "aggregate": "sales", "pipeline": [ { "$inverseMatch": {"path": "rule", "from": "user_roles", "pipeline": [{"$match": {"user_id": { "$ne": 200 }}}]}} ], "cursor": {} }'); 
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on documentdb_data.documents_12303 collection
   Output: collection.document
   Recheck Cond: (collection.shard_key_value = '12303'::bigint)
   Filter: documentdb_api_internal.bson_dollar_inverse_match(collection.document, (InitPlan 2).col1)
   InitPlan 2
     ->  Result
           Output: documentdb_api_internal.bson_dollar_merge_documents('{ "path" : "rule", "defaultResult" : false }'::bson, (InitPlan 1).col1)
           InitPlan 1
             ->  Aggregate
                   Output: COALESCE(bson_array_agg(collection_0_1.document, 'input'::text), '{ "input" : [  ] }'::bson)
                   ->  Bitmap Heap Scan on documentdb_data.documents_12302 collection_0_1
                         Output: collection_0_1.shard_key_value, collection_0_1.object_id, collection_0_1.document, collection_0_1.creation_time
                         Recheck Cond: (collection_0_1.shard_key_value = '12302'::bigint)
                         Filter: (collection_0_1.document @!= '{ "user_id" : { "$numberInt" : "200" } }'::bson)
                         ->  Bitmap Index Scan on _id_
                               Index Cond: (collection_0_1.shard_key_value = '12302'::bigint)
   ->  Bitmap Index Scan on _id_
         Index Cond: (collection.shard_key_value = '12303'::bigint)
(18 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document from bson_aggregation_pipeline('invmatchexp', '{ "aggregate": "sales", "pipeline": [ { "$inverseMatch": {"path": "rule", "input": {}}} ], "cursor": {} }'); 
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on documentdb_data.documents_12303 collection
   Output: document
   Recheck Cond: (collection.shard_key_value = '12303'::bigint)
   Filter: documentdb_api_internal.bson_dollar_inverse_match(collection.document, '{ "path" : "rule", "input" : {  } }'::bson)
   ->  Bitmap Index Scan on _id_
         Index Cond: (collection.shard_key_value = '12303'::bigint)
(6 rows)

