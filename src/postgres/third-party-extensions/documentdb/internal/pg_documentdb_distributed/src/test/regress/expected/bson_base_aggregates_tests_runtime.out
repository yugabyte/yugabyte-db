SET search_path TO documentdb_core,documentdb_api,documentdb_api_catalog,documentdb_api_internal;
SET citus.next_shard_id TO 61000;
SET documentdb.next_collection_id TO 6100;
SET documentdb.next_collection_index_id TO 6100;
-- insert basic numeric data.
SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"1", "i32": { "$numberInt" : "11" }, "i64": { "$numberLong" : "11" }, "idbl": { "$numberDouble" : "11.0" }}');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"2", "i32": { "$numberInt" : "-2" }, "i64": { "$numberLong" : "-2" }, "idbl": { "$numberDouble" : "-2.0" }}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"3", "i32": { "$numberInt" : "20" }, "i64": { "$numberLong" : "20" }, "idbl": { "$numberDouble" : "20" }}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- Compute sum/Avg; they should be in the respective types.
SELECT BSONSUM(document-> 'i32'), BSONSUM(document-> 'i64'), BSONSUM(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
             bsonsum              |              bsonsum              |                bsonsum                
---------------------------------------------------------------------
 { "" : { "$numberInt" : "29" } } | { "" : { "$numberLong" : "29" } } | { "" : { "$numberDouble" : "29.0" } }
(1 row)

SELECT BSONAVERAGE(document-> 'i32'), BSONAVERAGE(document-> 'i64'), BSONAVERAGE(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
                      bsonaverage                       |                      bsonaverage                       |                      bsonaverage                       
---------------------------------------------------------------------
 { "" : { "$numberDouble" : "9.6666666666666660745" } } | { "" : { "$numberDouble" : "9.6666666666666660745" } } | { "" : { "$numberDouble" : "9.6666666666666660745" } }
(1 row)

-- Now add some values that are non numeric.
SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"4", "i32": "stringValue", "i64": "stringValue", "idbl": "stringValue"}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"5", "i32": true, "i64": false, "idbl": true}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"6", "i32": [1, 2, 3], "i64": [4, 5, 6], "idbl": [7, 8, 9]}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- Compute sum and average for filters that result in 0 rows.
SELECT BSONSUM(document-> 'i32'), BSONSUM(document-> 'i64'), BSONSUM(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates') WHERE document @@ '{ "nonExistentField": 1 }';
             bsonsum             |             bsonsum             |             bsonsum             
---------------------------------------------------------------------
 { "" : { "$numberInt" : "0" } } | { "" : { "$numberInt" : "0" } } | { "" : { "$numberInt" : "0" } }
(1 row)

SELECT BSONAVERAGE(document-> 'i32'), BSONAVERAGE(document-> 'i64'), BSONAVERAGE(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates') WHERE document @@ '{ "nonExistentField": 1 }';
  bsonaverage  |  bsonaverage  |  bsonaverage  
---------------------------------------------------------------------
 { "" : null } | { "" : null } | { "" : null }
(1 row)

SELECT BSONSUM(document), BSONAVERAGE(document) FROM documentdb_api.collection('db', 'testAggregates') WHERE document @@ '{ "nonExistentField": 1 }';
             bsonsum             |  bsonaverage  
---------------------------------------------------------------------
 { "" : { "$numberInt" : "0" } } | { "" : null }
(1 row)

-- Compute sum/Avg; They should be the same since non-numeric values do not impact the sum/avg.
SELECT BSONSUM(document-> 'i32'), BSONSUM(document-> 'i64'), BSONSUM(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
             bsonsum              |              bsonsum              |                bsonsum                
---------------------------------------------------------------------
 { "" : { "$numberInt" : "29" } } | { "" : { "$numberLong" : "29" } } | { "" : { "$numberDouble" : "29.0" } }
(1 row)

SELECT BSONAVERAGE(document-> 'i32'), BSONAVERAGE(document-> 'i64'), BSONAVERAGE(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
                      bsonaverage                       |                      bsonaverage                       |                      bsonaverage                       
---------------------------------------------------------------------
 { "" : { "$numberDouble" : "9.6666666666666660745" } } | { "" : { "$numberDouble" : "9.6666666666666660745" } } | { "" : { "$numberDouble" : "9.6666666666666660745" } }
(1 row)

SELECT BSONSUM(document), BSONAVERAGE(document) FROM documentdb_api.collection('db', 'testAggregates');
ERROR:  invalid input BSON: Should have only 1 entry in the bson document
-- Now add values that cause int32/int64 to roll over to the next highest type (mixed type sum)
SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"7", "i32": { "$numberInt" : "2147483645" }, "i64": { "$numberLong" : "9223372036854775801" }, "idbl": { "$numberDouble" : "1e20" }}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- sum/Avg should now move to the next available type
SELECT BSONSUM(document-> 'i32'), BSONSUM(document-> 'i64'), BSONSUM(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
                  bsonsum                  |                        bsonsum                         |                bsonsum                 
---------------------------------------------------------------------
 { "" : { "$numberLong" : "2147483674" } } | { "" : { "$numberDouble" : "9223372036854775808.0" } } | { "" : { "$numberDouble" : "1e+20" } }
(1 row)

SELECT BSONAVERAGE(document-> 'i32'), BSONAVERAGE(document-> 'i64'), BSONAVERAGE(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
                 bsonaverage                  |                      bsonaverage                       |                       bsonaverage                       
---------------------------------------------------------------------
 { "" : { "$numberDouble" : "536870918.5" } } | { "" : { "$numberDouble" : "2305843009213693952.0" } } | { "" : { "$numberDouble" : "25000000000000000000.0" } }
(1 row)

-- Now add a field that only exists in i32 - for i64/dbl it won't be there and it'll be a double field to test upgrade when the value type changes.
SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"8", "i32": { "$numberDouble" : "31.6" }}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- sum/Avg They all should be dbl and partial data should be ignored for i64/idbl
SELECT BSONSUM(document-> 'i32'), BSONSUM(document-> 'i64'), BSONSUM(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
                        bsonsum                         |                        bsonsum                         |                bsonsum                 
---------------------------------------------------------------------
 { "" : { "$numberDouble" : "2147483705.5999999046" } } | { "" : { "$numberDouble" : "9223372036854775808.0" } } | { "" : { "$numberDouble" : "1e+20" } }
(1 row)

SELECT BSONAVERAGE(document-> 'i32'), BSONAVERAGE(document-> 'i64'), BSONAVERAGE(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
                      bsonaverage                       |                      bsonaverage                       |                       bsonaverage                       
---------------------------------------------------------------------
 { "" : { "$numberDouble" : "429496741.12000000477" } } | { "" : { "$numberDouble" : "2305843009213693952.0" } } | { "" : { "$numberDouble" : "25000000000000000000.0" } }
(1 row)

-- Query non existent field.
SELECT BSONSUM(document -> 'nao existe'), BSONAVERAGE(document -> 'nao existe') FROM documentdb_api.collection('db', 'testAggregates');
             bsonsum             |  bsonaverage  
---------------------------------------------------------------------
 { "" : { "$numberInt" : "0" } } | { "" : null }
(1 row)

SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"9",  "a" : { "b" : 1 } }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"10", "a" : { "b" : 2 } }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"11", "a" : { "b" : [ 0, 1, 2 ] } }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"12", "a" : [ { "b" : 1 }, { "b" : 3 } ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"13", "a" : [ { "b" : 0 }, { "b" : 1 }, { "b" : 3 } ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"14", "a" : [ { "b" : 0 }, { "b" : 1 }, { "b" : 3 } ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"15", "a" : [ { "b" : [ -1, 1, 2 ] }, { "b" : [ 0, 1, 2 ] }, { "b" : [ 0, 1, 7 ] } ]}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','testAggregates','{"_id":"16",  "a" : [ { "b" : 9 } ]}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT BSONMAX(bson_expression_get(document, '{ "": "$a.b" }')) FROM documentdb_api.collection('db', 'testAggregates') WHERE document @? '{ "a.b": 1}';
                                                                                                                     bsonmax                                                                                                                      
---------------------------------------------------------------------
 { "" : [ [ { "$numberInt" : "-1" }, { "$numberInt" : "1" }, { "$numberInt" : "2" } ], [ { "$numberInt" : "0" }, { "$numberInt" : "1" }, { "$numberInt" : "2" } ], [ { "$numberInt" : "0" }, { "$numberInt" : "1" }, { "$numberInt" : "7" } ] ] }
(1 row)

SELECT BSONMIN(bson_expression_get(document, '{ "": "$a.b" }')) FROM documentdb_api.collection('db', 'testAggregates') WHERE document @? '{ "a.b": 1}';
             bsonmin             
---------------------------------------------------------------------
 { "" : { "$numberInt" : "1" } }
(1 row)

-- Rebuild bson objects from aggregates
SELECT bson_repath_and_build('max'::text, BSONMAX(document-> 'i32'), 'sum'::text, BSONSUM(document-> 'i32'), 'average'::text, BSONAVERAGE(document-> 'i32')) FROM documentdb_api.collection('db', 'testAggregates');
                                                       bson_repath_and_build                                                        
---------------------------------------------------------------------
 { "max" : true, "sum" : { "$numberDouble" : "2147483705.5999999046" }, "average" : { "$numberDouble" : "429496741.12000000477" } }
(1 row)

-- Null values in aggregates
SELECT BSONMAX(document-> 'nao existe') FROM documentdb_api.collection('db', 'testAggregates');
    bsonmax    
---------------------------------------------------------------------
 { "" : null }
(1 row)

SELECT bson_repath_and_build('max'::text, BSONMAX(document-> 'nao existe'), 'sum'::text, BSONSUM(document-> 'i32')) FROM documentdb_api.collection('db', 'testAggregates');
                          bson_repath_and_build                          
---------------------------------------------------------------------
 { "max" : null, "sum" : { "$numberDouble" : "2147483705.5999999046" } }
(1 row)

-- Rebuild with prepared statement
PREPARE q1 (text, text, text) AS SELECT bson_repath_and_build($1, BSONMAX(document-> 'i32'), $2, BSONSUM(document-> 'i32'), $3, BSONAVERAGE(document-> 'i32')) FROM documentdb_api.collection('db', 'testAggregates');
EXECUTE q1 ('max', 'sum', 'average');
                                                       bson_repath_and_build                                                        
---------------------------------------------------------------------
 { "max" : true, "sum" : { "$numberDouble" : "2147483705.5999999046" }, "average" : { "$numberDouble" : "429496741.12000000477" } }
(1 row)

-- Invalid rebuild arguments
SELECT bson_repath_and_build('max'::text, BSONMAX(document-> 'i32'), 'sum'::text, BSONSUM(document-> 'i32'), 'average'::text, BSONAVERAGE(document-> 'i32')) FROM documentdb_api.collection('db', 'testAggregates');
                                                       bson_repath_and_build                                                        
---------------------------------------------------------------------
 { "max" : true, "sum" : { "$numberDouble" : "2147483705.5999999046" }, "average" : { "$numberDouble" : "429496741.12000000477" } }
(1 row)

SELECT bson_repath_and_build(BSONMAX(document-> 'i32'), 'sum'::text, BSONSUM(document-> 'i32'), 'average'::text, BSONAVERAGE(document-> 'i32')) FROM documentdb_api.collection('db', 'testAggregates');
ERROR:  argument list must have an even number of elements
DETAIL:  The arguments of bson_repath_and_build() must consist of alternating keys and values.
SELECT bson_repath_and_build('max'::text, 'max2', BSONMAX(document-> 'i32'), 'sum'::text, BSONSUM(document-> 'i32'), 'average'::text, BSONAVERAGE(document-> 'i32')) FROM documentdb_api.collection('db', 'testAggregates');
ERROR:  argument list must have an even number of elements
DETAIL:  The arguments of bson_repath_and_build() must consist of alternating keys and values.
SELECT bson_repath_and_build(BSONMAX(document-> 'i32'), 'max'::text, 'sum'::text, BSONSUM(document-> 'i32'), 'average'::text, BSONAVERAGE(document-> 'i32')) FROM documentdb_api.collection('db', 'testAggregates');
ERROR:  argument 0 must be a text
-- Shard the collection
SELECT documentdb_api.shard_collection('db', 'testAggregates', '{"_id":"hashed"}', false);
 shard_collection 
---------------------------------------------------------------------
 
(1 row)

-- Try basic aggregates when sharded
SELECT BSONSUM(document-> 'i32'), BSONSUM(document-> 'i64'), BSONSUM(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
                        bsonsum                         |                        bsonsum                         |                bsonsum                 
---------------------------------------------------------------------
 { "" : { "$numberDouble" : "2147483705.5999999046" } } | { "" : { "$numberDouble" : "9223372036854775808.0" } } | { "" : { "$numberDouble" : "1e+20" } }
(1 row)

SELECT BSONAVERAGE(document-> 'i32'), BSONAVERAGE(document-> 'i64'), BSONAVERAGE(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
                      bsonaverage                       |                      bsonaverage                       |                       bsonaverage                       
---------------------------------------------------------------------
 { "" : { "$numberDouble" : "429496741.12000000477" } } | { "" : { "$numberDouble" : "2305843009213693952.0" } } | { "" : { "$numberDouble" : "25000000000000000000.0" } }
(1 row)

SELECT BSONMIN(document-> 'i32'), BSONMIN(document-> 'i64'), BSONMIN(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
             bsonmin              |              bsonmin              |                bsonmin                
---------------------------------------------------------------------
 { "" : { "$numberInt" : "-2" } } | { "" : { "$numberLong" : "-2" } } | { "" : { "$numberDouble" : "-2.0" } }
(1 row)

SELECT BSONMAX(document-> 'i32'), BSONMAX(document-> 'i64'), BSONMAX(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
    bsonmax    |    bsonmax     |    bsonmax    
---------------------------------------------------------------------
 { "" : true } | { "" : false } | { "" : true }
(1 row)

-- shard on a path that not all documents have:
SELECT documentdb_api.shard_collection('db', 'testAggregates', '{"_id":"hashed"}', false);
NOTICE:  Skipping Sharding for collection db.testAggregates as the same options were passed in.
 shard_collection 
---------------------------------------------------------------------
 
(1 row)

SELECT BSONSUM(document-> 'i32'), BSONSUM(document-> 'i64'), BSONSUM(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
                        bsonsum                         |                        bsonsum                         |                bsonsum                 
---------------------------------------------------------------------
 { "" : { "$numberDouble" : "2147483705.5999999046" } } | { "" : { "$numberDouble" : "9223372036854775808.0" } } | { "" : { "$numberDouble" : "1e+20" } }
(1 row)

SELECT BSONAVERAGE(document-> 'i32'), BSONAVERAGE(document-> 'i64'), BSONAVERAGE(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
                      bsonaverage                       |                      bsonaverage                       |                       bsonaverage                       
---------------------------------------------------------------------
 { "" : { "$numberDouble" : "429496741.12000000477" } } | { "" : { "$numberDouble" : "2305843009213693952.0" } } | { "" : { "$numberDouble" : "25000000000000000000.0" } }
(1 row)

SELECT BSONMIN(document-> 'i32'), BSONMIN(document-> 'i64'), BSONMIN(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
             bsonmin              |              bsonmin              |                bsonmin                
---------------------------------------------------------------------
 { "" : { "$numberInt" : "-2" } } | { "" : { "$numberLong" : "-2" } } | { "" : { "$numberDouble" : "-2.0" } }
(1 row)

SELECT BSONMAX(document-> 'i32'), BSONMAX(document-> 'i64'), BSONMAX(document -> 'idbl') FROM documentdb_api.collection('db', 'testAggregates');
    bsonmax    |    bsonmax     |    bsonmax    
---------------------------------------------------------------------
 { "" : true } | { "" : false } | { "" : true }
(1 row)

-- validation from field_name_validation.js
SELECT documentdb_api.insert_one('db', 'testAggregates', '{ "_id": { "a": 1, "b": 2 }, "c.d": 3 }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT BSONSUM(bson_expression_get(document, '{ "": "$c.d" }')) FROM documentdb_api.collection('db', 'testAggregates') GROUP BY bson_expression_get(document, '{ "": "$_id.a" }');
             bsonsum             
---------------------------------------------------------------------
 { "" : { "$numberInt" : "0" } }
 { "" : { "$numberInt" : "0" } }
(2 rows)

SELECT BSONSUM(bson_expression_get(document, '{ "": "$_id.b" }')) FROM documentdb_api.collection('db', 'testAggregates') GROUP BY bson_expression_get(document, '{ "": "$_id.a" }');
             bsonsum             
---------------------------------------------------------------------
 { "" : { "$numberInt" : "0" } }
 { "" : { "$numberInt" : "2" } }
(2 rows)

SELECT bson_repath_and_build('e.f'::text, BSONSUM(bson_expression_get(document, '{ "": "$_id.b" }'))) FROM documentdb_api.collection('db', 'testAggregates') GROUP BY bson_expression_get(document, '{ "": "$_id.a" }');
       bson_repath_and_build        
---------------------------------------------------------------------
 { "e.f" : { "$numberInt" : "0" } }
 { "e.f" : { "$numberInt" : "2" } }
(2 rows)

SELECT bson_repath_and_build('$e'::text, BSONSUM(bson_expression_get(document, '{ "": "$_id.b" }'))) FROM documentdb_api.collection('db', 'testAggregates') GROUP BY bson_expression_get(document, '{ "": "$_id.a" }');
ERROR:  The field name $e cannot be an operator name
SELECT documentdb_api.insert_one('db', 'testAggregatesWithIndex', '{ "_id": 1, "a": 1 }');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'testAggregatesWithIndex', '{ "_id": 2, "a": 2 }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'testAggregatesWithIndex', '{ "_id": 3, "a": 3 }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'testAggregatesWithIndex', '{ "_id": 4, "a": 4 }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'testAggregatesWithIndex', '{ "_id": 5, "a": 5 }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- simulate a count
BEGIN;
-- avoid sequential scan (likely to be preferred on small tables)
set local enable_seqscan to off;
set local documentdb.forceUseIndexIfAvailable to on;
SELECT BSONSUM('{ "": 1 }') FROM documentdb_api.collection('db', 'testAggregatesWithIndex');
             bsonsum             
---------------------------------------------------------------------
 { "" : { "$numberInt" : "5" } }
(1 row)

EXPLAIN (COSTS OFF) SELECT BSONSUM('{ "": 1 }') FROM documentdb_api.collection('db', 'testAggregatesWithIndex');
                                QUERY PLAN                                
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Aggregate
               ->  Bitmap Heap Scan on documents_6101_61027 collection
                     Recheck Cond: (shard_key_value = '6101'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (shard_key_value = '6101'::bigint)
(10 rows)

ROLLBACK;
-- create an index.
SELECT documentdb_api_internal.create_indexes_non_concurrently('db', documentdb_distributed_test_helpers.generate_create_index_arg('testAggregatesWithIndex', 'idx_1', '{ "a": 1 }'), true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

-- repeat 
BEGIN;
-- avoid sequential scan (likely to be preferred on small tables)
set local enable_seqscan to off;
set local documentdb.forceUseIndexIfAvailable to on;
SELECT BSONSUM('{ "": 1 }') FROM documentdb_api.collection('db', 'testAggregatesWithIndex');
             bsonsum             
---------------------------------------------------------------------
 { "" : { "$numberInt" : "5" } }
(1 row)

EXPLAIN (COSTS OFF) SELECT BSONSUM('{ "": 1 }') FROM documentdb_api.collection('db', 'testAggregatesWithIndex');
                                   QUERY PLAN                                    
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Aggregate
               ->  Index Only Scan using _id_ on documents_6101_61027 collection
                     Index Cond: (shard_key_value = '6101'::bigint)
(8 rows)

ROLLBACK;
-- now shard the collection.
SELECT documentdb_api.shard_collection('db', 'testAggregatesWithIndex', '{ "_id": "hashed" }', false);
 shard_collection 
---------------------------------------------------------------------
 
(1 row)

-- repeat
BEGIN;
-- avoid sequential scan (likely to be preferred on small tables)
set local enable_seqscan to off;
set local documentdb.forceUseIndexIfAvailable to on;
SELECT BSONSUM('{ "": 1 }') FROM documentdb_api.collection('db', 'testAggregatesWithIndex');
             bsonsum             
---------------------------------------------------------------------
 { "" : { "$numberInt" : "5" } }
(1 row)

EXPLAIN (COSTS OFF) SELECT BSONSUM('{ "": 1 }') FROM documentdb_api.collection('db', 'testAggregatesWithIndex');
                                        QUERY PLAN                                         
---------------------------------------------------------------------
 Aggregate
   ->  Custom Scan (Citus Adaptive)
         Task Count: 8
         Tasks Shown: One of 8
         ->  Task
               Node: host=localhost port=58070 dbname=regression
               ->  Aggregate
                     ->  Index Only Scan using _id_ on documents_6101_61040 documents_6101
(8 rows)

ROLLBACK;
