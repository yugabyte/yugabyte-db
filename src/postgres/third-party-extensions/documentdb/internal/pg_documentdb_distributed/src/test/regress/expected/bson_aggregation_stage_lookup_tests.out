SET search_path TO documentdb_core,documentdb_api,documentdb_api_catalog,documentdb_api_internal;
SET citus.next_shard_id TO 60000;
SET documentdb.next_collection_id TO 6000;
SET documentdb.next_collection_index_id TO 6000;
-- Insert data
SELECT documentdb_api.insert_one('db','orders',' { "_id" : 1, "item" : "almonds", "price" : 12, "quantity" : 2 }', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders','{ "_id" : 2, "item" : "pecans", "price" : 20, "quantity" : 1 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders',' { "_id" : 3, "item" : "bread", "price" : 10, "quantity" : 5 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders',' { "_id" : 4, "item" : ["almonds", "bread", "pecans"], "price" : 10, "quantity" : 5 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders',' { "_id" : 5}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders',' { "_id" : 6, "item" : {"a": "x", "b" : 1, "c" : [1, 2, 3]} }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders',' { "_id" : 7, "item" : [{"a": { "b" : 1}}, [1, 2, 3], 1, "x"] }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','inventory',' { "_id" : 1, "sku" : "almonds", "description": "product 1", "instock" : 120 }', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','inventory',' { "_id" : 11, "sku" : "almonds", "description": "product 1", "instock" : 240 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','inventory','{ "_id" : 2, "sku" : "bread", "description": "product 2", "instock" : 80 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','inventory','{ "_id" : 3, "sku" : "cashews", "description": "product 3", "instock" : 60 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','inventory','{ "_id" : 4, "sku" : "pecans", "description": "product 4", "instock" : 70 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','inventory','{ "_id" : 5, "sku" : null, "description": "product 4", "instock" : 70 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','inventory','{ "_id" : 6, "sku" :  {"a": "x", "b" : 1, "c" : [1, 2, 3]}, "description": "complex object" }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','inventory','{ "_id" : 7, "sku" : [{"a": { "b" : 1}}, [1, 2, 3], 1, "x"], "description": "complex array" }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','inventory','{ "_id" : 8, "sku" : [{"a": { "b" : 1}}, [1, 2, 3], 1, "x"], "description": "complex array" }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- Test filter generation 
SELECT bson_dollar_lookup_extract_filter_expression(document, '{"sku" : "item"}') FROM documentdb_api.collection('db', 'orders');
                                                            bson_dollar_lookup_extract_filter_expression                                                             
---------------------------------------------------------------------
 { "sku" : [ "almonds" ] }
 { "sku" : [ "pecans" ] }
 { "sku" : [ "bread" ] }
 { "sku" : [ "almonds", "bread", "pecans" ] }
 { "sku" : [ null ] }
 { "sku" : [ { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] } ] }
 { "sku" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ] }
(7 rows)

-- Test full lookup sql
WITH 
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"sku" : "item"}') 
	AS match FROM documentdb_api.collection('db', 'orders')) 
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'matched_docs'::text)
FROM t1 
LEFT JOIN LATERAL ( 
	SELECT COALESCE (array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
	FROM documentdb_api.collection('db', 'inventory') AS t2
	WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE;
                                                                                                                                                                                                                                                                                                                                      bson_dollar_lookup_project                                                                                                                                                                                                                                                                                                                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "4" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "2" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" } }, { "_id" : { "$numberInt" : "2" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" } }, { "_id" : { "$numberInt" : "4" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "5" }, "sku" : null, "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "6" }, "sku" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "description" : "complex object" } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "_id" : { "$numberInt" : "7" }, "sku" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "description" : "complex array" }, { "_id" : { "$numberInt" : "8" }, "sku" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "description" : "complex array" } ] }
(7 rows)

-- Create Index on Inventory
SELECT documentdb_api_internal.create_indexes_non_concurrently(
  'db',
  '{
     "createIndexes": "inventory",
     "indexes": [
       {"key": {"sku": 1}, "name": "idx_inventory_sku"}
     ]
   }',
   true
);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

-- Test Index pushdown
SELECT documentdb_distributed_test_helpers.drop_primary_key('db','inventory');
 drop_primary_key 
---------------------------------------------------------------------
 
(1 row)

BEGIN;
set local enable_seqscan TO off;
EXPLAIN(costs off) WITH                                                                                            
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"sku" : "item"}') 
AS match, 'mdocs' asname FROM documentdb_api.collection('db', 'orders')) 
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'matched_docs'::text)
FROM t1 
LEFT JOIN LATERAL ( 
SELECT COALESCE(array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
FROM documentdb_api.collection('db', 'inventory') AS t2 
WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE;
                                                                                                          QUERY PLAN                                                                                                           
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  ProjectSet
               ->  Nested Loop Left Join
                     ->  Bitmap Heap Scan on documents_6000_60000 collection
                           Recheck Cond: (shard_key_value = '6000'::bigint)
                           ->  Bitmap Index Scan on _id_
                                 Index Cond: (shard_key_value = '6000'::bigint)
                     ->  Aggregate
                           ->  Seq Scan on documents_6001_60016 t2
                                 Filter: (document OPERATOR(documentdb_api_catalog.@*=) documentdb_api_internal.bson_dollar_lookup_extract_filter_expression(collection.document, '{ "sku" : "item" }'::documentdb_core.bson))
(14 rows)

ROLLBACK;
-- Insert data into a new collection to be sharded (shard key can't be an array, but can be null or object)
SELECT documentdb_api.insert_one('db','orders_sharded',' { "_id" : 1, "item" : "almonds", "price" : 12, "quantity" : 2 }', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders_sharded','{ "_id" : 2, "item" : "pecans", "price" : 20, "quantity" : 1 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders_sharded',' { "_id" : 3, "item" : "bread", "price" : 10, "quantity" : 5 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders_sharded',' { "_id" : 4}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders_sharded',' { "_id" : 5, "item" : {"a": "x", "b" : 1, "c" : [1, 2, 3]} }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- Shard orders collection on item 
SELECT documentdb_api.shard_collection('db','orders_sharded', '{"item":"hashed"}', false);
 shard_collection 
---------------------------------------------------------------------
 
(1 row)

-- Test filter generation on sharded left collection
SELECT bson_dollar_lookup_extract_filter_expression(document, '{"sku" : "item"}') FROM documentdb_api.collection('db', 'orders_sharded');
                                                 bson_dollar_lookup_extract_filter_expression                                                  
---------------------------------------------------------------------
 { "sku" : [ "bread" ] }
 { "sku" : [ null ] }
 { "sku" : [ { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] } ] }
 { "sku" : [ "almonds" ] }
 { "sku" : [ "pecans" ] }
(5 rows)

-- Test Index pushdown on sharded left collection
BEGIN;
set local enable_seqscan TO off;
SET JIT To off;
SELECT documentdb_distributed_test_helpers.mask_plan_id_from_distributed_subplan($Q$
EXPLAIN(costs off) 
WITH                                                                                            
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"sku" : "item"}') 
	AS match, 'mdocs' asname FROM documentdb_api.collection('db', 'orders_sharded')) 
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'matched_docs'::text)
FROM t1 
LEFT JOIN LATERAL ( 
	SELECT COALESCE(array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
	FROM documentdb_api.collection('db', 'inventory') AS t2 
	WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE;
$Q$);
                                       mask_plan_id_from_distributed_subplan                                       
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   ->  Distributed Subplan X_X
         ->  Custom Scan (Citus Adaptive)
               Task Count: 8
               Tasks Shown: One of 8
               ->  Task
                     Node: host=localhost port=58070 dbname=regression
                     ->  Seq Scan on documents_6002_60048 documents_6002
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  ProjectSet
               ->  Nested Loop Left Join
                     ->  Function Scan on read_intermediate_result intermediate_result
                     ->  Aggregate
                           ->  Seq Scan on documents_6001_60016 t2
                                 Filter: (document OPERATOR(documentdb_api_catalog.@*=) intermediate_result.match)
(18 rows)

ROLLBACK;
SELECT shard_key_value, object_id, document FROM documentdb_api.collection('db', 'orders_sharded') order by object_id;
   shard_key_value    |            object_id            |                                                                                  document                                                                                  
---------------------------------------------------------------------
 -6635625778485026571 | { "" : { "$numberInt" : "1" } } | { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" } }
  5160081388224032253 | { "" : { "$numberInt" : "2" } } | { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" } }
  6496444547507792679 | { "" : { "$numberInt" : "3" } } | { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" } }
 -4514028574017177401 | { "" : { "$numberInt" : "4" } } | { "_id" : { "$numberInt" : "4" } }
  8428415592906042960 | { "" : { "$numberInt" : "5" } } | { "_id" : { "$numberInt" : "5" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] } }
(5 rows)

-- Test lookup on sharded left collection
WITH 
t1_0 AS(SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"sku" : "item"}') 
  AS lookup_filters FROM documentdb_api.collection('db', 'orders_sharded')) 
SELECT bson_dollar_lookup_project(t1_0.document, t2_0_agg.matched_array , 'matched_docs'::text) as document 
FROM t1_0 LEFT JOIN LATERAL ( 
    WITH "LookupStage_0_0" as (SELECT * FROM documentdb_api.collection('db', 'inventory') AS t2_0 WHERE bson_dollar_in(t2_0.document, t1_0.lookup_filters) ) 
    SELECT COALESCE(array_agg("LookupStage_0_0".document::documentdb_core.bson), '{}'::bson[]) as matched_array FROM "LookupStage_0_0"
) t2_0_agg ON TRUE;
ERROR:  CTEs that refer to other subqueries are not supported in multi-shard queries
-- Test lookup on sharded left collection (rewrite avoiding the the CTE error)
WITH                                                                                            
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"sku" : "item"}') 
	AS match, 'mdocs' asname FROM documentdb_api.collection('db', 'orders_sharded')) 
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'matched_docs'::text)
FROM t1 
LEFT JOIN LATERAL ( 
	SELECT COALESCE(array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
	FROM documentdb_api.collection('db', 'inventory') AS t2 
	WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE;
                                                                                                                                                                                          bson_dollar_lookup_project                                                                                                                                                                                          
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "2" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" } } ] }
 { "_id" : { "$numberInt" : "4" }, "matched_docs" : [ { "_id" : { "$numberInt" : "5" }, "sku" : null, "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "5" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "6" }, "sku" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "description" : "complex object" } ] }
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "4" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
(5 rows)

 
-- Apply subpipeline on the out side of the join. This is a better execution plan since 
-- we are not applying the subpipeline on the entire 'from' collection
WITH simple_lookup as
(
WITH                                                                                            
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"sku" : "item"}') 
	AS match, 'mdocs' asname FROM documentdb_api.collection('db', 'orders_sharded'))
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'matched_docs'::text)
FROM t1 
-- perform lookup
LEFT JOIN LATERAL ( 
	SELECT COALESCE(array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
	FROM documentdb_api.collection('db', 'inventory') AS t2 
	WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE
) 
-- subpipeline moved down 
SELECT bson_dollar_add_fields(bson_dollar_lookup_project, '{"matched_docs.hello": "newsubpipelinefield"}') from simple_lookup;
                                                                                                                                                                                                                           bson_dollar_add_fields                                                                                                                                                                                                                           
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "2" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" }, "hello" : "newsubpipelinefield" } ] }
 { "_id" : { "$numberInt" : "4" }, "matched_docs" : [ { "_id" : { "$numberInt" : "5" }, "sku" : null, "description" : "product 4", "instock" : { "$numberInt" : "70" }, "hello" : "newsubpipelinefield" } ] }
 { "_id" : { "$numberInt" : "5" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "6" }, "sku" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "description" : "complex object", "hello" : "newsubpipelinefield" } ] }
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" }, "hello" : "newsubpipelinefield" }, { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" }, "hello" : "newsubpipelinefield" } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "4" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" }, "hello" : "newsubpipelinefield" } ] }
(5 rows)

WITH                                                                                            
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"sku" : "item"}') 
	AS match, 'mdocs' asname FROM documentdb_api.collection('db', 'orders_sharded')),
-- subpipeline moved up
t2 as (SELECT bson_dollar_add_fields(document, '{"matched_docs.hello": "newsubpipelinefield"}') as document from documentdb_api.collection('db', 'inventory'))
-- now perform lookup
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'matched_docs'::text)
FROM t1 
LEFT JOIN LATERAL ( 
	SELECT COALESCE(array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
	FROM t2 
	WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE;
                                                                                                                                                                                                                                              bson_dollar_lookup_project                                                                                                                                                                                                                                              
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "2" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" }, "matched_docs" : { "hello" : "newsubpipelinefield" } } ] }
 { "_id" : { "$numberInt" : "4" }, "matched_docs" : [ { "_id" : { "$numberInt" : "5" }, "sku" : null, "description" : "product 4", "instock" : { "$numberInt" : "70" }, "matched_docs" : { "hello" : "newsubpipelinefield" } } ] }
 { "_id" : { "$numberInt" : "5" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "6" }, "sku" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "description" : "complex object", "matched_docs" : { "hello" : "newsubpipelinefield" } } ] }
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" }, "matched_docs" : { "hello" : "newsubpipelinefield" } }, { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" }, "matched_docs" : { "hello" : "newsubpipelinefield" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "4" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" }, "matched_docs" : { "hello" : "newsubpipelinefield" } } ] }
(5 rows)

-- Lookup subpipeline applied after the join is done (this is the mongo semantics)
WITH lookup_stage as
(
  -- Create CTE for the left/source collection (say t1)
  WITH                                                                                            
    t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"sku" : "item"}') 
	  AS match, 'mdocs' asname FROM documentdb_api.collection('db', 'orders_sharded'))
  SELECT t1.document, t2_agg.document as matched
  FROM t1
  -- perform lateral join on the right collection (aka joined collection)
    LEFT JOIN LATERAL ( 
	  SELECT document
	  FROM documentdb_api.collection('db', 'inventory') AS t2 
	  WHERE bson_dollar_in(t2.document, t1.match) 
  ) t2_agg ON TRUE
),
-- Apply subpipeline after lateral join 
subpipeline_stage1 as ( SELECT lookup_stage.document, bson_dollar_add_fields(lookup_stage.matched, '{"new": "field"}') as matched from lookup_stage)
-- Aggregate the results so, if there multiple matches they are folded in an array
SELECT bson_dollar_lookup_project(subpipeline_stage1.document, 
                COALESCE(array_agg(subpipeline_stage1.matched::documentdb_core.bson), '{}'::bson[]), 'matched_docs'::text) FROM subpipeline_stage1
GROUP BY subpipeline_stage1.document;
                                                                                                                                                                                                         bson_dollar_lookup_project                                                                                                                                                                                                         
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "2" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" }, "new" : "field" } ] }
 { "_id" : { "$numberInt" : "5" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "6" }, "sku" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "description" : "complex object", "new" : "field" } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "4" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" }, "new" : "field" } ] }
 { "_id" : { "$numberInt" : "4" }, "matched_docs" : [ { "_id" : { "$numberInt" : "5" }, "sku" : null, "description" : "product 4", "instock" : { "$numberInt" : "70" }, "new" : "field" } ] }
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" }, "new" : "field" }, { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" }, "new" : "field" } ] }
(5 rows)

set citus.enable_local_execution to off;
-- Test lookup on sharded left collection
WITH 
t1_0 AS(SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"sku" : "item"}') 
  AS lookup_filters FROM documentdb_api.collection('db', 'orders_sharded')) 
SELECT bson_dollar_lookup_project(t1_0.document, t2_0_agg.matched_array , 'matched_docs'::text) as document 
FROM t1_0 LEFT JOIN LATERAL ( 
    WITH "LookupStage_0_0" as (SELECT * FROM documentdb_api.collection('db', 'inventory') AS t2_0 WHERE bson_dollar_in(t2_0.document, t1_0.lookup_filters) ) 
    SELECT COALESCE(array_agg("LookupStage_0_0".document::documentdb_core.bson), '{}'::bson[]) as matched_array FROM "LookupStage_0_0"
) t2_0_agg ON TRUE;
ERROR:  CTEs that refer to other subqueries are not supported in multi-shard queries
-- Test lookup on sharded left collection (rewrite avoiding the the CTE error)
WITH                                                                                            
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"sku" : "item"}') 
	AS match, 'mdocs' asname FROM documentdb_api.collection('db', 'orders_sharded')) 
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'matched_docs'::text)
FROM t1 
LEFT JOIN LATERAL ( 
	SELECT COALESCE(array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
	FROM documentdb_api.collection('db', 'inventory') AS t2 
	WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE;
                                                                                                                                                                                          bson_dollar_lookup_project                                                                                                                                                                                          
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "2" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" } } ] }
 { "_id" : { "$numberInt" : "4" }, "matched_docs" : [ { "_id" : { "$numberInt" : "5" }, "sku" : null, "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "5" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "6" }, "sku" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "description" : "complex object" } ] }
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "4" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
(5 rows)

 
-- Apply subpipeline on the out side of the join. This is a better execution plan since 
-- we are not applying the subpipeline on the entire 'from' collection
WITH simple_lookup as
(
WITH                                                                                            
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"sku" : "item"}') 
	AS match, 'mdocs' asname FROM documentdb_api.collection('db', 'orders_sharded'))
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'matched_docs'::text)
FROM t1 
-- perform lookup
LEFT JOIN LATERAL ( 
	SELECT COALESCE(array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
	FROM documentdb_api.collection('db', 'inventory') AS t2 
	WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE
) 
-- subpipeline moved down 
SELECT bson_dollar_add_fields(bson_dollar_lookup_project, '{"matched_docs.hello": "newsubpipelinefield"}') from simple_lookup;
                                                                                                                                                                                                                           bson_dollar_add_fields                                                                                                                                                                                                                           
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "2" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" }, "hello" : "newsubpipelinefield" } ] }
 { "_id" : { "$numberInt" : "4" }, "matched_docs" : [ { "_id" : { "$numberInt" : "5" }, "sku" : null, "description" : "product 4", "instock" : { "$numberInt" : "70" }, "hello" : "newsubpipelinefield" } ] }
 { "_id" : { "$numberInt" : "5" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "6" }, "sku" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "description" : "complex object", "hello" : "newsubpipelinefield" } ] }
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" }, "hello" : "newsubpipelinefield" }, { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" }, "hello" : "newsubpipelinefield" } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "4" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" }, "hello" : "newsubpipelinefield" } ] }
(5 rows)

WITH                                                                                            
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"sku" : "item"}') 
	AS match, 'mdocs' asname FROM documentdb_api.collection('db', 'orders_sharded')),
-- subpipeline moved up
t2 as (SELECT bson_dollar_add_fields(document, '{"matched_docs.hello": "newsubpipelinefield"}') as document from documentdb_api.collection('db', 'inventory'))
-- now perform lookup
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'matched_docs'::text)
FROM t1 
LEFT JOIN LATERAL ( 
	SELECT COALESCE(array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
	FROM t2 
	WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE;
                                                                                                                                                                                                                                              bson_dollar_lookup_project                                                                                                                                                                                                                                              
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "2" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" }, "matched_docs" : { "hello" : "newsubpipelinefield" } } ] }
 { "_id" : { "$numberInt" : "4" }, "matched_docs" : [ { "_id" : { "$numberInt" : "5" }, "sku" : null, "description" : "product 4", "instock" : { "$numberInt" : "70" }, "matched_docs" : { "hello" : "newsubpipelinefield" } } ] }
 { "_id" : { "$numberInt" : "5" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "6" }, "sku" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "description" : "complex object", "matched_docs" : { "hello" : "newsubpipelinefield" } } ] }
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" }, "matched_docs" : { "hello" : "newsubpipelinefield" } }, { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" }, "matched_docs" : { "hello" : "newsubpipelinefield" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "4" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" }, "matched_docs" : { "hello" : "newsubpipelinefield" } } ] }
(5 rows)

-- Lookup subpipeline applied after the join is done (this is the mongo semantics)
WITH lookup_stage as
(
  -- Create CTE for the left/source collection (say t1)
  WITH                                                                                            
    t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"sku" : "item"}') 
	  AS match, 'mdocs' asname FROM documentdb_api.collection('db', 'orders_sharded'))
  SELECT t1.document, t2_agg.document as matched
  FROM t1
  -- perform lateral join on the right collection (aka joined collection)
    LEFT JOIN LATERAL ( 
	  SELECT document
	  FROM documentdb_api.collection('db', 'inventory') AS t2 
	  WHERE bson_dollar_in(t2.document, t1.match) 
  ) t2_agg ON TRUE
),
-- Apply subpipeline after lateral join 
subpipeline_stage1 as ( SELECT lookup_stage.document, bson_dollar_add_fields(lookup_stage.matched, '{"new": "field"}') as matched from lookup_stage)
-- Aggregate the results so, if there multiple matches they are folded in an array
SELECT bson_dollar_lookup_project(subpipeline_stage1.document, 
                COALESCE(array_agg(subpipeline_stage1.matched::documentdb_core.bson), '{}'::bson[]), 'matched_docs'::text) FROM subpipeline_stage1
GROUP BY subpipeline_stage1.document;
                                                                                                                                                                                                         bson_dollar_lookup_project                                                                                                                                                                                                         
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "2" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" }, "new" : "field" } ] }
 { "_id" : { "$numberInt" : "5" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "6" }, "sku" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "description" : "complex object", "new" : "field" } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "4" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" }, "new" : "field" } ] }
 { "_id" : { "$numberInt" : "4" }, "matched_docs" : [ { "_id" : { "$numberInt" : "5" }, "sku" : null, "description" : "product 4", "instock" : { "$numberInt" : "70" }, "new" : "field" } ] }
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" }, "new" : "field" }, { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" }, "new" : "field" } ] }
(5 rows)

set citus.enable_local_execution to on;
-- Test coalesce path, return empty array when no match found 
SELECT documentdb_api.insert_one('db','coll','{"_id": 0, "a": 1}', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','coll','{"_id": 1, "a": null}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','coll','{"_id": 2}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','from','{"_id": 0, "b": 1}', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','from','{"_id": 1, "b": null}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','from','{"_id": 2}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT bson_dollar_lookup_extract_filter_expression(document, '{"nonex" : "a"}') FROM documentdb_api.collection('db', 'coll');
 bson_dollar_lookup_extract_filter_expression 
---------------------------------------------------------------------
 { "nonex" : [ { "$numberInt" : "1" } ] }
 { "nonex" : [ null ] }
 { "nonex" : [ null ] }
(3 rows)

WITH 
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"nonex" : "a"}') 
	AS match FROM documentdb_api.collection('db', 'coll')) 
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'matched_docs'::text)
FROM t1 
LEFT JOIN LATERAL ( 
	SELECT COALESCE(array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
	FROM documentdb_api.collection('db', 'from') AS t2 
	WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE;
                                                                                                bson_dollar_lookup_project                                                                                                 
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "0" }, "a" : { "$numberInt" : "1" }, "matched_docs" : [  ] }
 { "_id" : { "$numberInt" : "1" }, "a" : null, "matched_docs" : [ { "_id" : { "$numberInt" : "0" }, "b" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "1" }, "b" : null }, { "_id" : { "$numberInt" : "2" } } ] }
 { "_id" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "0" }, "b" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "1" }, "b" : null }, { "_id" : { "$numberInt" : "2" } } ] }
(3 rows)

-- Test dotted path
SELECT documentdb_api.insert_one('db','coll1','{"_id": 0, "a": 1}', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','coll1','{"_id": 1, "a": null}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','coll1','{"_id": 2}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','coll1','{"_id": 3, "a": {"c": 1}}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','from1','{"_id": 0, "b": 1}', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','from1','{"_id": 1, "b": null}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','from1','{"_id": 2}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','from1','{"_id": 3, "b": {"c" : 1}}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','from1','{"_id": 4, "b": {"c" : 2}}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT bson_dollar_lookup_extract_filter_expression(document, '{"b.c" : "a.c"}') FROM documentdb_api.collection('db', 'coll1');
 bson_dollar_lookup_extract_filter_expression 
---------------------------------------------------------------------
 { "b.c" : [ null ] }
 { "b.c" : [ null ] }
 { "b.c" : [ null ] }
 { "b.c" : [ { "$numberInt" : "1" } ] }
(4 rows)

WITH 
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"b.c" : "a.c"}') 
	AS match FROM documentdb_api.collection('db', 'coll1')) 
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'matched_docs'::text)
FROM t1 
LEFT JOIN LATERAL ( 
	SELECT COALESCE(array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
	FROM documentdb_api.collection('db', 'from1') AS t2 
	WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE;
                                                                                                         bson_dollar_lookup_project                                                                                                          
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "0" }, "a" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "0" }, "b" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "1" }, "b" : null }, { "_id" : { "$numberInt" : "2" } } ] }
 { "_id" : { "$numberInt" : "1" }, "a" : null, "matched_docs" : [ { "_id" : { "$numberInt" : "0" }, "b" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "1" }, "b" : null }, { "_id" : { "$numberInt" : "2" } } ] }
 { "_id" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "0" }, "b" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "1" }, "b" : null }, { "_id" : { "$numberInt" : "2" } } ] }
 { "_id" : { "$numberInt" : "3" }, "a" : { "c" : { "$numberInt" : "1" } }, "matched_docs" : [ { "_id" : { "$numberInt" : "3" }, "b" : { "c" : { "$numberInt" : "1" } } } ] }
(4 rows)

-- Empty from collection tests
SELECT * FROM documentdb_api.collection('db', 'from1NonExistent');
 shard_key_value | object_id | document | creation_time 
---------------------------------------------------------------------
(0 rows)

WITH 
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"b.c" : "a.c"}') 
	AS match FROM documentdb_api.collection('db', 'coll1')) 
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'matched_docs'::text)
FROM t1 
LEFT JOIN LATERAL ( 
	SELECT COALESCE(array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
	FROM documentdb_api.collection('db', 'from1NonExistent') AS t2 
	WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE;
                                    bson_dollar_lookup_project                                     
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "0" }, "a" : { "$numberInt" : "1" }, "matched_docs" : [  ] }
 { "_id" : { "$numberInt" : "1" }, "a" : null, "matched_docs" : [  ] }
 { "_id" : { "$numberInt" : "2" }, "matched_docs" : [  ] }
 { "_id" : { "$numberInt" : "3" }, "a" : { "c" : { "$numberInt" : "1" } }, "matched_docs" : [  ] }
(4 rows)

-- Dotted path on mathched array name (some.documents)
SELECT documentdb_api.insert_one('db','coll2','{"_id": 0, "a": {"b" : 1}}', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','coll2','{"_id": 1}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','from2','{"_id": 0, "target": 1}', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT bson_dollar_lookup_extract_filter_expression(document, '{"target" : "a.b"}') FROM documentdb_api.collection('db', 'coll2');
 bson_dollar_lookup_extract_filter_expression 
---------------------------------------------------------------------
 { "target" : [ { "$numberInt" : "1" } ] }
 { "target" : [ null ] }
(2 rows)

WITH 
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"target" : "a.b"}') 
	AS match FROM documentdb_api.collection('db', 'coll2')) 
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'same.documents'::text)
FROM t1 
LEFT JOIN LATERAL ( 
	SELECT COALESCE(array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
	FROM documentdb_api.collection('db', 'from2') AS t2 
	WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE;
                                                                            bson_dollar_lookup_project                                                                            
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "0" }, "a" : { "b" : { "$numberInt" : "1" } }, "same" : { "documents" : [ { "_id" : { "$numberInt" : "0" }, "target" : { "$numberInt" : "1" } } ] } }
 { "_id" : { "$numberInt" : "1" }, "same" : { "documents" : [  ] } }
(2 rows)

-- Dotted path that goes through objects and arrays 
SELECT documentdb_api.insert_one('db','dottedObject','{"_id": 0, "a": [{"b": 1}, {"b": 2}]}', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','dottedObjectFrom','{"_id": 0}', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','dottedObjectFrom','{"_id": 1}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','dottedObjectFrom','{"_id": 2}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT bson_dollar_lookup_extract_filter_expression(document, '{"_id" : "a.b"}') FROM documentdb_api.collection('db', 'dottedObject');
          bson_dollar_lookup_extract_filter_expression          
---------------------------------------------------------------------
 { "_id" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }
(1 row)

-- Dotted AS path that is already present in the left document 
SELECT documentdb_api.insert_one('db','dottedExistingAs','{"_id": 0, "a": [{"b": 1}, {"b": 2}]}', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','dottedExistingAs','{"_id": 1, "c": [{"d": 1}, {"d": 2}]}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT bson_dollar_lookup_extract_filter_expression(document, '{"c.d" : "a.b"}') FROM documentdb_api.collection('db', 'dottedExistingAs');
          bson_dollar_lookup_extract_filter_expression          
---------------------------------------------------------------------
 { "c.d" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }
 { "c.d" : [ null ] }
(2 rows)

WITH 
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"c.d" : "a.b"}') 
	AS match FROM documentdb_api.collection('db', 'dottedExistingAs')) 
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'a.b'::text)
FROM t1 
LEFT JOIN LATERAL ( 
	SELECT COALESCE(array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
	FROM documentdb_api.collection('db', 'dottedExistingAs') AS t2 
	WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE;
                                                                                                                                          bson_dollar_lookup_project                                                                                                                                          
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "0" }, "a" : [ { "b" : [ { "_id" : { "$numberInt" : "1" }, "c" : [ { "d" : { "$numberInt" : "1" } }, { "d" : { "$numberInt" : "2" } } ] } ] }, { "b" : [ { "_id" : { "$numberInt" : "1" }, "c" : [ { "d" : { "$numberInt" : "1" } }, { "d" : { "$numberInt" : "2" } } ] } ] } ] }
 { "_id" : { "$numberInt" : "1" }, "c" : [ { "d" : { "$numberInt" : "1" } }, { "d" : { "$numberInt" : "2" } } ], "a" : { "b" : [ { "_id" : { "$numberInt" : "0" }, "a" : [ { "b" : { "$numberInt" : "1" } }, { "b" : { "$numberInt" : "2" } } ] } ] } }
(2 rows)

-- (B) Lookup with pipeline support
-- (B).1 Data Ingestion
SELECT documentdb_api.insert_one('db','pipelinefrom',' {"_id": 1, "name": "American Steak House", "food": ["filet", "sirloin"], "quantity": 100 , "beverages": ["beer", "wine"]}', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','pipelinefrom','{ "_id": 2, "name": "Honest John Pizza", "food": ["cheese pizza", "pepperoni pizza"], "quantity": 120, "beverages": ["soda"]}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','pipelineto','{ "_id": 1, "item": "filet", "restaurant_name": "American Steak House"}', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','pipelineto','{ "_id": 2, "item": "cheese pizza", "restaurant_name": "Honest John Pizza", "drink": "lemonade"}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','pipelineto','{ "_id": 3, "item": "cheese pizza", "restaurant_name": "Honest John Pizza", "drink": "soda"}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- (B).1 Simple Lookup with pipeline
-- {
-- 	$lookup :
-- 	{
-- 		from : pipelinefrom,
--		to:	pipelineto,
--		localField: restaurant_name,
--		foreignField: name,
--		pipeline: {
--			[
--				{
--					$match :  { quantity : { $gt, 110}}
--				}
--			]
--		}
--	}
--}
SELECT document from bson_aggregation_pipeline('db', 
  '{ "aggregate": "pipelineto", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "pipeline": [ { "$match": { "quantity": { "$gt": 110 } }}], "as": "matched_docs", "localField": "restaurant_name", "foreignField": "name" }} ], "cursor": {} }');
                                                                                                                                                              document                                                                                                                                                              
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "filet", "restaurant_name" : "American Steak House", "matched_docs" : [  ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "cheese pizza", "restaurant_name" : "Honest John Pizza", "drink" : "lemonade", "matched_docs" : [ { "_id" : { "$numberInt" : "2" }, "name" : "Honest John Pizza", "food" : [ "cheese pizza", "pepperoni pizza" ], "quantity" : { "$numberInt" : "120" }, "beverages" : [ "soda" ] } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "cheese pizza", "restaurant_name" : "Honest John Pizza", "drink" : "soda", "matched_docs" : [ { "_id" : { "$numberInt" : "2" }, "name" : "Honest John Pizza", "food" : [ "cheese pizza", "pepperoni pizza" ], "quantity" : { "$numberInt" : "120" }, "beverages" : [ "soda" ] } ] }
(3 rows)

-- (B).2 Index creation on the from collection
  SELECT documentdb_api_internal.create_indexes_non_concurrently(
  'db',
  '{
     "createIndexes": "pipelinefrom",
     "indexes": [
       {"key": {"name": 1}, "name": "idx_pipelinefrom_name"},
	     {"key": {"quantity": 1}, "name": "idx_pipelinefrom_quantity"}
     ]
   }',
   true
);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "3" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

-- (B).3.a Index usage
BEGIN;
SET LOCAL enable_seqscan TO off;
EXPLAIN(costs off) SELECT document from bson_aggregation_pipeline('db', 
  '{ "aggregate": "pipelineto", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "pipeline": [ { "$match": { "quantity": { "$gt": 110 } }}], "as": "matched_docs", "localField": "restaurant_name", "foreignField": "name" }} ], "cursor": {} }');
                                                                                                                             QUERY PLAN                                                                                                                              
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Nested Loop Left Join
               ->  Bitmap Heap Scan on documents_6013_60220 collection
                     Recheck Cond: (shard_key_value = '6013'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (shard_key_value = '6013'::bigint)
               ->  Aggregate
                     ->  Bitmap Heap Scan on documents_6012_60207 collection_0_1
                           Recheck Cond: (document OPERATOR(documentdb_api_catalog.@>) '{ "quantity" : { "$numberInt" : "110" } }'::documentdb_core.bson)
                           Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(document, documentdb_api_internal.bson_dollar_lookup_extract_filter_expression(collection.document, '{ "name" : "restaurant_name" }'::documentdb_core.bson), 'name'::text)
                           ->  Bitmap Index Scan on idx_pipelinefrom_quantity
                                 Index Cond: (document OPERATOR(documentdb_api_catalog.@>) '{ "quantity" : { "$numberInt" : "110" } }'::documentdb_core.bson)
(16 rows)

ROLLBACK;
-- Adding a $sort in the pipeline
BEGIN;
EXPLAIN(costs off) SELECT document from bson_aggregation_pipeline('db', 
  '{ "aggregate": "pipelineto", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "pipeline": [ { "$match": { "quantity": { "$gt": 110 } }}, { "$sort": { "_id": 1 }}], "as": "matched_docs", "localField": "restaurant_name", "foreignField": "name" }} ], "cursor": {} }');
                                                                                                                                                                                            QUERY PLAN                                                                                                                                                                                            
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Nested Loop Left Join
               ->  Bitmap Heap Scan on documents_6013_60220 collection
                     Recheck Cond: (shard_key_value = '6013'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (shard_key_value = '6013'::bigint)
               ->  Aggregate
                     ->  Sort
                           Sort Key: collection_0_1.object_id
                           ->  Seq Scan on documents_6012_60207 collection_0_1
                                 Filter: ((document OPERATOR(documentdb_api_catalog.@>) '{ "quantity" : { "$numberInt" : "110" } }'::documentdb_core.bson) AND documentdb_api_internal.bson_dollar_lookup_join_filter(document, documentdb_api_internal.bson_dollar_lookup_extract_filter_expression(collection.document, '{ "name" : "restaurant_name" }'::documentdb_core.bson), 'name'::text))
(15 rows)

ROLLBACK;
BEGIN;
SELECT document from bson_aggregation_pipeline('db', 
  '{ "aggregate": "pipelineto", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "pipeline": [ { "$match": { "quantity": { "$gt": 110 } }}, { "$sort": { "_id": 1 }}], "as": "matched_docs", "localField": "restaurant_name", "foreignField": "name" }} ], "cursor": {} }');
                                                                                                                                                              document                                                                                                                                                              
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "filet", "restaurant_name" : "American Steak House", "matched_docs" : [  ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "cheese pizza", "restaurant_name" : "Honest John Pizza", "drink" : "lemonade", "matched_docs" : [ { "_id" : { "$numberInt" : "2" }, "name" : "Honest John Pizza", "food" : [ "cheese pizza", "pepperoni pizza" ], "quantity" : { "$numberInt" : "120" }, "beverages" : [ "soda" ] } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "cheese pizza", "restaurant_name" : "Honest John Pizza", "drink" : "soda", "matched_docs" : [ { "_id" : { "$numberInt" : "2" }, "name" : "Honest John Pizza", "food" : [ "cheese pizza", "pepperoni pizza" ], "quantity" : { "$numberInt" : "120" }, "beverages" : [ "soda" ] } ] }
(3 rows)

ROLLBACK;
-- (B).3.b Index usage with optimization: (if lookup has a join condition and the lookup pipeline has $match as the first 
-- stage we push the $match filter up with the join. If both conditions are one same property both the filters should be 
-- part of the index condition)
BEGIN;
SET LOCAL enable_seqscan TO off;
EXPLAIN(costs off) SELECT document from bson_aggregation_pipeline('db', 
  '{ "aggregate": "pipelineto", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "pipeline": [ { "$match": { "name" : { "$eq" : "Honest John Pizza" } }}], "as": "matched_docs", "localField": "restaurant_name", "foreignField": "name" }} ], "cursor": {} }');
                                                                                                                                                                         QUERY PLAN                                                                                                                                                                          
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Nested Loop Left Join
               ->  Bitmap Heap Scan on documents_6013_60220 collection
                     Recheck Cond: (shard_key_value = '6013'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (shard_key_value = '6013'::bigint)
               ->  Aggregate
                     ->  Bitmap Heap Scan on documents_6012_60207 collection_0_1
                           Recheck Cond: (document OPERATOR(documentdb_api_catalog.@=) '{ "name" : "Honest John Pizza" }'::documentdb_core.bson)
                           Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(document, documentdb_api_internal.bson_dollar_lookup_extract_filter_expression(collection.document, '{ "name" : "restaurant_name" }'::documentdb_core.bson), 'name'::text)
                           ->  Bitmap Index Scan on idx_pipelinefrom_name
                                 Index Cond: ((document OPERATOR(documentdb_api_catalog.@=) '{ "name" : "Honest John Pizza" }'::documentdb_core.bson) AND (document OPERATOR(documentdb_api_catalog.@*=) documentdb_api_internal.bson_dollar_lookup_extract_filter_expression(collection.document, '{ "name" : "restaurant_name" }'::documentdb_core.bson)))
(16 rows)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan TO off;
EXPLAIN(costs off) SELECT document from bson_aggregation_pipeline('db', 
  '{ "aggregate": "pipelineto", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "pipeline": [ { "$match": { "name" : { "$eq" : "Honest John Pizza" } }}], "as": "matched_docs", "localField": "restaurant_name", "foreignField": "name" }} ], "cursor": {} }');
                                                                                                                                                                         QUERY PLAN                                                                                                                                                                          
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Nested Loop Left Join
               ->  Bitmap Heap Scan on documents_6013_60220 collection
                     Recheck Cond: (shard_key_value = '6013'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (shard_key_value = '6013'::bigint)
               ->  Aggregate
                     ->  Bitmap Heap Scan on documents_6012_60207 collection_0_1
                           Recheck Cond: (document OPERATOR(documentdb_api_catalog.@=) '{ "name" : "Honest John Pizza" }'::documentdb_core.bson)
                           Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(document, documentdb_api_internal.bson_dollar_lookup_extract_filter_expression(collection.document, '{ "name" : "restaurant_name" }'::documentdb_core.bson), 'name'::text)
                           ->  Bitmap Index Scan on idx_pipelinefrom_name
                                 Index Cond: ((document OPERATOR(documentdb_api_catalog.@=) '{ "name" : "Honest John Pizza" }'::documentdb_core.bson) AND (document OPERATOR(documentdb_api_catalog.@*=) documentdb_api_internal.bson_dollar_lookup_extract_filter_expression(collection.document, '{ "name" : "restaurant_name" }'::documentdb_core.bson)))
(16 rows)

ROLLBACK;
-- (B).4 Nested lookup pipeline (lookup pipeline containing lookup)
-- {
-- 	$lookup :
-- 	{
-- 		from : pipelinefrom,
--		to:	pipelineto,
--		localField: restaurant_name,
--		foreignField: name,
--		pipeline: {
--			[
--				{
--					$lookup :  {
-- 						from : pipelinefrom,
--						to:	pipelinefrom,
--						localField: _id,
--						foreignField: _id,
--						pipeline: {
--							[
--								{ unwind : "food"}
--							]
--						}
--					}
--				}
--			]
--		}
--	}
--}
SELECT document from bson_aggregation_pipeline('db', 
  '{ "aggregate": "pipelineto", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "localField": "_id", "foreignField": "_id", "pipeline": [ { "$unwind": "$food" } ], "as": "matched_docs_id" } } ], "as": "matched_docs", "localField": "restaurant_name", "foreignField": "name" }} ], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                       document                                                                                                                                                                                                                                                                                                                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "filet", "restaurant_name" : "American Steak House", "matched_docs" : [ { "_id" : { "$numberInt" : "1" }, "name" : "American Steak House", "food" : [ "filet", "sirloin" ], "quantity" : { "$numberInt" : "100" }, "beverages" : [ "beer", "wine" ], "matched_docs_id" : [ { "_id" : { "$numberInt" : "1" }, "name" : "American Steak House", "food" : "filet", "quantity" : { "$numberInt" : "100" }, "beverages" : [ "beer", "wine" ] }, { "_id" : { "$numberInt" : "1" }, "name" : "American Steak House", "food" : "sirloin", "quantity" : { "$numberInt" : "100" }, "beverages" : [ "beer", "wine" ] } ] } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "cheese pizza", "restaurant_name" : "Honest John Pizza", "drink" : "lemonade", "matched_docs" : [ { "_id" : { "$numberInt" : "2" }, "name" : "Honest John Pizza", "food" : [ "cheese pizza", "pepperoni pizza" ], "quantity" : { "$numberInt" : "120" }, "beverages" : [ "soda" ], "matched_docs_id" : [ { "_id" : { "$numberInt" : "2" }, "name" : "Honest John Pizza", "food" : "cheese pizza", "quantity" : { "$numberInt" : "120" }, "beverages" : [ "soda" ] }, { "_id" : { "$numberInt" : "2" }, "name" : "Honest John Pizza", "food" : "pepperoni pizza", "quantity" : { "$numberInt" : "120" }, "beverages" : [ "soda" ] } ] } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "cheese pizza", "restaurant_name" : "Honest John Pizza", "drink" : "soda", "matched_docs" : [ { "_id" : { "$numberInt" : "2" }, "name" : "Honest John Pizza", "food" : [ "cheese pizza", "pepperoni pizza" ], "quantity" : { "$numberInt" : "120" }, "beverages" : [ "soda" ], "matched_docs_id" : [ { "_id" : { "$numberInt" : "2" }, "name" : "Honest John Pizza", "food" : "cheese pizza", "quantity" : { "$numberInt" : "120" }, "beverages" : [ "soda" ] }, { "_id" : { "$numberInt" : "2" }, "name" : "Honest John Pizza", "food" : "pepperoni pizza", "quantity" : { "$numberInt" : "120" }, "beverages" : [ "soda" ] } ] } ] }
(3 rows)

-- (B).5 Nested lookup pipeline (lookup pipeline containing lookup) index usage
BEGIN;
SET LOCAL enable_seqscan TO off;
EXPLAIN(costs off) SELECT document from bson_aggregation_pipeline('db', 
  '{ "aggregate": "pipelineto", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "localField": "_id", "foreignField": "_id", "pipeline": [ { "$unwind": "$food" } ], "as": "matched_docs_id" } } ], "as": "matched_docs", "localField": "restaurant_name", "foreignField": "name" }} ], "cursor": {} }');
                                                                                                                                                                      QUERY PLAN                                                                                                                                                                      
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Nested Loop Left Join
               ->  Bitmap Heap Scan on documents_6013_60220 collection
                     Recheck Cond: (shard_key_value = '6013'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (shard_key_value = '6013'::bigint)
               ->  Aggregate
                     ->  Nested Loop Left Join
                           Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(documentdb_api_internal.bson_dollar_merge_documents(collection_0_1.document, (SubPlan 2)), documentdb_api_internal.bson_dollar_lookup_extract_filter_expression(collection.document, '{ "name" : "restaurant_name" }'::documentdb_core.bson), 'name'::text)
                           ->  Index Scan using _id_ on documents_6012_60207 collection_0_1
                                 Index Cond: (shard_key_value = '6012'::bigint)
                           ->  Aggregate
                                 ->  Index Scan using _id_ on documents_6012_60207 collection_0_2
                                       Index Cond: ((shard_key_value = '6012'::bigint) AND (object_id OPERATOR(documentdb_core.=) collection_0_1.object_id))
                           SubPlan 2
                             ->  Aggregate
                                   ->  ProjectSet
                                         ->  Function Scan on bson_lookup_unwind lookup_subpipeline_substage_1_1
                     SubPlan 1
                       ->  Aggregate
                             ->  ProjectSet
                                   ->  Function Scan on bson_lookup_unwind lookup_subpipeline_substage_1
(26 rows)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan TO off;
EXPLAIN(costs off) SELECT document from bson_aggregation_pipeline('db', 
  '{ "aggregate": "pipelineto", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "localField": "_id", "foreignField": "_id", "as": "matched_docs_id" } } ], "cursor": {} }');
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Nested Loop Left Join
               ->  Bitmap Heap Scan on documents_6013_60220 collection
                     Recheck Cond: (shard_key_value = '6013'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (shard_key_value = '6013'::bigint)
               ->  Aggregate
                     ->  Index Scan using _id_ on documents_6012_60207 collection_0_1
                           Index Cond: ((shard_key_value = '6012'::bigint) AND (object_id OPERATOR(documentdb_core.=) collection.object_id))
(13 rows)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan TO off;
EXPLAIN(costs off) SELECT document from bson_aggregation_pipeline('db', 
  '{ "aggregate": "pipelineto", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "localField": "_id", "foreignField": "_id", "as": "matched_docs_id" } } ], "cursor": {} }');
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Nested Loop Left Join
               ->  Bitmap Heap Scan on documents_6013_60220 collection
                     Recheck Cond: (shard_key_value = '6013'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (shard_key_value = '6013'::bigint)
               ->  Aggregate
                     ->  Index Scan using _id_ on documents_6012_60207 collection_0_1
                           Index Cond: ((shard_key_value = '6012'::bigint) AND (object_id OPERATOR(documentdb_core.=) collection.object_id))
(13 rows)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan TO off;
EXPLAIN(costs off) SELECT document from bson_aggregation_pipeline('db', 
  '{ "aggregate": "pipelineto", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "localField": "_id", "foreignField": "_id", "pipeline": [ { "$project": { "bar": "$food" } } ], "as": "matched_docs_id" } } ], "as": "matched_docs", "localField": "restaurant_name", "foreignField": "name" }} ], "cursor": {} }');
                                                                                                                                                                      QUERY PLAN                                                                                                                                                                      
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Nested Loop Left Join
               ->  Bitmap Heap Scan on documents_6013_60220 collection
                     Recheck Cond: (shard_key_value = '6013'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (shard_key_value = '6013'::bigint)
               ->  Aggregate
                     ->  Nested Loop Left Join
                           Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(documentdb_api_internal.bson_dollar_merge_documents(collection_0_1.document, (SubPlan 2)), documentdb_api_internal.bson_dollar_lookup_extract_filter_expression(collection.document, '{ "name" : "restaurant_name" }'::documentdb_core.bson), 'name'::text)
                           ->  Index Scan using _id_ on documents_6012_60207 collection_0_1
                                 Index Cond: (shard_key_value = '6012'::bigint)
                           ->  Aggregate
                                 ->  Index Scan using _id_ on documents_6012_60207 collection_0_2
                                       Index Cond: ((shard_key_value = '6012'::bigint) AND (object_id OPERATOR(documentdb_core.=) collection_0_1.object_id))
                           SubPlan 2
                             ->  Aggregate
                                   ->  Function Scan on bson_lookup_unwind lookup_subpipeline_substage_1_1
                     SubPlan 1
                       ->  Aggregate
                             ->  Function Scan on bson_lookup_unwind lookup_subpipeline_substage_1
(24 rows)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan TO off;
EXPLAIN(costs off) SELECT document from bson_aggregation_pipeline('db', 
  '{ "aggregate": "pipelineto", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "localField": "_id", "foreignField": "_id", "pipeline": [ { "$sort": { "food": 1 } } ], "as": "matched_docs_id" } } ], "as": "matched_docs", "localField": "restaurant_name", "foreignField": "name" }} ], "cursor": {} }');
                                                                                                                                                                      QUERY PLAN                                                                                                                                                                      
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Nested Loop Left Join
               ->  Bitmap Heap Scan on documents_6013_60220 collection
                     Recheck Cond: (shard_key_value = '6013'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (shard_key_value = '6013'::bigint)
               ->  Aggregate
                     ->  Nested Loop Left Join
                           Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(documentdb_api_internal.bson_dollar_merge_documents(collection_0_1.document, (SubPlan 2)), documentdb_api_internal.bson_dollar_lookup_extract_filter_expression(collection.document, '{ "name" : "restaurant_name" }'::documentdb_core.bson), 'name'::text)
                           ->  Index Scan using _id_ on documents_6012_60207 collection_0_1
                                 Index Cond: (shard_key_value = '6012'::bigint)
                           ->  Aggregate
                                 ->  Index Scan using _id_ on documents_6012_60207 collection_0_2
                                       Index Cond: ((shard_key_value = '6012'::bigint) AND (object_id OPERATOR(documentdb_core.=) collection_0_1.object_id))
                           SubPlan 2
                             ->  Aggregate
                                   ->  Sort
                                         Sort Key: (documentdb_api_catalog.bson_orderby(lookup_subpipeline_substage_1_1.lookup_unwind, '{ "food" : { "$numberInt" : "1" } }'::documentdb_core.bson)) NULLS FIRST
                                         ->  Function Scan on bson_lookup_unwind lookup_subpipeline_substage_1_1
                     SubPlan 1
                       ->  Aggregate
                             ->  Sort
                                   Sort Key: (documentdb_api_catalog.bson_orderby(lookup_subpipeline_substage_1.lookup_unwind, '{ "food" : { "$numberInt" : "1" } }'::documentdb_core.bson)) NULLS FIRST
                                   ->  Function Scan on bson_lookup_unwind lookup_subpipeline_substage_1
(28 rows)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan TO off;
EXPLAIN(costs off) SELECT document from bson_aggregation_pipeline('db', 
  '{ "aggregate": "pipelineto", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "pipeline": [ { "$lookup": { "from": "pipelinefrom", "localField": "_id", "foreignField": "_id", "pipeline": [ { "$project": { "_id": "bar" } } ], "as": "matched_docs_id" } } ], "as": "matched_docs", "localField": "restaurant_name", "foreignField": "name" }} ], "cursor": {} }');
                                                                                                                                                                      QUERY PLAN                                                                                                                                                                      
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Nested Loop Left Join
               ->  Bitmap Heap Scan on documents_6013_60220 collection
                     Recheck Cond: (shard_key_value = '6013'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (shard_key_value = '6013'::bigint)
               ->  Aggregate
                     ->  Nested Loop Left Join
                           Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(documentdb_api_internal.bson_dollar_merge_documents(collection_0_1.document, (SubPlan 2)), documentdb_api_internal.bson_dollar_lookup_extract_filter_expression(collection.document, '{ "name" : "restaurant_name" }'::documentdb_core.bson), 'name'::text)
                           ->  Index Scan using _id_ on documents_6012_60207 collection_0_1
                                 Index Cond: (shard_key_value = '6012'::bigint)
                           ->  Aggregate
                                 ->  Index Scan using _id_ on documents_6012_60207 collection_0_2
                                       Index Cond: ((shard_key_value = '6012'::bigint) AND (object_id OPERATOR(documentdb_core.=) collection_0_1.object_id))
                           SubPlan 2
                             ->  Aggregate
                                   ->  Function Scan on bson_lookup_unwind lookup_subpipeline_substage_1_1
                     SubPlan 1
                       ->  Aggregate
                             ->  Function Scan on bson_lookup_unwind lookup_subpipeline_substage_1
(24 rows)

ROLLBACK;
-- Lookup Tests for array index-based paths
SELECT documentdb_api.insert_one('db','orders1',' { "_id" : 1, "a" : [ {"x" : 1}] }', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders1',' { "_id" : 2, "a" : {"x" : 1} }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders1',' { "_id" : 3, "a" : [{"x": 2}, {"x": 1}] }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders1',' { "_id" : 4, "a" : [{"y": 1}, {"x": 1}] }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders1',' { "_id" : 5, "a" : [2, 3] }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders1',' { "_id" : 6, "a" : {"x": [1, 2]} }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders1',' { "_id" : 7, "a" : [{"x": 1}, {"y": 1}] }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders1',' { "_id" : 8, "a" : [{"x": [1, 2]}, {"y": 1}] }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','orders1',' { "_id" : 9, "a" : [[{"x": [1, 2]}, {"y": 1}]] }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','inventory1',' { "_id" : 1, "b" : 1 }', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- Test filter generation 
SELECT bson_dollar_lookup_extract_filter_expression(document, '{"b" : "a.x"}'), document FROM documentdb_api.collection('db', 'orders1');
         bson_dollar_lookup_extract_filter_expression         |                                                                     document                                                                     
---------------------------------------------------------------------
 { "b" : [ { "$numberInt" : "1" } ] }                         | { "_id" : { "$numberInt" : "1" }, "a" : [ { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ { "$numberInt" : "1" } ] }                         | { "_id" : { "$numberInt" : "2" }, "a" : { "x" : { "$numberInt" : "1" } } }
 { "b" : [ { "$numberInt" : "2" }, { "$numberInt" : "1" } ] } | { "_id" : { "$numberInt" : "3" }, "a" : [ { "x" : { "$numberInt" : "2" } }, { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ { "$numberInt" : "1" } ] }                         | { "_id" : { "$numberInt" : "4" }, "a" : [ { "y" : { "$numberInt" : "1" } }, { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                                           | { "_id" : { "$numberInt" : "5" }, "a" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
 { "b" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] } | { "_id" : { "$numberInt" : "6" }, "a" : { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] } }
 { "b" : [ { "$numberInt" : "1" } ] }                         | { "_id" : { "$numberInt" : "7" }, "a" : [ { "x" : { "$numberInt" : "1" } }, { "y" : { "$numberInt" : "1" } } ] }
 { "b" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] } | { "_id" : { "$numberInt" : "8" }, "a" : [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                                           | { "_id" : { "$numberInt" : "9" }, "a" : [ [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] ] }
(9 rows)

SELECT bson_dollar_lookup_extract_filter_expression(document, '{"b" : "a.0.x"}'), document FROM documentdb_api.collection('db', 'orders1');
         bson_dollar_lookup_extract_filter_expression         |                                                                     document                                                                     
---------------------------------------------------------------------
 { "b" : [ { "$numberInt" : "1" } ] }                         | { "_id" : { "$numberInt" : "1" }, "a" : [ { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                                           | { "_id" : { "$numberInt" : "2" }, "a" : { "x" : { "$numberInt" : "1" } } }
 { "b" : [ { "$numberInt" : "2" } ] }                         | { "_id" : { "$numberInt" : "3" }, "a" : [ { "x" : { "$numberInt" : "2" } }, { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                                           | { "_id" : { "$numberInt" : "4" }, "a" : [ { "y" : { "$numberInt" : "1" } }, { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                                           | { "_id" : { "$numberInt" : "5" }, "a" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
 { "b" : [ null ] }                                           | { "_id" : { "$numberInt" : "6" }, "a" : { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] } }
 { "b" : [ { "$numberInt" : "1" } ] }                         | { "_id" : { "$numberInt" : "7" }, "a" : [ { "x" : { "$numberInt" : "1" } }, { "y" : { "$numberInt" : "1" } } ] }
 { "b" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] } | { "_id" : { "$numberInt" : "8" }, "a" : [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                                           | { "_id" : { "$numberInt" : "9" }, "a" : [ [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] ] }
(9 rows)

SELECT bson_dollar_lookup_extract_filter_expression(document, '{"b" : "a.x.0"}'), document FROM documentdb_api.collection('db', 'orders1');
 bson_dollar_lookup_extract_filter_expression |                                                                     document                                                                     
---------------------------------------------------------------------
 { "b" : [ null ] }                           | { "_id" : { "$numberInt" : "1" }, "a" : [ { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                           | { "_id" : { "$numberInt" : "2" }, "a" : { "x" : { "$numberInt" : "1" } } }
 { "b" : [ null ] }                           | { "_id" : { "$numberInt" : "3" }, "a" : [ { "x" : { "$numberInt" : "2" } }, { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                           | { "_id" : { "$numberInt" : "4" }, "a" : [ { "y" : { "$numberInt" : "1" } }, { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                           | { "_id" : { "$numberInt" : "5" }, "a" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
 { "b" : [ { "$numberInt" : "1" } ] }         | { "_id" : { "$numberInt" : "6" }, "a" : { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] } }
 { "b" : [ null ] }                           | { "_id" : { "$numberInt" : "7" }, "a" : [ { "x" : { "$numberInt" : "1" } }, { "y" : { "$numberInt" : "1" } } ] }
 { "b" : [ { "$numberInt" : "1" } ] }         | { "_id" : { "$numberInt" : "8" }, "a" : [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                           | { "_id" : { "$numberInt" : "9" }, "a" : [ [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] ] }
(9 rows)

SELECT bson_dollar_lookup_extract_filter_expression(document, '{"b" : "a.0"}'), document FROM documentdb_api.collection('db', 'orders1');
                                   bson_dollar_lookup_extract_filter_expression                                   |                                                                     document                                                                     
---------------------------------------------------------------------
 { "b" : [ { "x" : { "$numberInt" : "1" } } ] }                                                                   | { "_id" : { "$numberInt" : "1" }, "a" : [ { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                                                                                               | { "_id" : { "$numberInt" : "2" }, "a" : { "x" : { "$numberInt" : "1" } } }
 { "b" : [ { "x" : { "$numberInt" : "2" } } ] }                                                                   | { "_id" : { "$numberInt" : "3" }, "a" : [ { "x" : { "$numberInt" : "2" } }, { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ { "y" : { "$numberInt" : "1" } } ] }                                                                   | { "_id" : { "$numberInt" : "4" }, "a" : [ { "y" : { "$numberInt" : "1" } }, { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ { "$numberInt" : "2" } ] }                                                                             | { "_id" : { "$numberInt" : "5" }, "a" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
 { "b" : [ null ] }                                                                                               | { "_id" : { "$numberInt" : "6" }, "a" : { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] } }
 { "b" : [ { "x" : { "$numberInt" : "1" } } ] }                                                                   | { "_id" : { "$numberInt" : "7" }, "a" : [ { "x" : { "$numberInt" : "1" } }, { "y" : { "$numberInt" : "1" } } ] }
 { "b" : [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] } ] }                                       | { "_id" : { "$numberInt" : "8" }, "a" : [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] }
 { "b" : [ [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] ] } | { "_id" : { "$numberInt" : "9" }, "a" : [ [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] ] }
(9 rows)

SELECT bson_dollar_lookup_extract_filter_expression(document, '{"b" : "a.0.1.y"}'), document FROM documentdb_api.collection('db', 'orders1');
 bson_dollar_lookup_extract_filter_expression |                                                                     document                                                                     
---------------------------------------------------------------------
 { "b" : [ null ] }                           | { "_id" : { "$numberInt" : "1" }, "a" : [ { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                           | { "_id" : { "$numberInt" : "2" }, "a" : { "x" : { "$numberInt" : "1" } } }
 { "b" : [ null ] }                           | { "_id" : { "$numberInt" : "3" }, "a" : [ { "x" : { "$numberInt" : "2" } }, { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                           | { "_id" : { "$numberInt" : "4" }, "a" : [ { "y" : { "$numberInt" : "1" } }, { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                           | { "_id" : { "$numberInt" : "5" }, "a" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
 { "b" : [ null ] }                           | { "_id" : { "$numberInt" : "6" }, "a" : { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] } }
 { "b" : [ null ] }                           | { "_id" : { "$numberInt" : "7" }, "a" : [ { "x" : { "$numberInt" : "1" } }, { "y" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                           | { "_id" : { "$numberInt" : "8" }, "a" : [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] }
 { "b" : [ { "$numberInt" : "1" } ] }         | { "_id" : { "$numberInt" : "9" }, "a" : [ [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] ] }
(9 rows)

SELECT bson_dollar_lookup_extract_filter_expression(document, '{"b" : "a.0.0.x"}'), document FROM documentdb_api.collection('db', 'orders1');
         bson_dollar_lookup_extract_filter_expression         |                                                                     document                                                                     
---------------------------------------------------------------------
 { "b" : [ null ] }                                           | { "_id" : { "$numberInt" : "1" }, "a" : [ { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                                           | { "_id" : { "$numberInt" : "2" }, "a" : { "x" : { "$numberInt" : "1" } } }
 { "b" : [ null ] }                                           | { "_id" : { "$numberInt" : "3" }, "a" : [ { "x" : { "$numberInt" : "2" } }, { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                                           | { "_id" : { "$numberInt" : "4" }, "a" : [ { "y" : { "$numberInt" : "1" } }, { "x" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                                           | { "_id" : { "$numberInt" : "5" }, "a" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
 { "b" : [ null ] }                                           | { "_id" : { "$numberInt" : "6" }, "a" : { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] } }
 { "b" : [ null ] }                                           | { "_id" : { "$numberInt" : "7" }, "a" : [ { "x" : { "$numberInt" : "1" } }, { "y" : { "$numberInt" : "1" } } ] }
 { "b" : [ null ] }                                           | { "_id" : { "$numberInt" : "8" }, "a" : [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] }
 { "b" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] } | { "_id" : { "$numberInt" : "9" }, "a" : [ [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] ] }
(9 rows)

-- Test full lookup sql
WITH 
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"b" : "a.0.x"}') 
	AS match FROM documentdb_api.collection('db', 'orders1')) 
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'matched_docs'::text)
FROM t1 
LEFT JOIN LATERAL ( 
	SELECT COALESCE (array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
	FROM documentdb_api.collection('db', 'inventory1') AS t2
	WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE;
                                                                                                     bson_dollar_lookup_project                                                                                                      
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "a" : [ { "x" : { "$numberInt" : "1" } } ], "matched_docs" : [ { "_id" : { "$numberInt" : "1" }, "b" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "2" }, "a" : { "x" : { "$numberInt" : "1" } }, "matched_docs" : [  ] }
 { "_id" : { "$numberInt" : "3" }, "a" : [ { "x" : { "$numberInt" : "2" } }, { "x" : { "$numberInt" : "1" } } ], "matched_docs" : [  ] }
 { "_id" : { "$numberInt" : "4" }, "a" : [ { "y" : { "$numberInt" : "1" } }, { "x" : { "$numberInt" : "1" } } ], "matched_docs" : [  ] }
 { "_id" : { "$numberInt" : "5" }, "a" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" } ], "matched_docs" : [  ] }
 { "_id" : { "$numberInt" : "6" }, "a" : { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, "matched_docs" : [  ] }
 { "_id" : { "$numberInt" : "7" }, "a" : [ { "x" : { "$numberInt" : "1" } }, { "y" : { "$numberInt" : "1" } } ], "matched_docs" : [ { "_id" : { "$numberInt" : "1" }, "b" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "8" }, "a" : [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ], "matched_docs" : [ { "_id" : { "$numberInt" : "1" }, "b" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "9" }, "a" : [ [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] ], "matched_docs" : [  ] }
(9 rows)

WITH 
t1 AS (SELECT document, bson_dollar_lookup_extract_filter_expression(document, '{"a.0.x" : "b"}') 
	AS match FROM documentdb_api.collection('db', 'inventory1')) 
SELECT bson_dollar_lookup_project(t1.document, t2_agg.agg, 'matched_docs'::text)
FROM t1 
LEFT JOIN LATERAL ( 
	SELECT COALESCE (array_agg(t2.document::documentdb_core.bson), '{}'::bson[]) as agg 
	FROM documentdb_api.collection('db', 'orders1') AS t2
	WHERE bson_dollar_in(t2.document, t1.match)
) t2_agg ON TRUE;
                                                                                                                                                                                                                                                                               bson_dollar_lookup_project                                                                                                                                                                                                                                                                                
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "b" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "1" }, "a" : [ { "x" : { "$numberInt" : "1" } } ] }, { "_id" : { "$numberInt" : "7" }, "a" : [ { "x" : { "$numberInt" : "1" } }, { "y" : { "$numberInt" : "1" } } ] }, { "_id" : { "$numberInt" : "8" }, "a" : [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] }, { "_id" : { "$numberInt" : "9" }, "a" : [ [ { "x" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "y" : { "$numberInt" : "1" } } ] ] } ] }
(1 row)

-- test lookup with operator type document contents
SELECT documentdb_api.insert_one('db', 'lookup_with_operator_left', '{ "_id": 1, "a": 1, "b": { "$isArray": 1, "OtherField": 1 }}');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'lookup_with_operator_right', '{ "_id": 1, "a": 1, "b": { "$isArray": 1, "OtherField": 1 }}');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "lookup_with_operator_left", "pipeline": [ { "$lookup": { "from": "lookup_with_operator_right", "localField": "a", "foreignField": "a", "as": "myfoo" } }] }');
                                                                                                                                                           document                                                                                                                                                           
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "a" : { "$numberInt" : "1" }, "b" : { "$isArray" : { "$numberInt" : "1" }, "OtherField" : { "$numberInt" : "1" } }, "myfoo" : [ { "_id" : { "$numberInt" : "1" }, "a" : { "$numberInt" : "1" }, "b" : { "$isArray" : { "$numberInt" : "1" }, "OtherField" : { "$numberInt" : "1" } } } ] }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "lookup_with_operator_left", "pipeline": [ { "$lookup": { "from": "lookup_with_operator_right", "localField": "_id", "foreignField": "_id", "as": "myfoo" } }] }');
                                                                                                                                                           document                                                                                                                                                           
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "a" : { "$numberInt" : "1" }, "b" : { "$isArray" : { "$numberInt" : "1" }, "OtherField" : { "$numberInt" : "1" } }, "myfoo" : [ { "_id" : { "$numberInt" : "1" }, "a" : { "$numberInt" : "1" }, "b" : { "$isArray" : { "$numberInt" : "1" }, "OtherField" : { "$numberInt" : "1" } } } ] }
(1 row)

EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "lookup_with_operator_left", "pipeline": [ { "$lookup": { "from": "lookup_with_operator_right", "localField": "_id", "foreignField": "_id", "as": "myfoo" } }] }');
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Nested Loop Left Join
               ->  Bitmap Heap Scan on documents_6016_60270 collection
                     Recheck Cond: (shard_key_value = '6016'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (shard_key_value = '6016'::bigint)
               ->  Aggregate
                     ->  Index Scan using _id_ on documents_6017_60286 collection_0_1
                           Index Cond: ((shard_key_value = '6017'::bigint) AND (object_id OPERATOR(documentdb_core.=) collection.object_id))
(13 rows)

EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "lookup_with_operator_left", "pipeline": [ { "$project": { "_id": "500" }}, { "$lookup": { "from": "lookup_with_operator_right", "localField": "_id", "foreignField": "_id", "as": "myfoo" } }] }');
                                                                                                                                                                     QUERY PLAN                                                                                                                                                                      
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Nested Loop Left Join
               ->  Bitmap Heap Scan on documents_6016_60270 collection
                     Recheck Cond: (shard_key_value = '6016'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (shard_key_value = '6016'::bigint)
               ->  Aggregate
                     ->  Index Scan using _id_ on documents_6017_60286 collection_0_1
                           Index Cond: ((shard_key_value = '6017'::bigint) AND (object_id OPERATOR(documentdb_core.=) ANY (documentdb_api_internal.bson_dollar_lookup_extract_filter_array(documentdb_api_internal.bson_dollar_project(collection.document, '{ "_id" : "500" }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), '{ "_id" : "_id" }'::documentdb_core.bson))))
(13 rows)

-- Test for Index push down crash when Foreign Field = '_id' and the target collection is sharded 
SELECT documentdb_api.insert_one('db','agg_pipeline_orders_pushdown',' { "_id" : 1, "item" : "almonds", "price" : 12, "quantity" : 2 }', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_orders_pushdown','{ "_id" : 2, "item" : "pecans", "price" : 20, "quantity" : 1 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_orders_pushdown',' { "_id" : 3, "item" : "bread", "price" : 10, "quantity" : 5 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_orders_pushdown',' { "_id" : 4, "item" : ["almonds", "bread", "pecans"], "price" : 10, "quantity" : 5 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_orders_pushdown',' { "_id" : 5}', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_orders_pushdown',' { "_id" : 6, "item" : {"a": "x", "b" : 1, "c" : [1, 2, 3]} }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_orders_pushdown',' { "_id" : 7, "item" : [{"a": { "b" : 1}}, [1, 2, 3], 1, "x"] }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_inventory_pushdown',' { "_id" :  "almonds", "description": "product 1", "instock" : 120 }', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_inventory_pushdown',' { "_id" :  "peanuts", "description": "product 1", "instock" : 240 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_inventory_pushdown','{ "_id" :  "bread", "description": "product 2", "instock" : 80 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_inventory_pushdown','{ "_id" :  "cashews", "description": "product 3", "instock" : 60 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_inventory_pushdown','{ "_id" :  "pecans", "description": "product 4", "instock" : 70 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_inventory_pushdown','{ "_id" :  "unknown", "description": "product 4", "instock" : 70 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.shard_collection('db','agg_pipeline_inventory_pushdown', '{"_id":"hashed"}', false);
 shard_collection 
---------------------------------------------------------------------
 
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders_pushdown", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory_pushdown", "as": "matched_docs", "localField": "item", "foreignField": "_id", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                           document                                                                                                                            
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "3" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": "$matched_docs" } ], "cursor": {} }');
                                                                                                                                                                    document                                                                                                                                                                     
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id", "pipeline": [ { "$addFields": { "myBar": 1 } }, { "$limit": 10 }] } }, { "$unwind": "$matched_docs" } ], "cursor": {} }');
                                                                                                                                                                                     document                                                                                                                                                                                      
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" }, "myBar" : { "$numberInt" : "1" } } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": { "path": "$matched_docs" } } ], "cursor": {} }');
                                                                                                                                                                    document                                                                                                                                                                     
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": { "path": "$matched_docs", "includeArrayIndex": "idx" } } ], "cursor": {} }'); -- this will not inline
                                                                                                                                                                                     document                                                                                                                                                                                     
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, "idx" : { "$numberLong" : "0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": { "path": "$matched_docs", "preserveNullAndEmptyArrays" : true } } ], "cursor": {} }'); -- should inline and use LEFT JOIN
                                                                                                                                                                    document                                                                                                                                                                     
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" } }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" } }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" } }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" } }
 { "_id" : { "$numberInt" : "5" } }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] } }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } } }
(7 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": "$matched_docs" } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_merge_documents_at_path(lookup_stage_1.document, "lookupRight_stage_1".document, 'matched_docs'::text) AS document FROM ((SELECT collection.document, documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson) AS lookup_filter FROM documentdb_data.documents_6000_60000 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '6000'::bigint)) lookup_stage_1 JOIN LATERAL (SELECT lookup_right_query_stage_0.document FROM (SELECT collection_0_1.document, collection_0_1.object_id AS "objectId" FROM documentdb_data.documents_6001_60016 collection_0_1 WHERE (collection_0_1.shard_key_value OPERATOR(pg_catalog.=) '6001'::bigint)) lookup_right_query_stage_0 WHERE (lookup_right_query_stage_0."objectId" OPERATOR(documentdb_core.=) ANY (lookup_stage_1.lookup_filter))) "lookupRight_stage_1" ON (true))
         Node: host=localhost port=58070 dbname=regression
         ->  Nested Loop
               Output: documentdb_api_internal.bson_dollar_merge_documents_at_path(collection.document, collection_0_1.document, 'matched_docs'::text)
               Join Filter: (collection_0_1.object_id OPERATOR(documentdb_core.=) ANY (documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson)))
               ->  Seq Scan on documentdb_data.documents_6001_60016 collection_0_1
                     Output: collection_0_1.shard_key_value, collection_0_1.object_id, collection_0_1.document, collection_0_1.creation_time
               ->  Bitmap Heap Scan on documentdb_data.documents_6000_60000 collection
                     Output: collection.shard_key_value, collection.object_id, collection.document, collection.creation_time
                     Recheck Cond: (collection.shard_key_value = '6000'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (collection.shard_key_value = '6000'::bigint)
(17 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id", "pipeline": [ { "$addFields": { "myBar": 1 } }, { "$limit": 10 }] } }, { "$unwind": "$matched_docs" } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_catalog.bson_dollar_unwind(document, '$matched_docs'::text) AS document FROM (SELECT documentdb_api_internal.bson_dollar_merge_documents(lookup_non_inlined_stage_1."left", (SELECT COALESCE(documentdb_api_catalog.bson_array_agg(agg_stage_sub_1_2."funcName", 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson) AS "funcName" FROM (SELECT documentdb_api_internal.bson_dollar_add_fields(lookup_subpipeline_substage_0.lookup_unwind, '{ "myBar" : { "$numberInt" : "1" } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS "funcName" FROM documentdb_api_catalog.bson_lookup_unwind(lookup_non_inlined_stage_1."right", 'matched_docs'::text) lookup_subpipeline_substage_0(lookup_unwind) LIMIT '10'::bigint) agg_stage_sub_1_2)) AS document FROM (SELECT lookup_stage_1.document AS "left", "lookupRight_stage_1".document AS "right" FROM ((SELECT collection.document, documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson) AS lookup_filter FROM documentdb_data.documents_6000_60000 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '6000'::bigint)) lookup_stage_1 LEFT JOIN LATERAL (SELECT COALESCE(documentdb_api_catalog.bson_array_agg(lookup_right_query_stage_0.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson) AS document FROM (SELECT collection_0_1.document, collection_0_1.object_id AS "objectId" FROM documentdb_data.documents_6001_60016 collection_0_1 WHERE (collection_0_1.shard_key_value OPERATOR(pg_catalog.=) '6001'::bigint)) lookup_right_query_stage_0 WHERE (lookup_right_query_stage_0."objectId" OPERATOR(documentdb_core.=) ANY (lookup_stage_1.lookup_filter))) "lookupRight_stage_1" ON (true))) lookup_non_inlined_stage_1) agg_stage_1
         Node: host=localhost port=58070 dbname=regression
         ->  ProjectSet
               Output: documentdb_api_catalog.bson_dollar_unwind(documentdb_api_internal.bson_dollar_merge_documents(collection.document, (SubPlan 1)), '$matched_docs'::text)
               ->  Nested Loop Left Join
                     Output: collection.document, (COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson))
                     ->  Bitmap Heap Scan on documentdb_data.documents_6000_60000 collection
                           Output: collection.shard_key_value, collection.object_id, collection.document, collection.creation_time
                           Recheck Cond: (collection.shard_key_value = '6000'::bigint)
                           ->  Bitmap Index Scan on _id_
                                 Index Cond: (collection.shard_key_value = '6000'::bigint)
                     ->  Aggregate
                           Output: COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson)
                           ->  Seq Scan on documentdb_data.documents_6001_60016 collection_0_1
                                 Output: collection_0_1.shard_key_value, collection_0_1.object_id, collection_0_1.document, collection_0_1.creation_time
                                 Filter: (collection_0_1.object_id OPERATOR(documentdb_core.=) ANY (documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson)))
               SubPlan 1
                 ->  Aggregate
                       Output: COALESCE(documentdb_api_catalog.bson_array_agg((documentdb_api_internal.bson_dollar_add_fields(lookup_subpipeline_substage_0.lookup_unwind, '{ "myBar" : { "$numberInt" : "1" } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)), 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson)
                       ->  Limit
                             Output: (documentdb_api_internal.bson_dollar_add_fields(lookup_subpipeline_substage_0.lookup_unwind, '{ "myBar" : { "$numberInt" : "1" } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson))
                             ->  Function Scan on documentdb_api_catalog.bson_lookup_unwind lookup_subpipeline_substage_0
                                   Output: documentdb_api_internal.bson_dollar_add_fields(lookup_subpipeline_substage_0.lookup_unwind, '{ "myBar" : { "$numberInt" : "1" } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)
                                   Function Call: documentdb_api_catalog.bson_lookup_unwind((COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson)), 'matched_docs'::text)
(29 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": { "path": "$matched_docs" } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_merge_documents_at_path(lookup_stage_1.document, "lookupRight_stage_1".document, 'matched_docs'::text) AS document FROM ((SELECT collection.document, documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson) AS lookup_filter FROM documentdb_data.documents_6000_60000 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '6000'::bigint)) lookup_stage_1 JOIN LATERAL (SELECT lookup_right_query_stage_0.document FROM (SELECT collection_0_1.document, collection_0_1.object_id AS "objectId" FROM documentdb_data.documents_6001_60016 collection_0_1 WHERE (collection_0_1.shard_key_value OPERATOR(pg_catalog.=) '6001'::bigint)) lookup_right_query_stage_0 WHERE (lookup_right_query_stage_0."objectId" OPERATOR(documentdb_core.=) ANY (lookup_stage_1.lookup_filter))) "lookupRight_stage_1" ON (true))
         Node: host=localhost port=58070 dbname=regression
         ->  Nested Loop
               Output: documentdb_api_internal.bson_dollar_merge_documents_at_path(collection.document, collection_0_1.document, 'matched_docs'::text)
               Join Filter: (collection_0_1.object_id OPERATOR(documentdb_core.=) ANY (documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson)))
               ->  Seq Scan on documentdb_data.documents_6001_60016 collection_0_1
                     Output: collection_0_1.shard_key_value, collection_0_1.object_id, collection_0_1.document, collection_0_1.creation_time
               ->  Bitmap Heap Scan on documentdb_data.documents_6000_60000 collection
                     Output: collection.shard_key_value, collection.object_id, collection.document, collection.creation_time
                     Recheck Cond: (collection.shard_key_value = '6000'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (collection.shard_key_value = '6000'::bigint)
(17 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": { "path": "$matched_docs", "includeArrayIndex": "idx" } } ], "cursor": {} }'); -- this will not inline

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_catalog.bson_dollar_unwind(document, '{ "path" : "$matched_docs", "includeArrayIndex" : "idx" }'::documentdb_core.bson) AS document FROM (SELECT documentdb_api_internal.bson_dollar_merge_documents(lookup_stage_1.document, "lookupRight_stage_1".document) AS document FROM ((SELECT collection.document, documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson) AS lookup_filter FROM documentdb_data.documents_6000_60000 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '6000'::bigint)) lookup_stage_1 LEFT JOIN LATERAL (SELECT COALESCE(documentdb_api_catalog.bson_array_agg(lookup_right_query_stage_0.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson) AS document FROM (SELECT collection_0_1.document, collection_0_1.object_id AS "objectId" FROM documentdb_data.documents_6001_60016 collection_0_1 WHERE (collection_0_1.shard_key_value OPERATOR(pg_catalog.=) '6001'::bigint)) lookup_right_query_stage_0 WHERE (lookup_right_query_stage_0."objectId" OPERATOR(documentdb_core.=) ANY (lookup_stage_1.lookup_filter))) "lookupRight_stage_1" ON (true))) agg_stage_1
         Node: host=localhost port=58070 dbname=regression
         ->  ProjectSet
               Output: documentdb_api_catalog.bson_dollar_unwind(documentdb_api_internal.bson_dollar_merge_documents(collection.document, (COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson))), '{ "path" : "$matched_docs", "includeArrayIndex" : "idx" }'::documentdb_core.bson)
               ->  Nested Loop Left Join
                     Output: collection.document, (COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson))
                     ->  Bitmap Heap Scan on documentdb_data.documents_6000_60000 collection
                           Output: collection.shard_key_value, collection.object_id, collection.document, collection.creation_time
                           Recheck Cond: (collection.shard_key_value = '6000'::bigint)
                           ->  Bitmap Index Scan on _id_
                                 Index Cond: (collection.shard_key_value = '6000'::bigint)
                     ->  Aggregate
                           Output: COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson)
                           ->  Seq Scan on documentdb_data.documents_6001_60016 collection_0_1
                                 Output: collection_0_1.shard_key_value, collection_0_1.object_id, collection_0_1.document, collection_0_1.creation_time
                                 Filter: (collection_0_1.object_id OPERATOR(documentdb_core.=) ANY (documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson)))
(21 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": { "path": "$matched_docs", "preserveNullAndEmptyArrays" : true } } ], "cursor": {} }'); -- should inline and use LEFT JOIN

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_merge_documents_at_path(lookup_stage_1.document, COALESCE("lookupRight_stage_1".document, '{ }'::documentdb_core.bson), 'matched_docs'::text) AS document FROM ((SELECT collection.document, documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson) AS lookup_filter FROM documentdb_data.documents_6000_60000 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '6000'::bigint)) lookup_stage_1 LEFT JOIN LATERAL (SELECT lookup_right_query_stage_0.document FROM (SELECT collection_0_1.document, collection_0_1.object_id AS "objectId" FROM documentdb_data.documents_6001_60016 collection_0_1 WHERE (collection_0_1.shard_key_value OPERATOR(pg_catalog.=) '6001'::bigint)) lookup_right_query_stage_0 WHERE (lookup_right_query_stage_0."objectId" OPERATOR(documentdb_core.=) ANY (lookup_stage_1.lookup_filter))) "lookupRight_stage_1" ON (true))
         Node: host=localhost port=58070 dbname=regression
         ->  Nested Loop Left Join
               Output: documentdb_api_internal.bson_dollar_merge_documents_at_path(collection.document, COALESCE(collection_0_1.document, '{ }'::documentdb_core.bson), 'matched_docs'::text)
               Join Filter: (collection_0_1.object_id OPERATOR(documentdb_core.=) ANY (documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson)))
               ->  Bitmap Heap Scan on documentdb_data.documents_6000_60000 collection
                     Output: collection.shard_key_value, collection.object_id, collection.document, collection.creation_time
                     Recheck Cond: (collection.shard_key_value = '6000'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (collection.shard_key_value = '6000'::bigint)
               ->  Materialize
                     Output: collection_0_1.document, collection_0_1.object_id
                     ->  Seq Scan on documentdb_data.documents_6001_60016 collection_0_1
                           Output: collection_0_1.document, collection_0_1.object_id
(19 rows)

-- UDF Unit test for merge documents at path
SELECT documentdb_api_internal.bson_dollar_merge_documents_at_path(NULL, NULL, NULL);
 bson_dollar_merge_documents_at_path 
---------------------------------------------------------------------
 
(1 row)

SELECT documentdb_api_internal.bson_dollar_merge_documents_at_path('{"a": "text"}', '{}', 'a');
 bson_dollar_merge_documents_at_path 
---------------------------------------------------------------------
 { "a" : "text" }
(1 row)

SELECT documentdb_api_internal.bson_dollar_merge_documents_at_path('{"a": "text"}', '{ "b" : true}', 'a');
 bson_dollar_merge_documents_at_path 
---------------------------------------------------------------------
 { "a" : { "b" : true } }
(1 row)

SELECT documentdb_api_internal.bson_dollar_merge_documents_at_path('{"a": "text"}', '{ "b" : true}', 'd');
  bson_dollar_merge_documents_at_path   
---------------------------------------------------------------------
 { "a" : "text", "d" : { "b" : true } }
(1 row)

SELECT documentdb_api_internal.bson_dollar_merge_documents_at_path('{"a": { "b": "text", "c": true }}', '{ "random" : false }', 'a');
 bson_dollar_merge_documents_at_path 
---------------------------------------------------------------------
 { "a" : { "random" : false } }
(1 row)

SELECT documentdb_api_internal.bson_dollar_merge_documents_at_path('{"a": { "b": "text", "c": true }}', '{ "random" : false }', 'a.b');
         bson_dollar_merge_documents_at_path          
---------------------------------------------------------------------
 { "a" : { "b" : { "random" : false }, "c" : true } }
(1 row)

SELECT documentdb_api_internal.bson_dollar_merge_documents_at_path('{"a": [{ "b": "text", "c": true }, { "b": "text2", "c": false }]}', '{ "random" : false }', 'a.b');
   bson_dollar_merge_documents_at_path    
---------------------------------------------------------------------
 { "a" : { "b" : { "random" : false } } }
(1 row)

-- UDF tests for merge documents with override Array
SELECT documentdb_api_internal.bson_dollar_merge_documents(NULL, NULL, NULL);
 bson_dollar_merge_documents 
---------------------------------------------------------------------
 
(1 row)

SELECT documentdb_api_internal.bson_dollar_merge_documents('{"a": "text"}', '{}', false);
 bson_dollar_merge_documents 
---------------------------------------------------------------------
 { "a" : "text" }
(1 row)

SELECT documentdb_api_internal.bson_dollar_merge_documents('{"a": "text"}', '{ "a" : true}', false);
 bson_dollar_merge_documents 
---------------------------------------------------------------------
 { "a" : true }
(1 row)

SELECT documentdb_api_internal.bson_dollar_merge_documents('{"a": { "b": "text", "c": true }}', '{ "a.b.random" : false }', false);
             bson_dollar_merge_documents              
---------------------------------------------------------------------
 { "a" : { "c" : true, "b" : { "random" : false } } }
(1 row)

SELECT documentdb_api_internal.bson_dollar_merge_documents('{"a": [{ "b": "text", "c": true }, { "b": "text2", "c": false }]}', '{ "a.b.random" : false }', false);
                                      bson_dollar_merge_documents                                      
---------------------------------------------------------------------
 { "a" : [ { "c" : true, "b" : { "random" : false } }, { "c" : false, "b" : { "random" : false } } ] }
(1 row)

SELECT documentdb_api_internal.bson_dollar_merge_documents(NULL, NULL, NULL);
 bson_dollar_merge_documents 
---------------------------------------------------------------------
 
(1 row)

SELECT documentdb_api_internal.bson_dollar_merge_documents('{"a": "text"}', '{}', true);
 bson_dollar_merge_documents 
---------------------------------------------------------------------
 { "a" : "text" }
(1 row)

SELECT documentdb_api_internal.bson_dollar_merge_documents('{"a": "text"}', '{ "a" : true}', true);
 bson_dollar_merge_documents 
---------------------------------------------------------------------
 { "a" : true }
(1 row)

SELECT documentdb_api_internal.bson_dollar_merge_documents('{"a": { "b": "text", "c": true }}', '{ "a.b.random" : false }', true);
             bson_dollar_merge_documents              
---------------------------------------------------------------------
 { "a" : { "c" : true, "b" : { "random" : false } } }
(1 row)

SELECT documentdb_api_internal.bson_dollar_merge_documents('{"a": [{ "b": "text", "c": true }, { "b": "text2", "c": false }]}', '{ "a.b.random" : false }', true);
       bson_dollar_merge_documents        
---------------------------------------------------------------------
 { "a" : { "b" : { "random" : false } } }
(1 row)

BEGIN;
-- Disable optimization and test as this enabled by default now
set local documentdb.enableLookupUnwindOptimization to off;
SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": "$matched_docs" } ], "cursor": {} }');
                                                                                                                                                                    document                                                                                                                                                                     
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": { "path": "$matched_docs" } } ], "cursor": {} }');
                                                                                                                                                                    document                                                                                                                                                                     
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": { "path": "$matched_docs", "includeArrayIndex": "idx" } } ], "cursor": {} }'); -- this will not inline
                                                                                                                                                                                     document                                                                                                                                                                                     
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, "idx" : { "$numberLong" : "0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": { "path": "$matched_docs", "preserveNullAndEmptyArrays" : true } } ], "cursor": {} }'); -- should inline and use LEFT JOIN
                                                                                                                                                                    document                                                                                                                                                                     
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" } }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" } }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" } }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" } }
 { "_id" : { "$numberInt" : "5" } }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] } }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : { "_id" : { "$numberInt" : "1" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } } }
(7 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": "$matched_docs" } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_catalog.bson_dollar_unwind(document, '$matched_docs'::text) AS document FROM (SELECT documentdb_api_internal.bson_dollar_merge_documents(lookup_stage_1.document, "lookupRight_stage_1".document) AS document FROM ((SELECT collection.document, documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson) AS lookup_filter FROM documentdb_data.documents_6000_60000 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '6000'::bigint)) lookup_stage_1 LEFT JOIN LATERAL (SELECT COALESCE(documentdb_api_catalog.bson_array_agg(lookup_right_query_stage_0.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson) AS document FROM (SELECT collection_0_1.document, collection_0_1.object_id AS "objectId" FROM documentdb_data.documents_6001_60016 collection_0_1 WHERE (collection_0_1.shard_key_value OPERATOR(pg_catalog.=) '6001'::bigint)) lookup_right_query_stage_0 WHERE (lookup_right_query_stage_0."objectId" OPERATOR(documentdb_core.=) ANY (lookup_stage_1.lookup_filter))) "lookupRight_stage_1" ON (true))) agg_stage_1
         Node: host=localhost port=58070 dbname=regression
         ->  ProjectSet
               Output: documentdb_api_catalog.bson_dollar_unwind(documentdb_api_internal.bson_dollar_merge_documents(collection.document, (COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson))), '$matched_docs'::text)
               ->  Nested Loop Left Join
                     Output: collection.document, (COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson))
                     ->  Bitmap Heap Scan on documentdb_data.documents_6000_60000 collection
                           Output: collection.shard_key_value, collection.object_id, collection.document, collection.creation_time
                           Recheck Cond: (collection.shard_key_value = '6000'::bigint)
                           ->  Bitmap Index Scan on _id_
                                 Index Cond: (collection.shard_key_value = '6000'::bigint)
                     ->  Aggregate
                           Output: COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson)
                           ->  Seq Scan on documentdb_data.documents_6001_60016 collection_0_1
                                 Output: collection_0_1.shard_key_value, collection_0_1.object_id, collection_0_1.document, collection_0_1.creation_time
                                 Filter: (collection_0_1.object_id OPERATOR(documentdb_core.=) ANY (documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson)))
(21 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id", "pipeline": [ { "$addFields": { "myBar": 1 } }, { "$limit": 10 }] } }, { "$unwind": "$matched_docs" } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_catalog.bson_dollar_unwind(document, '$matched_docs'::text) AS document FROM (SELECT documentdb_api_internal.bson_dollar_merge_documents(lookup_non_inlined_stage_1."left", (SELECT COALESCE(documentdb_api_catalog.bson_array_agg(agg_stage_sub_1_2."funcName", 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson) AS "funcName" FROM (SELECT documentdb_api_internal.bson_dollar_add_fields(lookup_subpipeline_substage_0.lookup_unwind, '{ "myBar" : { "$numberInt" : "1" } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS "funcName" FROM documentdb_api_catalog.bson_lookup_unwind(lookup_non_inlined_stage_1."right", 'matched_docs'::text) lookup_subpipeline_substage_0(lookup_unwind) LIMIT '10'::bigint) agg_stage_sub_1_2)) AS document FROM (SELECT lookup_stage_1.document AS "left", "lookupRight_stage_1".document AS "right" FROM ((SELECT collection.document, documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson) AS lookup_filter FROM documentdb_data.documents_6000_60000 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '6000'::bigint)) lookup_stage_1 LEFT JOIN LATERAL (SELECT COALESCE(documentdb_api_catalog.bson_array_agg(lookup_right_query_stage_0.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson) AS document FROM (SELECT collection_0_1.document, collection_0_1.object_id AS "objectId" FROM documentdb_data.documents_6001_60016 collection_0_1 WHERE (collection_0_1.shard_key_value OPERATOR(pg_catalog.=) '6001'::bigint)) lookup_right_query_stage_0 WHERE (lookup_right_query_stage_0."objectId" OPERATOR(documentdb_core.=) ANY (lookup_stage_1.lookup_filter))) "lookupRight_stage_1" ON (true))) lookup_non_inlined_stage_1) agg_stage_1
         Node: host=localhost port=58070 dbname=regression
         ->  ProjectSet
               Output: documentdb_api_catalog.bson_dollar_unwind(documentdb_api_internal.bson_dollar_merge_documents(collection.document, (SubPlan 1)), '$matched_docs'::text)
               ->  Nested Loop Left Join
                     Output: collection.document, (COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson))
                     ->  Bitmap Heap Scan on documentdb_data.documents_6000_60000 collection
                           Output: collection.shard_key_value, collection.object_id, collection.document, collection.creation_time
                           Recheck Cond: (collection.shard_key_value = '6000'::bigint)
                           ->  Bitmap Index Scan on _id_
                                 Index Cond: (collection.shard_key_value = '6000'::bigint)
                     ->  Aggregate
                           Output: COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson)
                           ->  Seq Scan on documentdb_data.documents_6001_60016 collection_0_1
                                 Output: collection_0_1.shard_key_value, collection_0_1.object_id, collection_0_1.document, collection_0_1.creation_time
                                 Filter: (collection_0_1.object_id OPERATOR(documentdb_core.=) ANY (documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson)))
               SubPlan 1
                 ->  Aggregate
                       Output: COALESCE(documentdb_api_catalog.bson_array_agg((documentdb_api_internal.bson_dollar_add_fields(lookup_subpipeline_substage_0.lookup_unwind, '{ "myBar" : { "$numberInt" : "1" } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)), 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson)
                       ->  Limit
                             Output: (documentdb_api_internal.bson_dollar_add_fields(lookup_subpipeline_substage_0.lookup_unwind, '{ "myBar" : { "$numberInt" : "1" } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson))
                             ->  Function Scan on documentdb_api_catalog.bson_lookup_unwind lookup_subpipeline_substage_0
                                   Output: documentdb_api_internal.bson_dollar_add_fields(lookup_subpipeline_substage_0.lookup_unwind, '{ "myBar" : { "$numberInt" : "1" } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)
                                   Function Call: documentdb_api_catalog.bson_lookup_unwind((COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson)), 'matched_docs'::text)
(29 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": { "path": "$matched_docs" } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_catalog.bson_dollar_unwind(document, '{ "path" : "$matched_docs" }'::documentdb_core.bson) AS document FROM (SELECT documentdb_api_internal.bson_dollar_merge_documents(lookup_stage_1.document, "lookupRight_stage_1".document) AS document FROM ((SELECT collection.document, documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson) AS lookup_filter FROM documentdb_data.documents_6000_60000 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '6000'::bigint)) lookup_stage_1 LEFT JOIN LATERAL (SELECT COALESCE(documentdb_api_catalog.bson_array_agg(lookup_right_query_stage_0.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson) AS document FROM (SELECT collection_0_1.document, collection_0_1.object_id AS "objectId" FROM documentdb_data.documents_6001_60016 collection_0_1 WHERE (collection_0_1.shard_key_value OPERATOR(pg_catalog.=) '6001'::bigint)) lookup_right_query_stage_0 WHERE (lookup_right_query_stage_0."objectId" OPERATOR(documentdb_core.=) ANY (lookup_stage_1.lookup_filter))) "lookupRight_stage_1" ON (true))) agg_stage_1
         Node: host=localhost port=58070 dbname=regression
         ->  ProjectSet
               Output: documentdb_api_catalog.bson_dollar_unwind(documentdb_api_internal.bson_dollar_merge_documents(collection.document, (COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson))), '{ "path" : "$matched_docs" }'::documentdb_core.bson)
               ->  Nested Loop Left Join
                     Output: collection.document, (COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson))
                     ->  Bitmap Heap Scan on documentdb_data.documents_6000_60000 collection
                           Output: collection.shard_key_value, collection.object_id, collection.document, collection.creation_time
                           Recheck Cond: (collection.shard_key_value = '6000'::bigint)
                           ->  Bitmap Index Scan on _id_
                                 Index Cond: (collection.shard_key_value = '6000'::bigint)
                     ->  Aggregate
                           Output: COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson)
                           ->  Seq Scan on documentdb_data.documents_6001_60016 collection_0_1
                                 Output: collection_0_1.shard_key_value, collection_0_1.object_id, collection_0_1.document, collection_0_1.creation_time
                                 Filter: (collection_0_1.object_id OPERATOR(documentdb_core.=) ANY (documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson)))
(21 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": { "path": "$matched_docs", "includeArrayIndex": "idx" } } ], "cursor": {} }'); -- this will not inline
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_catalog.bson_dollar_unwind(document, '{ "path" : "$matched_docs", "includeArrayIndex" : "idx" }'::documentdb_core.bson) AS document FROM (SELECT documentdb_api_internal.bson_dollar_merge_documents(lookup_stage_1.document, "lookupRight_stage_1".document) AS document FROM ((SELECT collection.document, documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson) AS lookup_filter FROM documentdb_data.documents_6000_60000 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '6000'::bigint)) lookup_stage_1 LEFT JOIN LATERAL (SELECT COALESCE(documentdb_api_catalog.bson_array_agg(lookup_right_query_stage_0.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson) AS document FROM (SELECT collection_0_1.document, collection_0_1.object_id AS "objectId" FROM documentdb_data.documents_6001_60016 collection_0_1 WHERE (collection_0_1.shard_key_value OPERATOR(pg_catalog.=) '6001'::bigint)) lookup_right_query_stage_0 WHERE (lookup_right_query_stage_0."objectId" OPERATOR(documentdb_core.=) ANY (lookup_stage_1.lookup_filter))) "lookupRight_stage_1" ON (true))) agg_stage_1
         Node: host=localhost port=58070 dbname=regression
         ->  ProjectSet
               Output: documentdb_api_catalog.bson_dollar_unwind(documentdb_api_internal.bson_dollar_merge_documents(collection.document, (COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson))), '{ "path" : "$matched_docs", "includeArrayIndex" : "idx" }'::documentdb_core.bson)
               ->  Nested Loop Left Join
                     Output: collection.document, (COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson))
                     ->  Bitmap Heap Scan on documentdb_data.documents_6000_60000 collection
                           Output: collection.shard_key_value, collection.object_id, collection.document, collection.creation_time
                           Recheck Cond: (collection.shard_key_value = '6000'::bigint)
                           ->  Bitmap Index Scan on _id_
                                 Index Cond: (collection.shard_key_value = '6000'::bigint)
                     ->  Aggregate
                           Output: COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson)
                           ->  Seq Scan on documentdb_data.documents_6001_60016 collection_0_1
                                 Output: collection_0_1.shard_key_value, collection_0_1.object_id, collection_0_1.document, collection_0_1.creation_time
                                 Filter: (collection_0_1.object_id OPERATOR(documentdb_core.=) ANY (documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson)))
(21 rows)

	
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "orders", "pipeline": [ { "$lookup": { "from": "inventory", "as": "matched_docs", "localField": "item", "foreignField": "_id" } }, { "$unwind": { "path": "$matched_docs", "preserveNullAndEmptyArrays" : true } } ], "cursor": {} }'); -- should inline and use LEFT JOIN

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_catalog.bson_dollar_unwind(document, '{ "path" : "$matched_docs", "preserveNullAndEmptyArrays" : true }'::documentdb_core.bson) AS document FROM (SELECT documentdb_api_internal.bson_dollar_merge_documents(lookup_stage_1.document, "lookupRight_stage_1".document) AS document FROM ((SELECT collection.document, documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson) AS lookup_filter FROM documentdb_data.documents_6000_60000 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '6000'::bigint)) lookup_stage_1 LEFT JOIN LATERAL (SELECT COALESCE(documentdb_api_catalog.bson_array_agg(lookup_right_query_stage_0.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson) AS document FROM (SELECT collection_0_1.document, collection_0_1.object_id AS "objectId" FROM documentdb_data.documents_6001_60016 collection_0_1 WHERE (collection_0_1.shard_key_value OPERATOR(pg_catalog.=) '6001'::bigint)) lookup_right_query_stage_0 WHERE (lookup_right_query_stage_0."objectId" OPERATOR(documentdb_core.=) ANY (lookup_stage_1.lookup_filter))) "lookupRight_stage_1" ON (true))) agg_stage_1
         Node: host=localhost port=58070 dbname=regression
         ->  ProjectSet
               Output: documentdb_api_catalog.bson_dollar_unwind(documentdb_api_internal.bson_dollar_merge_documents(collection.document, (COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson))), '{ "path" : "$matched_docs", "preserveNullAndEmptyArrays" : true }'::documentdb_core.bson)
               ->  Nested Loop Left Join
                     Output: collection.document, (COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson))
                     ->  Bitmap Heap Scan on documentdb_data.documents_6000_60000 collection
                           Output: collection.shard_key_value, collection.object_id, collection.document, collection.creation_time
                           Recheck Cond: (collection.shard_key_value = '6000'::bigint)
                           ->  Bitmap Index Scan on _id_
                                 Index Cond: (collection.shard_key_value = '6000'::bigint)
                     ->  Aggregate
                           Output: COALESCE(documentdb_api_catalog.bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::documentdb_core.bson)
                           ->  Seq Scan on documentdb_data.documents_6001_60016 collection_0_1
                                 Output: collection_0_1.shard_key_value, collection_0_1.object_id, collection_0_1.document, collection_0_1.creation_time
                                 Filter: (collection_0_1.object_id OPERATOR(documentdb_core.=) ANY (documentdb_api_internal.bson_dollar_lookup_extract_filter_array(collection.document, '{ "_id" : "item" }'::documentdb_core.bson)))
(21 rows)

ROLLBACK;
