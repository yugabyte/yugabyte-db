-- init a test user and set vector pre-filtering on
SELECT current_user as original_test_user \gset
CREATE ROLE test_filter_user WITH LOGIN INHERIT SUPERUSER CREATEDB CREATEROLE IN ROLE :original_test_user;
SET search_path TO documentdb_core,documentdb_api,documentdb_api_catalog,documentdb_api_internal;
SET citus.next_shard_id TO 8100000;
SET documentdb.next_collection_id TO 8100;
SET documentdb.next_collection_index_id TO 8100;
CREATE OR REPLACE FUNCTION batch_insert_testing_vector_documents(collectionName text, beginId integer, numDocuments integer, docPerBatch integer)
  RETURNS void
  LANGUAGE plpgsql
AS $fn$
DECLARE
    endId integer := beginId + numDocuments - 1;
    batchCnt integer := 0;
    batchIdx integer := 0;
    batchBeginId integer := 0;
    batchEndId integer := 0;
    v_insertSpec bson;
    v_resultDocs bson;
BEGIN
    RAISE NOTICE 'Inserting % documents into %', numDocuments, collectionName;
    if numDocuments%docPerBatch = 0 then
        batchCnt := numDocuments/docPerBatch;
    else
        batchCnt := numDocuments/docPerBatch + 1;
    end if;
    RAISE NOTICE 'Begin id: %, Batch size: %, batch count: %', beginId, docPerBatch, batchCnt;

    WHILE batchIdx < batchCnt LOOP
        batchBeginId := beginId + batchIdx * docPerBatch;
        batchEndId := beginId + (batchIdx + 1) * docPerBatch - 1;
        if endId < batchEndId then
            batchEndId := endId;
        end if;
        WITH r1 AS (SELECT counter from generate_series(batchBeginId, batchEndId) AS counter),
             r2 AS ( SELECT ('{ "_id": ' || counter || ', "a": "some sentence", "v": [ ' || 10+counter || ', ' || 15+counter || ', ' || 1.1+counter || ' ] }') AS documentValue FROM r1),
             r3 AS ( SELECT collectionName as insert, array_agg(r2.documentValue::bson) AS documents FROM r2)

        SELECT row_get_bson(r3) INTO v_insertSpec FROM r3;
        SELECT p_result INTO v_resultDocs FROM documentdb_api.insert('db', v_insertSpec);
        batchIdx := batchIdx + 1;
    END LOOP;
END;
$fn$;
---------------------------------------------------------------------
-- IVF
SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_vector', '{ "_id":"1", "int": 10, "a" : { "b" : [ "x", 1, 2.0, true ] } }', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_vector', '{ "_id":"2", "double": 2.0, "a" : { "b" : {"c": 3} } }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_vector', '{ "_id":"3", "boolean": false, "a" : "no", "b": "yes", "c": true }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_vector', '{ "_id": 6,  "a": "some sentence", "v": [3.0, 5.0, 1.1 ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_vector', '{ "_id": 7,  "a": "some other sentence", "v": [8.0, 5.0, 0.1 ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- check dimensions exceeds 2000
SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_vector", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "foo_1", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 2, "similarity": "COS", "dimensions": 2001 } } ] }', true);
ERROR:  column cannot have more than 2000 dimensions for ivfflat index
CONTEXT:  SQL statement "CREATE INDEX documents_rum_index_8101 ON documentdb_data.documents_8100 USING ivfflat(CAST(documentdb_api_internal.bson_extract_vector(document, 'v'::text) AS public.vector(2001)) public.vector_cosine_ops) WITH (lists = 2) WHERE documentdb_api_internal.bson_extract_vector(document, 'v'::text) IS NOT NULL"
SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_vector", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "foo_1", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 2, "similarity": "COS", "dimensions": 3 } } ] }', true);
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

-- numLists <= data size, using data as centroids, to avoid randomized centroids generated by pgvector
ANALYZE;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 2 }  } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                                
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "a" : "some sentence", "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.99986126308999445644" } } }
 { "_id" : { "$numberInt" : "7" }, "a" : "some other sentence", "v" : [ { "$numberDouble" : "8.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "0.10000000000000000555" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.88331075895982669177" } } }
(2 rows)

COMMIT;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                                
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "a" : "some sentence", "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.99986126308999445644" } } }
 { "_id" : { "$numberInt" : "7" }, "a" : "some other sentence", "v" : [ { "$numberDouble" : "8.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "0.10000000000000000555" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.88331075895982669177" } } }
(2 rows)

COMMIT;
-- IVF search, error cases
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 10000000 }  } } ], "cursor": {} }');
ERROR:  $nProbes must be less than or equal to 32768.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": -5 }  } } ], "cursor": {} }');
ERROR:  $nProbes must be greater than or equal to 1.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": "5" }  } } ], "cursor": {} }');
ERROR:  $nProbes must be an integer value.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 5.5 }  } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                                
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "a" : "some sentence", "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.99986126308999445644" } } }
 { "_id" : { "$numberInt" : "7" }, "a" : "some other sentence", "v" : [ { "$numberDouble" : "8.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "0.10000000000000000555" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.88331075895982669177" } } }
(2 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 0 }  } } ], "cursor": {} }');
ERROR:  $nProbes must be greater than or equal to 1.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "k": 2, "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');
ERROR:  $vector is required field for using a vector index.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": -1, "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');
ERROR:  $k must be a positive integer.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": "1", "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');
ERROR:  $k must be an integer value.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 0, "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');
ERROR:  $k must be a positive integer.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');
ERROR:  $k is required field for using a vector index.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1 }  } } ], "cursor": {} }');
ERROR:  $path is required field for using a vector index.
-- check dimension of query vector exceeds 2000
DO $$  
DECLARE  
    dim_num integer := 2001;  
	vect_text text;
    pipeine_text text;  
BEGIN  
	vect_text := (SELECT array_agg(n)::public.vector::text FROM generate_series(1, dim_num) AS n) ;
	pipeine_text := (SELECT '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": ' || vect_text || ', "k": 2, "path": "v" } } } ], "cursor": {} }');
	SELECT document FROM bson_aggregation_pipeline('db'::text, pipeine_text::bson);
END;  
$$;
ERROR:  Length of the query vector cannot exceed 2000
CONTEXT:  SQL statement "SELECT document FROM bson_aggregation_pipeline('db'::text, pipeine_text::bson)"
PL/pgSQL function inline_code_block line 9 at SQL statement
DO $$  
DECLARE  
    dim_num integer := 2000;  
	vect_text text;
    pipeine_text text;  
BEGIN  
	vect_text := (SELECT array_agg(n)::public.vector::text FROM generate_series(1, dim_num) AS n) ;
	pipeine_text := (SELECT '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": ' || vect_text || ', "k": 2, "path": "v" } } } ], "cursor": {} }');
	SELECT document FROM bson_aggregation_pipeline('db'::text, pipeine_text::bson);
END;  
$$;
ERROR:  expected 3 dimensions, not 2000
CONTEXT:  SQL statement "SELECT document FROM bson_aggregation_pipeline('db'::text, pipeine_text::bson)"
PL/pgSQL function inline_code_block line 9 at SQL statement
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1.1, "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');
                                                                                                                            document                                                                                                                            
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "a" : "some sentence", "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.99986126308999445644" } } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1.8, "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');
                                                                                                                            document                                                                                                                            
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "a" : "some sentence", "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.99986126308999445644" } } }
(1 row)

-- default nProbes = 1
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v" }  } } ], "cursor": {} }');
                                                                                                                            document                                                                                                                            
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "a" : "some sentence", "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.99986126308999445644" } } }
(1 row)

COMMIT;
-- numLists > data size, pgvector will generate randomized centroids, using original vector data to query
CALL documentdb_api.drop_indexes('db', '{ "dropIndexes": "aggregation_pipeline_vector", "index": "foo_1"}');
                          retval                          
---------------------------------------------------------------------
 { "ok" : true, "nIndexesWas" : { "$numberLong" : "2" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_vector", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "foo_1", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 1000, "similarity": "COS", "dimensions": 3 } } ] }', true);
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

ANALYZE;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1000 }  } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                                
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "a" : "some sentence", "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.99986126308999445644" } } }
 { "_id" : { "$numberInt" : "7" }, "a" : "some other sentence", "v" : [ { "$numberDouble" : "8.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "0.10000000000000000555" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.88331075895982669177" } } }
(2 rows)

COMMIT;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 5.0, 1.1 ], "k": 2, "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                               
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "a" : "some sentence", "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "1.0" } } }
 { "_id" : { "$numberInt" : "7" }, "a" : "some other sentence", "v" : [ { "$numberDouble" : "8.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "0.10000000000000000555" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.8772381834609664919" } } }
(2 rows)

COMMIT;
SELECT documentdb_distributed_test_helpers.drop_primary_key('db','aggregation_pipeline_vector');
 drop_primary_key 
---------------------------------------------------------------------
 
(1 row)

BEGIN;
SET LOCAL enable_seqscan to off;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(document, ('1'::double precision OPERATOR(pg_catalog.-) (public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true) OPERATOR(public.<=>) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "1" }, "path" : "v", "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true)))) AS document FROM (SELECT collection.document FROM documentdb_data.documents_8100_8100003 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8100'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<=>) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "1" }, "path" : "v", "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true)) LIMIT '1'::bigint) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: documentdb_api_internal.bson_document_add_score_field(agg_stage_0.document, ('1'::double precision - (vector(documentdb_api_internal.bson_extract_vector(agg_stage_0.document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector)))
               ->  Limit
                     Output: collection.document, ((vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector))
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection.document, (vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector)
                           CosmosSearch Custom Params: { "nProbes" : 1 }
                           ->  Index Scan using foo_1 on documentdb_data.documents_8100_8100003 collection
                                 Output: collection.document
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson)
(18 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v" }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(document, ('1'::double precision OPERATOR(pg_catalog.-) (public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true) OPERATOR(public.<=>) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "1" }, "path" : "v" }'::documentdb_core.bson, 'vector'::text), 3, true)))) AS document FROM (SELECT collection.document FROM documentdb_data.documents_8100_8100003 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8100'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<=>) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "1" }, "path" : "v" }'::documentdb_core.bson, 'vector'::text), 3, true)) LIMIT '1'::bigint) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: documentdb_api_internal.bson_document_add_score_field(agg_stage_0.document, ('1'::double precision - (vector(documentdb_api_internal.bson_extract_vector(agg_stage_0.document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector)))
               ->  Limit
                     Output: collection.document, ((vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector))
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection.document, (vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector)
                           CosmosSearch Custom Params: { "nProbes" : 1 }
                           ->  Index Scan using foo_1 on documentdb_data.documents_8100_8100003 collection
                                 Output: collection.document
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector)
(17 rows)

ROLLBACK;
select documentdb_api.drop_collection('db', 'aggregation_pipeline_vector');
 drop_collection 
---------------------------------------------------------------------
 t
(1 row)

---------------------------------------------------------------------
-- turn on vector pre-filtering, check dynamic nProbes
select batch_insert_testing_vector_documents('aggregation_pipeline_ivf_nprobes', 1, 150, 2000);
NOTICE:  Inserting 150 documents into aggregation_pipeline_ivf_nprobes
NOTICE:  Begin id: 1, Batch size: 2000, batch count: 1
NOTICE:  creating collection
 batch_insert_testing_vector_documents 
---------------------------------------------------------------------
 
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_ivf_nprobes", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "foo_1", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 150, "similarity": "L2", "dimensions": 3 } } ] }', true);
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT documentdb_distributed_test_helpers.drop_primary_key('db','aggregation_pipeline_ivf_nprobes');
 drop_primary_key 
---------------------------------------------------------------------
 
(1 row)

ANALYZE;
-- 150 less than 10000 documents, use numLists as nProbes
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_nprobes", "pipeline": [ { "$search": { "cosmosSearch": { "k": 5, "path": "v", "vector": [ 3.0, 4.9, 1.0 ] }  } } ], "cursor": {} }');
                                                                                                                       document                                                                                                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "a" : "some sentence", "v" : [ { "$numberInt" : "11" }, { "$numberInt" : "16" }, { "$numberDouble" : "2.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "13.726616969513441902" } } }
 { "_id" : { "$numberInt" : "2" }, "a" : "some sentence", "v" : [ { "$numberInt" : "12" }, { "$numberInt" : "17" }, { "$numberDouble" : "3.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "15.225636516225479866" } } }
 { "_id" : { "$numberInt" : "3" }, "a" : "some sentence", "v" : [ { "$numberInt" : "13" }, { "$numberInt" : "18" }, { "$numberDouble" : "4.0999999999999996447" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "16.769615416601034497" } } }
 { "_id" : { "$numberInt" : "4" }, "a" : "some sentence", "v" : [ { "$numberInt" : "14" }, { "$numberInt" : "19" }, { "$numberDouble" : "5.0999999999999996447" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "18.347206738825054373" } } }
 { "_id" : { "$numberInt" : "5" }, "a" : "some sentence", "v" : [ { "$numberInt" : "15" }, { "$numberInt" : "20" }, { "$numberDouble" : "6.0999999999999996447" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "19.950439081164354604" } } }
(5 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_nprobes", "pipeline": [ { "$search": { "cosmosSearch": { "k": 5, "path": "v", "vector": [ 3.0, 4.9, 1.0 ] }  } } ], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(document, (public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "k" : { "$numberInt" : "5" }, "path" : "v", "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ] }'::documentdb_core.bson, 'vector'::text), 3, true))) AS document FROM (SELECT collection.document FROM documentdb_data.documents_8101_8100018 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8101'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "k" : { "$numberInt" : "5" }, "path" : "v", "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ] }'::documentdb_core.bson, 'vector'::text), 3, true)) LIMIT '5'::bigint) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: documentdb_api_internal.bson_document_add_score_field(agg_stage_0.document, (vector(documentdb_api_internal.bson_extract_vector(agg_stage_0.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Limit
                     Output: collection.document, ((vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection.document, (vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                           CosmosSearch Custom Params: { "nProbes" : 150 }
                           ->  Index Scan using foo_1 on documentdb_data.documents_8101_8100018 collection
                                 Output: collection.document
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
(17 rows)

ROLLBACK;
-- check nProbes with score projection
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_nprobes", "pipeline": [ { "$search": { "cosmosSearch": { "k": 5, "path": "v", "vector": [ 3.0, 4.9, 1.0 ] }}}, { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
                                    document                                    
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "rank" : { "$numberDouble" : "1372662.0" } }
 { "_id" : { "$numberInt" : "2" }, "rank" : { "$numberDouble" : "1522564.0" } }
 { "_id" : { "$numberInt" : "3" }, "rank" : { "$numberDouble" : "1676962.0" } }
 { "_id" : { "$numberInt" : "4" }, "rank" : { "$numberDouble" : "1834721.0" } }
 { "_id" : { "$numberInt" : "5" }, "rank" : { "$numberDouble" : "1995044.0" } }
(5 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_nprobes", "pipeline": [ { "$search": { "cosmosSearch": { "k": 5, "path": "v", "vector": [ 3.0, 4.9, 1.0 ] }}}, { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(document, (public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "k" : { "$numberInt" : "5" }, "path" : "v", "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ] }'::documentdb_core.bson, 'vector'::text), 3, true))), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS document FROM (SELECT collection.document FROM documentdb_data.documents_8101_8100018 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8101'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "k" : { "$numberInt" : "5" }, "path" : "v", "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ] }'::documentdb_core.bson, 'vector'::text), 3, true)) LIMIT '5'::bigint) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(agg_stage_0.document, (vector(documentdb_api_internal.bson_extract_vector(agg_stage_0.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)
               ->  Limit
                     Output: collection.document, ((vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection.document, (vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                           CosmosSearch Custom Params: { "nProbes" : 150 }
                           ->  Index Scan using foo_1 on documentdb_data.documents_8101_8100018 collection
                                 Output: collection.document
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
(17 rows)

ROLLBACK;
-- generate 1000 documents and insert into collection
select batch_insert_testing_vector_documents('aggregation_pipeline_ivf_nprobes', 151, 1000, 2000);
NOTICE:  Inserting 1000 documents into aggregation_pipeline_ivf_nprobes
NOTICE:  Begin id: 151, Batch size: 2000, batch count: 1
 batch_insert_testing_vector_documents 
---------------------------------------------------------------------
 
(1 row)

ANALYZE;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_nprobes", "pipeline": [ { "$search": { "cosmosSearch": { "k": 5, "path": "v", "vector": [ 3.0, 4.9, 1.0 ] }  } } ], "cursor": {} }');
                                                                                                                       document                                                                                                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "a" : "some sentence", "v" : [ { "$numberInt" : "11" }, { "$numberInt" : "16" }, { "$numberDouble" : "2.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "13.726616969513441902" } } }
 { "_id" : { "$numberInt" : "2" }, "a" : "some sentence", "v" : [ { "$numberInt" : "12" }, { "$numberInt" : "17" }, { "$numberDouble" : "3.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "15.225636516225479866" } } }
 { "_id" : { "$numberInt" : "3" }, "a" : "some sentence", "v" : [ { "$numberInt" : "13" }, { "$numberInt" : "18" }, { "$numberDouble" : "4.0999999999999996447" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "16.769615416601034497" } } }
 { "_id" : { "$numberInt" : "4" }, "a" : "some sentence", "v" : [ { "$numberInt" : "14" }, { "$numberInt" : "19" }, { "$numberDouble" : "5.0999999999999996447" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "18.347206738825054373" } } }
 { "_id" : { "$numberInt" : "5" }, "a" : "some sentence", "v" : [ { "$numberInt" : "15" }, { "$numberInt" : "20" }, { "$numberDouble" : "6.0999999999999996447" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "19.950439081164354604" } } }
(5 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_nprobes", "pipeline": [ { "$search": { "cosmosSearch": { "k": 5, "path": "v", "vector": [ 3.0, 4.9, 1.0 ] }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(document, (public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "k" : { "$numberInt" : "5" }, "path" : "v", "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ] }'::documentdb_core.bson, 'vector'::text), 3, true))) AS document FROM (SELECT collection.document FROM documentdb_data.documents_8101_8100018 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8101'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "k" : { "$numberInt" : "5" }, "path" : "v", "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ] }'::documentdb_core.bson, 'vector'::text), 3, true)) LIMIT '5'::bigint) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: documentdb_api_internal.bson_document_add_score_field(agg_stage_0.document, (vector(documentdb_api_internal.bson_extract_vector(agg_stage_0.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Limit
                     Output: collection.document, ((vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection.document, (vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                           CosmosSearch Custom Params: { "nProbes" : 150 }
                           ->  Index Scan using foo_1 on documentdb_data.documents_8101_8100018 collection
                                 Output: collection.document
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
(17 rows)

ROLLBACK;
-- more than 10000 and less than 1M documents, use documents / 1000 as nProbes
-- generate 9000 documents and insert into collection
select batch_insert_testing_vector_documents('aggregation_pipeline_ivf_nprobes', 1151, 9000, 2000);
NOTICE:  Inserting 9000 documents into aggregation_pipeline_ivf_nprobes
NOTICE:  Begin id: 1151, Batch size: 2000, batch count: 5
 batch_insert_testing_vector_documents 
---------------------------------------------------------------------
 
(1 row)

ANALYZE;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_nprobes", "pipeline": [ { "$search": { "cosmosSearch": { "k": 5, "path": "v", "vector": [ 3.0, 4.9, 1.0 ] }  } } ], "cursor": {} }');
                                                                                                                       document                                                                                                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "a" : "some sentence", "v" : [ { "$numberInt" : "11" }, { "$numberInt" : "16" }, { "$numberDouble" : "2.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "13.726616969513441902" } } }
 { "_id" : { "$numberInt" : "2" }, "a" : "some sentence", "v" : [ { "$numberInt" : "12" }, { "$numberInt" : "17" }, { "$numberDouble" : "3.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "15.225636516225479866" } } }
 { "_id" : { "$numberInt" : "3" }, "a" : "some sentence", "v" : [ { "$numberInt" : "13" }, { "$numberInt" : "18" }, { "$numberDouble" : "4.0999999999999996447" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "16.769615416601034497" } } }
 { "_id" : { "$numberInt" : "4" }, "a" : "some sentence", "v" : [ { "$numberInt" : "14" }, { "$numberInt" : "19" }, { "$numberDouble" : "5.0999999999999996447" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "18.347206738825054373" } } }
 { "_id" : { "$numberInt" : "5" }, "a" : "some sentence", "v" : [ { "$numberInt" : "15" }, { "$numberInt" : "20" }, { "$numberDouble" : "6.0999999999999996447" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "19.950439081164354604" } } }
(5 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_nprobes", "pipeline": [ { "$search": { "cosmosSearch": { "k": 5, "path": "v", "vector": [ 3.0, 4.9, 1.0 ] }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(document, (public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "k" : { "$numberInt" : "5" }, "path" : "v", "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ] }'::documentdb_core.bson, 'vector'::text), 3, true))) AS document FROM (SELECT collection.document FROM documentdb_data.documents_8101_8100018 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8101'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "k" : { "$numberInt" : "5" }, "path" : "v", "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ] }'::documentdb_core.bson, 'vector'::text), 3, true)) LIMIT '5'::bigint) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: documentdb_api_internal.bson_document_add_score_field(agg_stage_0.document, (vector(documentdb_api_internal.bson_extract_vector(agg_stage_0.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Limit
                     Output: collection.document, ((vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection.document, (vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                           CosmosSearch Custom Params: { "nProbes" : 10 }
                           ->  Index Scan using foo_1 on documentdb_data.documents_8101_8100018 collection
                                 Output: collection.document
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
(17 rows)

ROLLBACK;
-- more than 1M documents, use sqrt(documents) as nProbes
-- generate 1000000 documents and insert into collection
-- select batch_insert_testing_vector_documents('aggregation_pipeline_ivf_nprobes', 10151, 990000, 5000);
-- ANALYZE;
-- BEGIN;
-- SET LOCAL enable_seqscan to off;
-- SET LOCAL documentdb.enableVectorPreFilter = on;
-- SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_nprobes", "pipeline": [ { "$search": { "cosmosSearch": { "k": 5, "path": "v", "vector": [ 3.0, 4.9, 1.0 ] }  } } ], "cursor": {} }');
-- EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_nprobes", "pipeline": [ { "$search": { "cosmosSearch": { "k": 5, "path": "v", "vector": [ 3.0, 4.9, 1.0 ] }  } } ], "cursor": {} }');
-- ROLLBACK;
---------------------------------------------------------------------
-- ivf search with filter
SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_ivf_filter', '{ "_id": 6, "meta":{ "a": "some sentence", "b": 1 }, "c": true , "v": [3.0, 5.0, 1.1 ] }');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_ivf_filter', '{ "_id": 7, "meta":{ "a": "some other sentence", "b": 2}, "c": true , "v": [8.0, 5.0, 0.1 ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_ivf_filter', '{ "_id": 8, "meta":{ "a": "other sentence", "b": 5 }, "c": false, "v": [13.0, 5.0, 0.1 ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_ivf_filter', '{ "_id": 9, "meta":{ "a" : [ { "b" : 3 } ] }, "c": false, "v": [15.0, 5.0, 0.1 ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_ivf_filter', '{ "_id": 10, "meta":{ "a" : [ { "b" : 5 } ] }, "c": false }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_distributed_test_helpers.drop_primary_key('db','aggregation_pipeline_ivf_filter');
 drop_primary_key 
---------------------------------------------------------------------
 
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_ivf_filter", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "ivf_index", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 4, "similarity": "L2", "dimensions": 3 } } ] }', true);
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "0" }, "numIndexesAfter" : { "$numberInt" : "1" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

ANALYZE;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"a": "some sentence"} }  } } ], "cursor": {} }');
ERROR:  $filter is not supported for vector search yet.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "filter": "some sentence" }  } } ], "cursor": {} }');
ERROR:  $filter is not supported for vector search yet.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "filter": {} }  } } ], "cursor": {} }');
ERROR:  $filter is not supported for vector search yet.
SET documentdb.enableVectorPreFilter = on;
-- filter without index
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"a": "some sentence"} }  } } ], "cursor": {} }');
ERROR:  The index for filter path 'a' was not found, please check whether the index is created.
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"a": "some sentence"} }  } } ], "cursor": {} }');
ERROR:  The index for filter path 'a' was not found, please check whether the index is created.
ROLLBACK;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"meta.a": "some sentence"} }  } } ], "cursor": {} }');
ERROR:  The index for filter path 'meta.a' was not found, please check whether the index is created.
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"meta.a": "some sentence"} }  } } ], "cursor": {} }');
ERROR:  The index for filter path 'meta.a' was not found, please check whether the index is created.
ROLLBACK;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"meta.a.b": 3} }  } } ], "cursor": {} }');
ERROR:  The index for filter path 'meta.a.b' was not found, please check whether the index is created.
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"meta.a.b": 3} }  } } ], "cursor": {} }');
ERROR:  The index for filter path 'meta.a.b' was not found, please check whether the index is created.
ROLLBACK;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "filter": "some sentence" }  } } ], "cursor": {} }');
ERROR:  $filter must be a document value.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "filter": {} }  } } ], "cursor": {} }');
                                                                                                                                                       document                                                                                                                                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "meta" : { "a" : "some sentence", "b" : { "$numberInt" : "1" } }, "c" : true, "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.14142130855867909855" } } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_ivf_filter", "indexes": [ { "key": { "$**" : 1 }, "name": "wildcardIndex" } ] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_ivf_filter", "indexes": [ { "key": { "meta.a": 1 }, "name": "idx_meta.a" } ] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "2" }, "numIndexesAfter" : { "$numberInt" : "3" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_ivf_filter", "indexes": [ { "key": { "meta.b": 1 }, "name": "numberIndex_meta.b" } ] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "3" }, "numIndexesAfter" : { "$numberInt" : "4" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_ivf_filter", "indexes": [ { "key": { "meta.a.b": 1 }, "name": "idx_meta.a.b" } ] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "4" }, "numIndexesAfter" : { "$numberInt" : "5" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_ivf_filter", "indexes": [ { "key": { "meta": 1 }, "name": "documentIndex_meta" } ] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "5" }, "numIndexesAfter" : { "$numberInt" : "6" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_ivf_filter", "indexes": [ { "key": { "c": 1 }, "name": "boolIndex_c" } ] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "6" }, "numIndexesAfter" : { "$numberInt" : "7" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

ANALYZE;
---------------------------------------------------------------------
-- no match index path
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"unknownPath": "some sentence"} }  } } ], "cursor": {} }');
ERROR:  The index for filter path 'unknownPath' was not found, please check whether the index is created.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"meta.c": "some sentence"} }  } } ], "cursor": {} }');
ERROR:  The index for filter path 'meta.c' was not found, please check whether the index is created.
---------------------------------------------------------------------
-- multiple index path
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.a": { "$eq": "some sentence" } }, { "meta.b": { "$gt": 2 } }, {"c":  { "$eq": false } } ] }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "1203412.0" } }
(3 rows)

BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.a": { "$eq": "some sentence" } }, { "meta.b": { "$gt": 2 } }, {"c":  { "$eq": false } } ] }, "nProbes": 100 }  } }  ], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$or" : [ { "meta.a" : { "$eq" : "some sentence" } }, { "meta.b" : { "$gt" : { "$numberInt" : "2" } } }, { "c" : { "$eq" : false } } ] }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$or" : [ { "meta.a" : { "$eq" : "some sentence" } }, { "meta.b" : { "$gt" : { "$numberInt" : "2" } } }, { "c" : { "$eq" : false } } ] }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE (((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "meta.a" : "some sentence" }'::documentdb_core.bsonquery) OR (collection.document OPERATOR(documentdb_api_catalog.#>) '{ "meta.b" : { "$numberInt" : "2" } }'::documentdb_core.bsonquery) OR (collection.document OPERATOR(documentdb_api_catalog.#=) '{ "c" : false }'::documentdb_core.bsonquery)) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 100 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: ((collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a" : "some sentence" }'::documentdb_core.bson) OR (collection.document OPERATOR(documentdb_api_catalog.@>) '{ "meta.b" : { "$numberInt" : "2" } }'::documentdb_core.bson) OR (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : false }'::documentdb_core.bson))
                                 ->  BitmapOr
                                       ->  Bitmap Index Scan on "idx_meta.a"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a" : "some sentence" }'::documentdb_core.bson)
                                       ->  Bitmap Index Scan on "numberIndex_meta.b"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@>) '{ "meta.b" : { "$numberInt" : "2" } }'::documentdb_core.bson)
                                       ->  Bitmap Index Scan on "boolIndex_c"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : false }'::documentdb_core.bson)
(31 rows)

ROLLBACK;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "$or": [{ "meta.b": { "$eq": 2 } }, { "meta.b": { "$eq": 5 } } ] }, { "c": { "$eq": false } } ] } }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
(1 row)

BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "$or": [{ "meta.b": { "$eq": 2 } }, { "meta.b": { "$eq": 5 } } ] }, { "c": { "$eq": false } } ] } }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "$or" : [ { "meta.b" : { "$eq" : { "$numberInt" : "2" } } }, { "meta.b" : { "$eq" : { "$numberInt" : "5" } } } ] }, { "c" : { "$eq" : false } } ] } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "$or" : [ { "meta.b" : { "$eq" : { "$numberInt" : "2" } } }, { "meta.b" : { "$eq" : { "$numberInt" : "5" } } } ] }, { "c" : { "$eq" : false } } ] } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((documentdb_api_catalog.bson_dollar_in(collection.document, '{ "meta.b" : [ { "$numberInt" : "2" }, { "$numberInt" : "5" } ] }'::documentdb_core.bson) AND (collection.document OPERATOR(documentdb_api_catalog.#=) '{ "c" : false }'::documentdb_core.bsonquery)) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 4 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: ((collection.document OPERATOR(documentdb_api_catalog.@*=) '{ "meta.b" : [ { "$numberInt" : "2" }, { "$numberInt" : "5" } ] }'::documentdb_core.bson) AND (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : false }'::documentdb_core.bson))
                                 ->  Bitmap Index Scan on "wildcardIndex"
                                       Index Cond: ((collection.document OPERATOR(documentdb_api_catalog.@*=) '{ "meta.b" : [ { "$numberInt" : "2" }, { "$numberInt" : "5" } ] }'::documentdb_core.bson) AND (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : false }'::documentdb_core.bson))
(25 rows)

ROLLBACK;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "$or": [{ "meta.b": { "$eq": 2 } }, { "c": { "$eq": false } } ] }, { "meta.b": { "$lt": 5 } } ] } }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
(1 row)

BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "$or": [{ "meta.b": { "$eq": 2 } }, { "c": { "$eq": false } } ] }, { "meta.b": { "$lt": 5 } } ] } }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "$or" : [ { "meta.b" : { "$eq" : { "$numberInt" : "2" } } }, { "c" : { "$eq" : false } } ] }, { "meta.b" : { "$lt" : { "$numberInt" : "5" } } } ] } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "$or" : [ { "meta.b" : { "$eq" : { "$numberInt" : "2" } } }, { "c" : { "$eq" : false } } ] }, { "meta.b" : { "$lt" : { "$numberInt" : "5" } } } ] } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "meta.b" : { "$numberInt" : "2" } }'::documentdb_core.bsonquery) OR (collection.document OPERATOR(documentdb_api_catalog.#=) '{ "c" : false }'::documentdb_core.bsonquery)) AND (collection.document OPERATOR(documentdb_api_catalog.#<) '{ "meta.b" : { "$numberInt" : "5" } }'::documentdb_core.bsonquery)) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 4 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@<) '{ "meta.b" : { "$numberInt" : "5" } }'::documentdb_core.bson)
                                 Filter: ((collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.b" : { "$numberInt" : "2" } }'::documentdb_core.bson) OR (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : false }'::documentdb_core.bson))
                                 ->  Bitmap Index Scan on "numberIndex_meta.b"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@<) '{ "meta.b" : { "$numberInt" : "5" } }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "$or": [{ "meta.a": { "$regex": "^some", "$options" : "i" } }, { "meta.b": { "$eq": 5 } } ] }, { "meta.b": { "$lt": 5 } } ] } }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
(2 rows)

BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "$or": [{ "meta.a": { "$regex": "^some", "$options" : "i" } }, { "meta.b": { "$eq": 5 } } ] }, { "meta.b": { "$lt": 5 } } ] } }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "$or" : [ { "meta.a" : { "$regularExpression" : { "pattern" : "^some", "options" : "i" } } }, { "meta.b" : { "$eq" : { "$numberInt" : "5" } } } ] }, { "meta.b" : { "$lt" : { "$numberInt" : "5" } } } ] } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "$or" : [ { "meta.a" : { "$regularExpression" : { "pattern" : "^some", "options" : "i" } } }, { "meta.b" : { "$eq" : { "$numberInt" : "5" } } } ] }, { "meta.b" : { "$lt" : { "$numberInt" : "5" } } } ] } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE (((documentdb_api_catalog.bson_dollar_regex(collection.document, '{ "meta.a" : { "$regularExpression" : { "pattern" : "^some", "options" : "i" } } }'::documentdb_core.bson) OR (collection.document OPERATOR(documentdb_api_catalog.#=) '{ "meta.b" : { "$numberInt" : "5" } }'::documentdb_core.bsonquery)) AND (collection.document OPERATOR(documentdb_api_catalog.#<) '{ "meta.b" : { "$numberInt" : "5" } }'::documentdb_core.bsonquery)) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 4 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@<) '{ "meta.b" : { "$numberInt" : "5" } }'::documentdb_core.bson)
                                 Filter: ((collection.document OPERATOR(documentdb_api_catalog.@~) '{ "meta.a" : { "$regularExpression" : { "pattern" : "^some", "options" : "i" } } }'::documentdb_core.bson) OR (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.b" : { "$numberInt" : "5" } }'::documentdb_core.bson))
                                 ->  Bitmap Index Scan on "numberIndex_meta.b"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@<) '{ "meta.b" : { "$numberInt" : "5" } }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
-- check the vector index is forced to be used
ALTER ROLE test_filter_user SET documentdb.enableVectorPreFilter = "True";
SELECT current_setting('citus' || '.next_shard_id') as vector_citus__next_shard_id \gset
SELECT current_setting('documentdb' || '.next_collection_id') as vector__next_collection_id \gset
SELECT current_setting('documentdb' || '.next_collection_index_id') as vector__next_collection_index_id \gset
\c - test_filter_user
SET search_path TO documentdb_core,documentdb_api,documentdb_api_catalog,documentdb_api_internal;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a": [ { "b" : 3 } ]}, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "1203412.0" } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a": [ { "b" : 3 } ]}, "nProbes": 100 }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 100 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Seq Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Filter: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] }'::documentdb_core.bson)
(24 rows)

-- default nProbes = numLists(4)
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "$or": [{ "meta.b": { "$eq": 2 } }, { "meta.b": { "$eq": 5 } } ] } ] } }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
(2 rows)

-- todo: add this test back when pgvector version upgrade is done.
-- EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "$or": [{ "meta.b": { "$eq": 2 } }, { "meta.b": { "$eq": 5 } } ] } ] } }  } } ], "cursor": {} }');
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.a":  { "$eq": "some sentence"}}, { "meta.a": [ { "b" : 3 } ] } ] }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } }  ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "1203412.0" } }
(2 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.a":  { "$eq": "some sentence"}}, { "meta.a": [ { "b" : 3 } ] } ] }, "nProbes": 100 }  } }  ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$or" : [ { "meta.a" : { "$eq" : "some sentence" } }, { "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] } ] }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$or" : [ { "meta.a" : { "$eq" : "some sentence" } }, { "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] } ] }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE (documentdb_api_catalog.bson_dollar_in(collection.document, '{ "meta.a" : [ "some sentence", [ { "b" : { "$numberInt" : "3" } } ] ] }'::documentdb_core.bson) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 100 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Seq Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Filter: (collection.document OPERATOR(documentdb_api_catalog.@*=) '{ "meta.a" : [ "some sentence", [ { "b" : { "$numberInt" : "3" } } ] ] }'::documentdb_core.bson)
(24 rows)

\c - :original_test_user
SET search_path TO documentdb_core,documentdb_api,documentdb_api_catalog,documentdb_api_internal;
SELECT set_config('citus' || '.next_shard_id', '' || :vector_citus__next_shard_id, FALSE);
 set_config 
---------------------------------------------------------------------
 8100048
(1 row)

SELECT set_config('documentdb' || '.next_collection_id', '' || :vector__next_collection_id, FALSE);
 set_config 
---------------------------------------------------------------------
 8103
(1 row)

SELECT set_config('documentdb' || '.next_collection_index_id', '' || :vector__next_collection_index_id, FALSE);
 set_config 
---------------------------------------------------------------------
 8114
(1 row)

---------------------------------------------------------------------
-- ivf search: pre-filtering match with different indexes
-- "filter": {"meta.a": [ { "b" : 3 } ]}, match with idx_meta.a
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a": [ { "b" : 3 } ]}, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "1203412.0" } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a": [ { "b" : 3 } ]}, "nProbes": 100 }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 100 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "idx_meta.a"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
-- "filter": {"meta": { "a" : [ { "b" : 3 } ] }, match with documentIndex_meta
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta": { "a" : [ { "b" : 3 } ] } }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "1203412.0" } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta": { "a" : [ { "b" : 3 } ] } }, "nProbes": 100 }  } } ], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta" : { "a" : [ { "b" : { "$numberInt" : "3" } } ] } }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta" : { "a" : [ { "b" : { "$numberInt" : "3" } } ] } }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "meta" : { "a" : [ { "b" : { "$numberInt" : "3" } } ] } }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 100 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta" : { "a" : [ { "b" : { "$numberInt" : "3" } } ] } }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "documentIndex_meta"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta" : { "a" : [ { "b" : { "$numberInt" : "3" } } ] } }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
-- "filter": {"meta.a.b": 3 }, match with idx_meta.a.b
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a.b": 3 }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "1203412.0" } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a.b": 3 }, "nProbes": 100 }  } } ], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a.b" : { "$numberInt" : "3" } }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a.b" : { "$numberInt" : "3" } }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "meta.a.b" : { "$numberInt" : "3" } }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 100 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a.b" : { "$numberInt" : "3" } }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "idx_meta.a.b"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a.b" : { "$numberInt" : "3" } }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
---------------------------------------------------------------------
-- ivf filter string: default nProbes
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a": "some sentence"} }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                      document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a": "some sentence"} }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a" : "some sentence" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a" : "some sentence" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "meta.a" : "some sentence" }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 4 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a" : "some sentence" }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "idx_meta.a"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a" : "some sentence" }'::documentdb_core.bson)
(25 rows)

ROLLBACK;
-- ivf filter string: with $and, nProbes = 3, match 1 document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "meta.a": { "$gt": "other sentence" } }, { "meta.a": { "$lt": "some sentence" } } ] }, "nProbes": 3 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "meta.a": { "$gt": "other sentence" } }, { "meta.a": { "$lt": "some sentence" } } ] }, "nProbes": 3 }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "meta.a" : { "$gt" : "other sentence" } }, { "meta.a" : { "$lt" : "some sentence" } } ] }, "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "meta.a" : { "$gt" : "other sentence" } }, { "meta.a" : { "$lt" : "some sentence" } } ] }, "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE (((collection.document OPERATOR(documentdb_api_catalog.#>) '{ "meta.a" : "other sentence" }'::documentdb_core.bsonquery) AND (collection.document OPERATOR(documentdb_api_catalog.#<) '{ "meta.a" : "some sentence" }'::documentdb_core.bsonquery)) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 3 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@<>) '{ "meta.a" : { "min" : "other sentence", "max" : "some sentence", "minInclusive" : false, "maxInclusive" : false } }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "idx_meta.a"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@<>) '{ "meta.a" : { "min" : "other sentence", "max" : "some sentence", "minInclusive" : false, "maxInclusive" : false } }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
-- ivf filter string: with $and, nProbes = 1, no match document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "meta.a": { "$gt": "other sentence" } }, { "meta.a": { "$lt": "some sentence" } } ] }, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
 document 
---------------------------------------------------------------------
(0 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "meta.a": { "$gt": "other sentence" } }, { "meta.a": { "$lt": "some sentence" } } ] }, "nProbes": 1 }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "meta.a" : { "$gt" : "other sentence" } }, { "meta.a" : { "$lt" : "some sentence" } } ] }, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "meta.a" : { "$gt" : "other sentence" } }, { "meta.a" : { "$lt" : "some sentence" } } ] }, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE (((collection.document OPERATOR(documentdb_api_catalog.#>) '{ "meta.a" : "other sentence" }'::documentdb_core.bsonquery) AND (collection.document OPERATOR(documentdb_api_catalog.#<) '{ "meta.a" : "some sentence" }'::documentdb_core.bsonquery)) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 1 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@<>) '{ "meta.a" : { "min" : "other sentence", "max" : "some sentence", "minInclusive" : false, "maxInclusive" : false } }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "idx_meta.a"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@<>) '{ "meta.a" : { "min" : "other sentence", "max" : "some sentence", "minInclusive" : false, "maxInclusive" : false } }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
-- ivf filter string: with $or, nProbes = 3, match 3 documents
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.a": { "$gt": "other sentence" } }, { "meta.a": { "$lt": "some sentence" } } ] }, "nProbes": 3 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
(3 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.a": { "$gt": "other sentence" } }, { "meta.a": { "$lt": "some sentence" } } ] }, "nProbes": 3 }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$or" : [ { "meta.a" : { "$gt" : "other sentence" } }, { "meta.a" : { "$lt" : "some sentence" } } ] }, "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$or" : [ { "meta.a" : { "$gt" : "other sentence" } }, { "meta.a" : { "$lt" : "some sentence" } } ] }, "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE (((collection.document OPERATOR(documentdb_api_catalog.#>) '{ "meta.a" : "other sentence" }'::documentdb_core.bsonquery) OR (collection.document OPERATOR(documentdb_api_catalog.#<) '{ "meta.a" : "some sentence" }'::documentdb_core.bsonquery)) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 3 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: ((collection.document OPERATOR(documentdb_api_catalog.@>) '{ "meta.a" : "other sentence" }'::documentdb_core.bson) OR (collection.document OPERATOR(documentdb_api_catalog.@<) '{ "meta.a" : "some sentence" }'::documentdb_core.bson))
                                 ->  BitmapOr
                                       ->  Bitmap Index Scan on "idx_meta.a"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@>) '{ "meta.a" : "other sentence" }'::documentdb_core.bson)
                                       ->  Bitmap Index Scan on "idx_meta.a"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@<) '{ "meta.a" : "some sentence" }'::documentdb_core.bson)
(29 rows)

ROLLBACK;
-- ivf filter string: with $or, nProbes = 1, match 1 document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.a": { "$gt": "other sentence" } }, { "meta.a": { "$lt": "some sentence" } } ] }, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                      document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.a": { "$gt": "other sentence" } }, { "meta.a": { "$lt": "some sentence" } } ] }, "nProbes": 1 }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$or" : [ { "meta.a" : { "$gt" : "other sentence" } }, { "meta.a" : { "$lt" : "some sentence" } } ] }, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$or" : [ { "meta.a" : { "$gt" : "other sentence" } }, { "meta.a" : { "$lt" : "some sentence" } } ] }, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE (((collection.document OPERATOR(documentdb_api_catalog.#>) '{ "meta.a" : "other sentence" }'::documentdb_core.bsonquery) OR (collection.document OPERATOR(documentdb_api_catalog.#<) '{ "meta.a" : "some sentence" }'::documentdb_core.bsonquery)) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 1 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: ((collection.document OPERATOR(documentdb_api_catalog.@>) '{ "meta.a" : "other sentence" }'::documentdb_core.bson) OR (collection.document OPERATOR(documentdb_api_catalog.@<) '{ "meta.a" : "some sentence" }'::documentdb_core.bson))
                                 ->  BitmapOr
                                       ->  Bitmap Index Scan on "idx_meta.a"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@>) '{ "meta.a" : "other sentence" }'::documentdb_core.bson)
                                       ->  Bitmap Index Scan on "idx_meta.a"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@<) '{ "meta.a" : "some sentence" }'::documentdb_core.bson)
(29 rows)

ROLLBACK;
-- ivf filter string: with $or, $and, nProbes = 10, match 2 documents
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 10, "path": "v", "filter": {"$or":[{"$and":[{"meta.a":{"$gt":"other sentence"}},{"meta.a":{"$lt":"some sentence"}}]},{"meta.a":{"$in":[{"b":3},{"b":5}]}}]}, "nProbes": 10 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "1203412.0" } }
(2 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 10, "path": "v", "filter": {"$or":[{"$and":[{"meta.a":{"$gt":"other sentence"}},{"meta.a":{"$lt":"some sentence"}}]},{"meta.a":{"$in":[{"b":3},{"b":5}]}}]}, "nProbes": 10 }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "10" }, "path" : "v", "filter" : { "$or" : [ { "$and" : [ { "meta.a" : { "$gt" : "other sentence" } }, { "meta.a" : { "$lt" : "some sentence" } } ] }, { "meta.a" : { "$in" : [ { "b" : { "$numberInt" : "3" } }, { "b" : { "$numberInt" : "5" } } ] } } ] }, "nProbes" : { "$numberInt" : "10" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "10" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "10" }, "path" : "v", "filter" : { "$or" : [ { "$and" : [ { "meta.a" : { "$gt" : "other sentence" } }, { "meta.a" : { "$lt" : "some sentence" } } ] }, { "meta.a" : { "$in" : [ { "b" : { "$numberInt" : "3" } }, { "b" : { "$numberInt" : "5" } } ] } } ] }, "nProbes" : { "$numberInt" : "10" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((((collection.document OPERATOR(documentdb_api_catalog.#>) '{ "meta.a" : "other sentence" }'::documentdb_core.bsonquery) AND (collection.document OPERATOR(documentdb_api_catalog.#<) '{ "meta.a" : "some sentence" }'::documentdb_core.bsonquery)) OR (documentdb_api_catalog.bson_dollar_in(collection.document, '{ "meta.a" : [ { "b" : { "$numberInt" : "3" } }, { "b" : { "$numberInt" : "5" } } ] }'::documentdb_core.bson) AND (collection.document OPERATOR(documentdb_api_internal.##=) ANY (ARRAY['{ "meta.a" : { "b" : { "$numberInt" : "3" } } }'::documentdb_api_internal.bsonindexbounds, '{ "meta.a" : { "b" : { "$numberInt" : "5" } } }'::documentdb_api_internal.bsonindexbounds])))) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '10'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 10 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "10" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: ((collection.document OPERATOR(documentdb_api_catalog.@<>) '{ "meta.a" : { "min" : "other sentence", "max" : "some sentence", "minInclusive" : false, "maxInclusive" : false } }'::documentdb_core.bson) OR (collection.document OPERATOR(documentdb_api_catalog.@*=) '{ "meta.a" : [ { "b" : { "$numberInt" : "3" } }, { "b" : { "$numberInt" : "5" } } ] }'::documentdb_core.bson))
                                 Filter: (((collection.document OPERATOR(documentdb_api_catalog.@>) '{ "meta.a" : "other sentence" }'::documentdb_core.bson) AND (collection.document OPERATOR(documentdb_api_catalog.@<) '{ "meta.a" : "some sentence" }'::documentdb_core.bson)) OR (collection.document OPERATOR(documentdb_api_catalog.@*=) '{ "meta.a" : [ { "b" : { "$numberInt" : "3" } }, { "b" : { "$numberInt" : "5" } } ] }'::documentdb_core.bson))
                                 ->  BitmapOr
                                       ->  Bitmap Index Scan on "idx_meta.a"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@<>) '{ "meta.a" : { "min" : "other sentence", "max" : "some sentence", "minInclusive" : false, "maxInclusive" : false } }'::documentdb_core.bson)
                                       ->  Bitmap Index Scan on "idx_meta.a"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@*=) '{ "meta.a" : [ { "b" : { "$numberInt" : "3" } }, { "b" : { "$numberInt" : "5" } } ] }'::documentdb_core.bson)
(30 rows)

ROLLBACK;
-- ivf filter string: with $eq, $gt, $lt, $gte, $lte, $ne, $in, $and, $or, $regex
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$eq": "some sentence"}}, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                      document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$gt": "some sentence"}}, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
 document 
---------------------------------------------------------------------
(0 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$lt": "some sentence"}}, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
(2 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$ne": "some sentence"}}, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "1203412.0" } }
(3 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$in": ["some sentence", "other sentence"]}}, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
(2 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$regex": "^some", "$options" : "i"}}, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
(2 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  [ { "b" : 3 } ] }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "1203412.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "meta.a": { "$gt": "other sentence" } }, { "meta.a": { "$lt": "some sentence" } } ] }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.a": { "$gt": "other sentence" } }, { "meta.a": { "$lt": "some sentence" } } ] }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
(3 rows)

ROLLBACK;
---------------------------------------------------------------------
-- ivf filter number, with default nProbes
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.b": 2 } }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.b": 2 } }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.b" : { "$numberInt" : "2" } } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.b" : { "$numberInt" : "2" } } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "meta.b" : { "$numberInt" : "2" } }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 4 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.b" : { "$numberInt" : "2" } }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "numberIndex_meta.b"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.b" : { "$numberInt" : "2" } }'::documentdb_core.bson)
(25 rows)

ROLLBACK;
-- ivf filter number, with $and, nProbes = 1, no match document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "meta.b": { "$gt": 1 } }, { "meta.b": { "$lt": 5 } } ] }, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
 document 
---------------------------------------------------------------------
(0 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "meta.b": { "$gt": 1 } }, { "meta.b": { "$lt": 5 } } ] }, "nProbes": 1 }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "meta.b" : { "$gt" : { "$numberInt" : "1" } } }, { "meta.b" : { "$lt" : { "$numberInt" : "5" } } } ] }, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "meta.b" : { "$gt" : { "$numberInt" : "1" } } }, { "meta.b" : { "$lt" : { "$numberInt" : "5" } } } ] }, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE (((collection.document OPERATOR(documentdb_api_catalog.#>) '{ "meta.b" : { "$numberInt" : "1" } }'::documentdb_core.bsonquery) AND (collection.document OPERATOR(documentdb_api_catalog.#<) '{ "meta.b" : { "$numberInt" : "5" } }'::documentdb_core.bsonquery)) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 1 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@<>) '{ "meta.b" : { "min" : { "$numberInt" : "1" }, "max" : { "$numberInt" : "5" }, "minInclusive" : false, "maxInclusive" : false } }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "numberIndex_meta.b"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@<>) '{ "meta.b" : { "min" : { "$numberInt" : "1" }, "max" : { "$numberInt" : "5" }, "minInclusive" : false, "maxInclusive" : false } }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
-- ivf filter number, with $and, default nProbes, match 1 document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "$or": [{ "meta.b": { "$eq": 2 } }, { "meta.b": { "$eq": 5 } } ] }, { "meta.b": { "$lt": 5 } } ] } }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "$or": [{ "meta.b": { "$eq": 2 } }, { "meta.b": { "$eq": 5 } } ] }, { "meta.b": { "$lt": 5 } } ] } }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "$or" : [ { "meta.b" : { "$eq" : { "$numberInt" : "2" } } }, { "meta.b" : { "$eq" : { "$numberInt" : "5" } } } ] }, { "meta.b" : { "$lt" : { "$numberInt" : "5" } } } ] } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "$or" : [ { "meta.b" : { "$eq" : { "$numberInt" : "2" } } }, { "meta.b" : { "$eq" : { "$numberInt" : "5" } } } ] }, { "meta.b" : { "$lt" : { "$numberInt" : "5" } } } ] } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((documentdb_api_catalog.bson_dollar_in(collection.document, '{ "meta.b" : [ { "$numberInt" : "2" }, { "$numberInt" : "5" } ] }'::documentdb_core.bson) AND (collection.document OPERATOR(documentdb_api_catalog.#<) '{ "meta.b" : { "$numberInt" : "5" } }'::documentdb_core.bsonquery)) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 4 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: ((collection.document OPERATOR(documentdb_api_catalog.@*=) '{ "meta.b" : [ { "$numberInt" : "2" }, { "$numberInt" : "5" } ] }'::documentdb_core.bson) AND (collection.document OPERATOR(documentdb_api_catalog.@<) '{ "meta.b" : { "$numberInt" : "5" } }'::documentdb_core.bson))
                                 ->  Bitmap Index Scan on "numberIndex_meta.b"
                                       Index Cond: ((collection.document OPERATOR(documentdb_api_catalog.@*=) '{ "meta.b" : [ { "$numberInt" : "2" }, { "$numberInt" : "5" } ] }'::documentdb_core.bson) AND (collection.document OPERATOR(documentdb_api_catalog.@<) '{ "meta.b" : { "$numberInt" : "5" } }'::documentdb_core.bson))
(25 rows)

ROLLBACK;
-- ivf filter number, with $or, nProbes = 1, match 1 document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.b": { "$gt": 1 } }, { "meta.b": { "$lt": 5 } } ] }, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                      document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.b": { "$gt": 1 } }, { "meta.b": { "$lt": 5 } } ] }, "nProbes": 1 }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$or" : [ { "meta.b" : { "$gt" : { "$numberInt" : "1" } } }, { "meta.b" : { "$lt" : { "$numberInt" : "5" } } } ] }, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$or" : [ { "meta.b" : { "$gt" : { "$numberInt" : "1" } } }, { "meta.b" : { "$lt" : { "$numberInt" : "5" } } } ] }, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE (((collection.document OPERATOR(documentdb_api_catalog.#>) '{ "meta.b" : { "$numberInt" : "1" } }'::documentdb_core.bsonquery) OR (collection.document OPERATOR(documentdb_api_catalog.#<) '{ "meta.b" : { "$numberInt" : "5" } }'::documentdb_core.bsonquery)) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 1 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: ((collection.document OPERATOR(documentdb_api_catalog.@>) '{ "meta.b" : { "$numberInt" : "1" } }'::documentdb_core.bson) OR (collection.document OPERATOR(documentdb_api_catalog.@<) '{ "meta.b" : { "$numberInt" : "5" } }'::documentdb_core.bson))
                                 ->  BitmapOr
                                       ->  Bitmap Index Scan on "numberIndex_meta.b"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@>) '{ "meta.b" : { "$numberInt" : "1" } }'::documentdb_core.bson)
                                       ->  Bitmap Index Scan on "numberIndex_meta.b"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@<) '{ "meta.b" : { "$numberInt" : "5" } }'::documentdb_core.bson)
(29 rows)

ROLLBACK;
-- ivf filter number, with $or, default nProbes, match 3 documents
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.b": { "$eq": 1 } }, { "meta.b": { "$eq": 2 } } , { "meta.b": { "$eq": 5 } } ] } }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
(3 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.b": { "$eq": 1 } }, { "meta.b": { "$eq": 2 } } , { "meta.b": { "$eq": 5 } } ] } }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$or" : [ { "meta.b" : { "$eq" : { "$numberInt" : "1" } } }, { "meta.b" : { "$eq" : { "$numberInt" : "2" } } }, { "meta.b" : { "$eq" : { "$numberInt" : "5" } } } ] } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$or" : [ { "meta.b" : { "$eq" : { "$numberInt" : "1" } } }, { "meta.b" : { "$eq" : { "$numberInt" : "2" } } }, { "meta.b" : { "$eq" : { "$numberInt" : "5" } } } ] } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE (documentdb_api_catalog.bson_dollar_in(collection.document, '{ "meta.b" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "5" } ] }'::documentdb_core.bson) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 4 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@*=) '{ "meta.b" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "5" } ] }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "numberIndex_meta.b"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@*=) '{ "meta.b" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "5" } ] }'::documentdb_core.bson)
(25 rows)

ROLLBACK;
-- ivf filter number, with $eq, $gt, $lt, $gte, $lte, $ne, $in, $and, $or
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.b": { "$eq": 2 } }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.b": { "$gte": 2 } }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
(2 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.b": { "$lte": 2 } }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
(2 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.b": { "$ne": 2 } }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "1203412.0" } }
(3 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.b": { "$in": [ 2,3 ] } }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.b": { "$nin": [ 2 ] } }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "1203412.0" } }
(3 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.b": { "$gt": 2 } }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.b": { "$lt": 2 } }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                      document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "meta.b": { "$gt": 1 } }, { "meta.b": { "$lt": 5 } } ] }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.b": { "$gt": 1 } }, { "meta.b": { "$lt": 5 } } ] }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
(3 rows)

ROLLBACK;
---------------------------------------------------------------------
-- ivf filter boolean, with default nProbes
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": { "c": true } }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
(2 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": { "c": true } }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "c" : true } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "c" : true } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "c" : true }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 4 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : true }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "boolIndex_c"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : true }'::documentdb_core.bson)
(25 rows)

ROLLBACK;
-- ivf filter boolean, with nProbes = 1, match 1 document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": { "c": true }, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                      document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": { "c": true }, "nProbes": 1 }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "c" : true }, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "c" : true }, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "c" : true }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 1 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : true }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "boolIndex_c"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : true }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
-- TODO, current implementation is post-filtering, need to fix
-- ivf filter boolean, with c = false, nProbes = 1, match 0 document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": { "c": false }, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
 document 
---------------------------------------------------------------------
(0 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": { "c": false }, "nProbes": 1 }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "c" : false }, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "c" : false }, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "c" : false }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 1 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : false }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "boolIndex_c"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : false }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
-- ivf filter boolean, with c = false, nProbes = 3, match 1 document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": { "c": false }, "nProbes": 3 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": { "c": false }, "nProbes": 3 }  } } ], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal") AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "c" : false }, "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "c" : false }, "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "c" : false }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 3 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : false }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "boolIndex_c"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : false }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
-- ivf filter boolean, with $eq, $ne, $in, $nin, $and, $or
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"c":  { "$eq": true}}, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
(2 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"c":  { "$ne": true}}, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "1203412.0" } }
(2 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"c":  { "$in": [true]}}, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
(2 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"c":  { "$nin": [true]}}, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "1203412.0" } }
(2 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "c": { "$eq": true } }, { "c": { "$eq": false } } ] }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
 document 
---------------------------------------------------------------------
(0 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "c": { "$eq": true } }, { "c": { "$eq": false } } ] }, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "1203412.0" } }
(4 rows)

ROLLBACK;
---------------------------------------------------------------------
-- ivf search: with filter, different distance metric
-- ivf search: cosine similarity
CALL documentdb_api.drop_indexes('db', '{ "dropIndexes": "aggregation_pipeline_ivf_filter", "index": "ivf_index"}');
                          retval                          
---------------------------------------------------------------------
 { "ok" : true, "nIndexesWas" : { "$numberLong" : "7" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_ivf_filter", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "ivf_index_cos", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 4, "similarity": "COS", "dimensions": 3 } } ] }', true);
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "6" }, "numIndexesAfter" : { "$numberInt" : "7" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

ANALYZE;
BEGIN;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$regex": "^some", "$options" : "i"}}, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                      document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "99986.0" } }
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "88331.0" } }
(2 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$regex": "^some", "$options" : "i"}}, "nProbes": 100 }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, ('1'::double precision OPERATOR(pg_catalog.-) c1."orderVal")) AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<=>) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a" : { "$regularExpression" : { "pattern" : "^some", "options" : "i" } } }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<=>) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a" : { "$regularExpression" : { "pattern" : "^some", "options" : "i" } } }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE (documentdb_api_catalog.bson_dollar_regex(collection.document, '{ "meta.a" : { "$regularExpression" : { "pattern" : "^some", "options" : "i" } } }'::documentdb_core.bson) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ('1'::double precision - ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector))))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ('1'::double precision - ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 100 }
                           ->  Index Scan using ivf_index_cos on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Seq Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Filter: (collection.document OPERATOR(documentdb_api_catalog.@~) '{ "meta.a" : { "$regularExpression" : { "pattern" : "^some", "options" : "i" } } }'::documentdb_core.bson)
(24 rows)

ROLLBACK;
-- ivf search: inner product
CALL documentdb_api.drop_indexes('db', '{ "dropIndexes": "aggregation_pipeline_ivf_filter", "index": "ivf_index_cos"}');
                          retval                          
---------------------------------------------------------------------
 { "ok" : true, "nIndexesWas" : { "$numberLong" : "7" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_ivf_filter", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "ivf_index_ip", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 4, "similarity": "IP", "dimensions": 3 } } ] }', true);
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "6" }, "numIndexesAfter" : { "$numberInt" : "7" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

ANALYZE;
BEGIN;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$regex": "^some", "$options" : "i"}}, "nProbes": 100 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "4860000.0" } }
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "3460000.0" } }
(2 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$regex": "^some", "$options" : "i"}}, "nProbes": 100 }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(c1.document, ('-1'::double precision OPERATOR(pg_catalog.*) c1."orderVal")) AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<#>) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a" : { "$regularExpression" : { "pattern" : "^some", "options" : "i" } } }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<#>) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a" : { "$regularExpression" : { "pattern" : "^some", "options" : "i" } } }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE (documentdb_api_catalog.bson_dollar_regex(collection.document, '{ "meta.a" : { "$regularExpression" : { "pattern" : "^some", "options" : "i" } } }'::documentdb_core.bson) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_document_add_score_field(collection_1.document, ('-1'::double precision * ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <#> '[3,4.9,1]'::vector))))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <#> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_document_add_score_field(collection_1.document, ('-1'::double precision * ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <#> '[3,4.9,1]'::vector)))), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <#> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <#> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 100 }
                           ->  Index Scan using ivf_index_ip on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <#> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Seq Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Filter: (collection.document OPERATOR(documentdb_api_catalog.@~) '{ "meta.a" : { "$regularExpression" : { "pattern" : "^some", "options" : "i" } } }'::documentdb_core.bson)
(24 rows)

ROLLBACK;
-- ivf search: restore to euclidean distance
CALL documentdb_api.drop_indexes('db', '{ "dropIndexes": "aggregation_pipeline_ivf_filter", "index": "ivf_index_ip"}');
                          retval                          
---------------------------------------------------------------------
 { "ok" : true, "nIndexesWas" : { "$numberLong" : "7" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_ivf_filter", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "ivf_index", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 4, "similarity": "L2", "dimensions": 3 } } ] }', true);
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "6" }, "numIndexesAfter" : { "$numberInt" : "7" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

ANALYZE;
---------------------------------------------------------------------
-- ivf search: with filter and score projection
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a.b": 3 }, "nProbes": 100 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
                                    document                                    
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "9" }, "rank" : { "$numberDouble" : "1203412.0" } }
(1 row)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a.b": 3 }, "nProbes": 100 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal"), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a.b" : { "$numberInt" : "3" } }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a.b" : { "$numberInt" : "3" } }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "meta.a.b" : { "$numberInt" : "3" } }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 100 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a.b" : { "$numberInt" : "3" } }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "idx_meta.a.b"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a.b" : { "$numberInt" : "3" } }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
-- ivf search: with filter and score projection, nProbes = 4, match 1 document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"meta": { "a" : [ { "b" : 3 } ] } }, "nProbes": 4 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
                                    document                                    
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "9" }, "rank" : { "$numberDouble" : "1203412.0" } }
(1 row)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"meta": { "a" : [ { "b" : 3 } ] } }, "nProbes": 4 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal"), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "2" }, "path" : "v", "filter" : { "meta" : { "a" : [ { "b" : { "$numberInt" : "3" } } ] } }, "nProbes" : { "$numberInt" : "4" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "4" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "2" }, "path" : "v", "filter" : { "meta" : { "a" : [ { "b" : { "$numberInt" : "3" } } ] } }, "nProbes" : { "$numberInt" : "4" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "meta" : { "a" : [ { "b" : { "$numberInt" : "3" } } ] } }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '2'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 4 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "4" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta" : { "a" : [ { "b" : { "$numberInt" : "3" } } ] } }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "documentIndex_meta"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta" : { "a" : [ { "b" : { "$numberInt" : "3" } } ] } }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
-- ivf search: with filter and score projection, nProbes = 3, no match document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"meta.a": [ { "b" : 3 } ]}, "nProbes": 3 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
 document 
---------------------------------------------------------------------
(0 rows)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"meta.a": [ { "b" : 3 } ]}, "nProbes": 3 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal"), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "2" }, "path" : "v", "filter" : { "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] }, "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "2" }, "path" : "v", "filter" : { "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] }, "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '2'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 3 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "3" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "idx_meta.a"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a" : [ { "b" : { "$numberInt" : "3" } } ] }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
-- ivf search: with filter and score projection, $ne, nProbes = 1, no match document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$ne": "some sentence"}}, "nProbes": 1 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
 document 
---------------------------------------------------------------------
(0 rows)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$ne": "some sentence"}}, "nProbes": 1 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal"), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a" : { "$ne" : "some sentence" } }, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a" : { "$ne" : "some sentence" } }, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE (documentdb_api_catalog.bson_dollar_ne(collection.document, '{ "meta.a" : "some sentence" }'::documentdb_core.bson) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '4'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 1 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@!=) '{ "meta.a" : "some sentence" }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "idx_meta.a"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@!=) '{ "meta.a" : "some sentence" }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"meta.b": { "$gte": 2 } }, "nProbes": 100 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
                                    document                                    
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "rank" : { "$numberDouble" : "508134.0" } }
 { "_id" : { "$numberInt" : "8" }, "rank" : { "$numberDouble" : "1004092.0" } }
(2 rows)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"meta.b": { "$gte": 2 } }, "nProbes": 100 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal"), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "2" }, "path" : "v", "filter" : { "meta.b" : { "$gte" : { "$numberInt" : "2" } } }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "2" }, "path" : "v", "filter" : { "meta.b" : { "$gte" : { "$numberInt" : "2" } } }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#>=) '{ "meta.b" : { "$numberInt" : "2" } }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '2'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 100 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@>=) '{ "meta.b" : { "$numberInt" : "2" } }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "numberIndex_meta.b"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@>=) '{ "meta.b" : { "$numberInt" : "2" } }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"c":  { "$eq": false}}, "nProbes": 100 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
                                    document                                    
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "8" }, "rank" : { "$numberDouble" : "1004092.0" } }
 { "_id" : { "$numberInt" : "9" }, "rank" : { "$numberDouble" : "1203412.0" } }
(2 rows)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "filter": {"c":  { "$eq": false}}, "nProbes": 100 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal"), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "2" }, "path" : "v", "filter" : { "c" : { "$eq" : false } }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "2" }, "path" : "v", "filter" : { "c" : { "$eq" : false } }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "c" : false }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '2'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 100 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : false }'::documentdb_core.bson)
                                 ->  Bitmap Index Scan on "boolIndex_c"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : false }'::documentdb_core.bson)
(26 rows)

ROLLBACK;
-- ivf search: with filter and score projection, $or, multiple filters
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 10, "path": "v", "filter": {"$or": [ { "meta.a": { "$eq": "some sentence" } }, { "meta.b": { "$gt": 2 } }, {"c":  { "$eq": false } } ] }, "nProbes": 100 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
                                    document                                    
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "rank" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "8" }, "rank" : { "$numberDouble" : "1004092.0" } }
 { "_id" : { "$numberInt" : "9" }, "rank" : { "$numberDouble" : "1203412.0" } }
(3 rows)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 10, "path": "v", "filter": {"$or": [ { "meta.a": { "$eq": "some sentence" } }, { "meta.b": { "$gt": 2 } }, {"c":  { "$eq": false } } ] }, "nProbes": 100 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(c1.document, c1."orderVal"), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS document FROM ((SELECT collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "10" }, "path" : "v", "filter" : { "$or" : [ { "meta.a" : { "$eq" : "some sentence" } }, { "meta.b" : { "$gt" : { "$numberInt" : "2" } } }, { "c" : { "$eq" : false } } ] }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true)) AS "orderVal", collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint) AND documentdb_api_internal.bson_search_param(collection.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<->) public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "10" }, "path" : "v", "filter" : { "$or" : [ { "meta.a" : { "$eq" : "some sentence" } }, { "meta.b" : { "$gt" : { "$numberInt" : "2" } } }, { "c" : { "$eq" : false } } ] }, "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson, 'vector'::text), 3, true))) c1 JOIN (SELECT collection.ctid FROM documentdb_data.documents_8102_8100032 collection WHERE (((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "meta.a" : "some sentence" }'::documentdb_core.bsonquery) OR (collection.document OPERATOR(documentdb_api_catalog.#>) '{ "meta.b" : { "$numberInt" : "2" } }'::documentdb_core.bsonquery) OR (collection.document OPERATOR(documentdb_api_catalog.#=) '{ "c" : false }'::documentdb_core.bsonquery)) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '8102'::bigint))) c2 ON ((c2.ctid OPERATOR(pg_catalog.=) c1.ctid))) ORDER BY c1."orderVal" LIMIT '10'::bigint
         Node: host=localhost port=58070 dbname=regression
         ->  Limit
               Output: (documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(collection_1.document, ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))), '{ "rank" : { "$round" : [ { "$multiply" : [ { "$meta" : "searchScore" }, { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), ((vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector))
                     Join Filter: (collection_1.ctid = collection.ctid)
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           Output: collection_1.document, (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector), collection_1.ctid
                           CosmosSearch Custom Params: { "nProbes" : 100 }
                           ->  Index Scan using ivf_index on documentdb_data.documents_8102_8100032 collection_1
                                 Output: collection_1.document, collection_1.ctid
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(collection_1.document, 'v'::text), 3, true) <-> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(collection_1.document, '{ "nProbes" : { "$numberInt" : "100" } }'::documentdb_core.bson)
                     ->  Materialize
                           Output: collection.ctid
                           ->  Bitmap Heap Scan on documentdb_data.documents_8102_8100032 collection
                                 Output: collection.ctid
                                 Recheck Cond: ((collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a" : "some sentence" }'::documentdb_core.bson) OR (collection.document OPERATOR(documentdb_api_catalog.@>) '{ "meta.b" : { "$numberInt" : "2" } }'::documentdb_core.bson) OR (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : false }'::documentdb_core.bson))
                                 ->  BitmapOr
                                       ->  Bitmap Index Scan on "idx_meta.a"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a" : "some sentence" }'::documentdb_core.bson)
                                       ->  Bitmap Index Scan on "numberIndex_meta.b"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@>) '{ "meta.b" : { "$numberInt" : "2" } }'::documentdb_core.bson)
                                       ->  Bitmap Index Scan on "boolIndex_c"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@=) '{ "c" : false }'::documentdb_core.bson)
(31 rows)

ROLLBACK;
---------------------------------------------------------------------
-- ivf search: with filter and shard
-- TODO, current implementation does not support sharded collection, need to fix in part 3
BEGIN;
SET LOCAL client_min_messages TO WARNING;
SELECT documentdb_api.shard_collection('db','aggregation_pipeline_ivf_filter', '{"c":"hashed"}', false);
 shard_collection 
---------------------------------------------------------------------
 
(1 row)

END;
ANALYZE;
-- reindex, numLists = 2
CALL documentdb_api.drop_indexes('db', '{ "dropIndexes": "aggregation_pipeline_ivf_filter", "index": "ivf_index"}');
                          retval                          
---------------------------------------------------------------------
 { "ok" : true, "nIndexesWas" : { "$numberLong" : "7" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_ivf_filter", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "ivf_index", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 2, "similarity": "L2", "dimensions": 3 } } ] }', true);
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "6" }, "numIndexesAfter" : { "$numberInt" : "7" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

ANALYZE;
-- ivf search: with filter and shard, default nProbes, match 1 document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 5.0, 1.1 ], "k": 4, "path": "v", "filter": {"meta.a.b": 3 } }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 5.0, 1.1 ], "k": 4, "path": "v", "filter": {"meta.a.b": 3 } }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
-- ivf search: with filter and shard, nProbes = 1, v= [ 3.0, 5.0, 1.1 ], no match document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 5.0, 1.1 ], "k": 2, "path": "v", "filter": {"meta": { "a" : [ { "b" : 3 } ] } }, "nProbes": 1 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 5.0, 1.1 ], "k": 2, "path": "v", "filter": {"meta": { "a" : [ { "b" : 3 } ] } }, "nProbes": 1 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
-- ivf search: with filter and shard, $ne, nProbes = 1, v= [ 15.0, 5.0, 0.1 ], match 1 document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 15.0, 5.0, 0.1 ], "k": 2, "path": "v", "filter": {"meta.a": [ { "b" : 3 } ]}, "nProbes": 1 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 15.0, 5.0, 0.1 ], "k": 2, "path": "v", "filter": {"meta.a": [ { "b" : 3 } ]}, "nProbes": 1 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
-- ivf search: with filter and shard, $ne, nProbes = 1, v= [ 3.0, 4.9, 1.0 ], match 1 document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$ne": "some sentence"}}, "nProbes": 1 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$ne": "some sentence"}}, "nProbes": 1 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
-- ivf search: with filter and shard, $ne, nProbes = 1, v= [ 13.0, 5.0, 0.1 ], match 2 documents
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 13.0, 5.0, 0.1 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$ne": "some sentence"}}, "nProbes": 1 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 13.0, 5.0, 0.1 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$ne": "some sentence"}}, "nProbes": 1 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
-- ivf search: with filter and shard, $ne, nProbes = 2, v= [ 13.0, 5.0, 0.1 ], match 3 documents
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 13.0, 5.0, 0.1 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$ne": "some sentence"}}, "nProbes": 2 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 13.0, 5.0, 0.1 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$ne": "some sentence"}}, "nProbes": 2 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
-- ivf search: with filter and shard, number, nProbes = 1, v= [ 8.0, 5.0, 0.1 ], match 2 documents
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 8.0, 5.0, 0.1 ], "k": 2, "path": "v", "filter": {"meta.b": { "$gte": 2 } }, "nProbes": 1 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 8.0, 5.0, 0.1 ], "k": 2, "path": "v", "filter": {"meta.b": { "$gte": 2 } }, "nProbes": 1 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
-- ivf search: with filter and shard, filtering on shard field, nProbes = 1, v= [ 13.0, 5.0, 0.1 ], match 1 document
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 13.0, 5.0, 0.1 ], "k": 2, "path": "v", "filter": {"c":  { "$eq": false}}, "nProbes": 1 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 13.0, 5.0, 0.1 ], "k": 2, "path": "v", "filter": {"c":  { "$eq": false}}, "nProbes": 1 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
-- ivf search: with filter and shard, $or, multiple filters
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_ivf_filter", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 10, "path": "v", "filter": {"$or": [ { "meta.a": { "$eq": "some sentence" } }, { "meta.b": { "$gt": 2 } }, {"c":  { "$eq": false } } ] }, "nProbes": 1 }  } } , { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
SET documentdb.enableVectorPreFilter = off;
---------------------------------------------------------------------
-- Vector search with empty vector field
SET search_path TO documentdb_core,documentdb_api,documentdb_api_catalog,documentdb_api_internal;
SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_empty_vector", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "vectorIndex", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 5, "similarity": "COS", "dimensions": 3 } } ] }', true);
NOTICE:  creating collection
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
                                                                                                   create_indexes_non_concurrently                                                                                                   
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : true, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_empty_vector', '{ "_id": 1, "a": "some sentence", "v": [1, 2, 3 ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_empty_vector', '{ "_id": 2, "a": "some other sentence", "v": [1, 2.0, 4 ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_empty_vector', '{ "_id": 3, "a": "some sentence" }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_empty_vector', '{ "_id": 4, "a": "some other sentence", "v": [3, 2, 1 ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_distributed_test_helpers.drop_primary_key('db','aggregation_pipeline_empty_vector');
 drop_primary_key 
---------------------------------------------------------------------
 
(1 row)

ANALYZE;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_empty_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "nProbes": 5 }  } }, { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
                                   document                                   
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "4" }, "rank" : { "$numberDouble" : "90740.0" } }
 { "_id" : { "$numberInt" : "1" }, "rank" : { "$numberDouble" : "72409.0" } }
 { "_id" : { "$numberInt" : "2" }, "rank" : { "$numberDouble" : "62863.0" } }
(3 rows)

EXPLAIN (COSTS OFF)SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_empty_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "nProbes": 5 }  } }, { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
                                                                         QUERY PLAN                                                                          
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               ->  Limit
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           CosmosSearch Custom Params: { "nProbes" : 5 }
                           ->  Index Scan using "vectorIndex" on documents_8103_8100056 collection
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(document, '{ "nProbes" : { "$numberInt" : "5" } }'::documentdb_core.bson)
(12 rows)

COMMIT;
ANALYZE;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_empty_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "nProbes": 5 }  } }, { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
                                   document                                   
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "4" }, "rank" : { "$numberDouble" : "90740.0" } }
 { "_id" : { "$numberInt" : "1" }, "rank" : { "$numberDouble" : "72409.0" } }
 { "_id" : { "$numberInt" : "2" }, "rank" : { "$numberDouble" : "62863.0" } }
(3 rows)

EXPLAIN (COSTS OFF)SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_empty_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "nProbes": 5 }  } }, { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
                                                                         QUERY PLAN                                                                          
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               ->  Limit
                     ->  Custom Scan (DocumentDBApiQueryScan)
                           CosmosSearch Custom Params: { "nProbes" : 5 }
                           ->  Index Scan using "vectorIndex" on documents_8103_8100056 collection
                                 Order By: (vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true) <=> '[3,4.9,1]'::vector)
                                 Filter: documentdb_api_internal.bson_search_param(document, '{ "nProbes" : { "$numberInt" : "5" } }'::documentdb_core.bson)
(12 rows)

COMMIT;
SELECT drop_collection('db','aggregation_pipeline_empty_vector');
 drop_collection 
---------------------------------------------------------------------
 t
(1 row)

DROP ROLE IF EXISTS test_filter_user;
---------------------------------------------------------------------
-- exact search
SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_vector_ivf_exact', '{ "_id": 6, "meta":{ "a": "some sentence", "b": 1 }, "c": true , "v": [3.0, 5.0, 1.1 ] }');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_vector_ivf_exact', '{ "_id": 7, "meta":{ "a": "some other sentence", "b": 2}, "c": true , "v": [8.0, 5.0, 0.1 ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_vector_ivf_exact', '{ "_id": 8, "meta":{ "a": "other sentence", "b": 5 }, "c": false, "v": [13.0, 5.0, 0.1 ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_vector_ivf_exact', '{ "_id": 9, "meta":{ "a" : [ { "b" : 3 } ] }, "c": false, "v": [15.0, 5.0, 0.1 ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_vector_ivf_exact', '{ "_id": 10, "meta":{ "a" : [ { "b" : 5 } ] }, "c": false }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_distributed_test_helpers.drop_primary_key('db','aggregation_pipeline_vector_ivf_exact');
 drop_primary_key 
---------------------------------------------------------------------
 
(1 row)

SET client_min_messages TO WARNING;
SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_vector_ivf_exact", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "foo_1", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 4, "similarity": "COS", "dimensions": 3 } } ] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "0" }, "numIndexesAfter" : { "$numberInt" : "1" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

RESET client_min_messages;
SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_vector_ivf_exact", "indexes": [ { "key": { "meta.a": 1 }, "name": "idx_meta.a" } ] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_vector_ivf_exact", "indexes": [ { "key": { "meta.b": 1 }, "name": "numberIndex_meta.b" } ] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "2" }, "numIndexesAfter" : { "$numberInt" : "3" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_vector_ivf_exact", "indexes": [ { "key": { "meta.a.b": 1 }, "name": "idx_meta.a.b" } ] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "3" }, "numIndexesAfter" : { "$numberInt" : "4" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_vector_ivf_exact", "indexes": [ { "key": { "meta": 1 }, "name": "documentIndex_meta" } ] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "4" }, "numIndexesAfter" : { "$numberInt" : "5" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_vector_ivf_exact", "indexes": [ { "key": { "c": 1 }, "name": "boolIndex_c" } ] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "5" }, "numIndexesAfter" : { "$numberInt" : "6" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

ANALYZE;
-- error cases
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1, "exact": {}  }  } } ], "cursor": {} }');
ERROR:  $exact must be a boolean value.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1, "exact": 123  }  } } ], "cursor": {} }');
ERROR:  $exact must be a boolean value.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1, "exact": "abc"  }  } } ], "cursor": {} }');
ERROR:  $exact must be a boolean value.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1, "exact": [1,2,3]  }  } } ], "cursor": {} }');
ERROR:  $exact must be a boolean value.
-- COS
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1, "exact": true }  } } ], "cursor": {} }');
                                                                                                                                                           document                                                                                                                                                           
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "meta" : { "a" : "some sentence", "b" : { "$numberInt" : "1" } }, "c" : true, "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.99986126308999445644" } } }
 { "_id" : { "$numberInt" : "7" }, "meta" : { "a" : "some other sentence", "b" : { "$numberInt" : "2" } }, "c" : true, "v" : [ { "$numberDouble" : "8.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "0.10000000000000000555" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.88331075895982669177" } } }
(2 rows)

EXPLAIN (VERBOSE on, COSTS off) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1, "exact": true }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(document, ('1'::double precision OPERATOR(pg_catalog.-) public.cosine_distance(public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true), public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "2" }, "path" : "v", "nProbes" : { "$numberInt" : "1" }, "exact" : true }'::documentdb_core.bson, 'vector'::text), 3, true)))) AS document FROM (SELECT collection.document FROM documentdb_data.documents_8104_8100079 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8104'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.cosine_distance(public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "2" }, "path" : "v", "nProbes" : { "$numberInt" : "1" }, "exact" : true }'::documentdb_core.bson, 'vector'::text), 3, true))) LIMIT '2'::bigint) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: documentdb_api_internal.bson_document_add_score_field(agg_stage_0.document, ('1'::double precision - cosine_distance(vector(documentdb_api_internal.bson_extract_vector(agg_stage_0.document, 'v'::text), 3, true), '[3,4.9,1]'::vector)))
               ->  Limit
                     Output: collection.document, (cosine_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                     ->  Sort
                           Output: collection.document, (cosine_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                           Sort Key: (cosine_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                           ->  Seq Scan on documentdb_data.documents_8104_8100079 collection
                                 Output: collection.document, cosine_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector)
                                 Filter: (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)
(17 rows)

COMMIT;
-- IP
CALL documentdb_api.drop_indexes('db', '{ "dropIndexes": "aggregation_pipeline_vector_ivf_exact", "index": "foo_1"}');
                          retval                          
---------------------------------------------------------------------
 { "ok" : true, "nIndexesWas" : { "$numberLong" : "6" } }
(1 row)

SET client_min_messages TO WARNING;
SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_vector_ivf_exact", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "foo_1", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 4, "similarity": "IP", "dimensions": 3 } } ] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "5" }, "numIndexesAfter" : { "$numberInt" : "6" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

RESET client_min_messages;
ANALYZE;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1, "exact": true }  } } ], "cursor": {} }');
                                                                                                                                                        document                                                                                                                                                         
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "9" }, "meta" : { "a" : [ { "b" : { "$numberInt" : "3" } } ] }, "c" : false, "v" : [ { "$numberDouble" : "15.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "0.10000000000000000555" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "69.59999847412109375" } } }
 { "_id" : { "$numberInt" : "8" }, "meta" : { "a" : "other sentence", "b" : { "$numberInt" : "5" } }, "c" : false, "v" : [ { "$numberDouble" : "13.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "0.10000000000000000555" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "63.59999847412109375" } } }
(2 rows)

EXPLAIN (VERBOSE on, COSTS off) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1, "exact": true }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(document, ('-1'::double precision OPERATOR(pg_catalog.*) public.vector_negative_inner_product(public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true), public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "2" }, "path" : "v", "nProbes" : { "$numberInt" : "1" }, "exact" : true }'::documentdb_core.bson, 'vector'::text), 3, true)))) AS document FROM (SELECT collection.document FROM documentdb_data.documents_8104_8100079 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8104'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.vector_negative_inner_product(public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "2" }, "path" : "v", "nProbes" : { "$numberInt" : "1" }, "exact" : true }'::documentdb_core.bson, 'vector'::text), 3, true))) LIMIT '2'::bigint) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: documentdb_api_internal.bson_document_add_score_field(agg_stage_0.document, ('-1'::double precision * vector_negative_inner_product(vector(documentdb_api_internal.bson_extract_vector(agg_stage_0.document, 'v'::text), 3, true), '[3,4.9,1]'::vector)))
               ->  Limit
                     Output: collection.document, (vector_negative_inner_product(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                     ->  Sort
                           Output: collection.document, (vector_negative_inner_product(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                           Sort Key: (vector_negative_inner_product(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                           ->  Seq Scan on documentdb_data.documents_8104_8100079 collection
                                 Output: collection.document, vector_negative_inner_product(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector)
                                 Filter: (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)
(17 rows)

COMMIT;
-- L2
CALL documentdb_api.drop_indexes('db', '{ "dropIndexes": "aggregation_pipeline_vector_ivf_exact", "index": "foo_1"}');
                          retval                          
---------------------------------------------------------------------
 { "ok" : true, "nIndexesWas" : { "$numberLong" : "6" } }
(1 row)

SET client_min_messages TO WARNING;
SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_vector_ivf_exact", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "foo_1", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 4, "similarity": "L2", "dimensions": 3 } } ] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "5" }, "numIndexesAfter" : { "$numberInt" : "6" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

RESET client_min_messages;
ANALYZE;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1, "exact": true }  } } ], "cursor": {} }');
                                                                                                                                                          document                                                                                                                                                           
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "meta" : { "a" : "some sentence", "b" : { "$numberInt" : "1" } }, "c" : true, "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.14142130855867909855" } } }
 { "_id" : { "$numberInt" : "7" }, "meta" : { "a" : "some other sentence", "b" : { "$numberInt" : "2" } }, "c" : true, "v" : [ { "$numberDouble" : "8.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "0.10000000000000000555" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "5.0813383763359256662" } } }
(2 rows)

EXPLAIN (VERBOSE on, COSTS off) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1, "exact": true }  } } ], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(document, public.l2_distance(public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true), public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "2" }, "path" : "v", "nProbes" : { "$numberInt" : "1" }, "exact" : true }'::documentdb_core.bson, 'vector'::text), 3, true))) AS document FROM (SELECT collection.document FROM documentdb_data.documents_8104_8100079 collection WHERE ((collection.shard_key_value OPERATOR(pg_catalog.=) '8104'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)) ORDER BY (public.l2_distance(public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "2" }, "path" : "v", "nProbes" : { "$numberInt" : "1" }, "exact" : true }'::documentdb_core.bson, 'vector'::text), 3, true))) LIMIT '2'::bigint) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: documentdb_api_internal.bson_document_add_score_field(agg_stage_0.document, l2_distance(vector(documentdb_api_internal.bson_extract_vector(agg_stage_0.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
               ->  Limit
                     Output: collection.document, (l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                     ->  Sort
                           Output: collection.document, (l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                           Sort Key: (l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                           ->  Seq Scan on documentdb_data.documents_8104_8100079 collection
                                 Output: collection.document, l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector)
                                 Filter: (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)
(17 rows)

COMMIT;
-- nProbes
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "exact": true }  } } ], "cursor": {} }');
                                                                                                                                                          document                                                                                                                                                           
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "meta" : { "a" : "some sentence", "b" : { "$numberInt" : "1" } }, "c" : true, "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.14142130855867909855" } } }
 { "_id" : { "$numberInt" : "7" }, "meta" : { "a" : "some other sentence", "b" : { "$numberInt" : "2" } }, "c" : true, "v" : [ { "$numberDouble" : "8.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "0.10000000000000000555" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "5.0813383763359256662" } } }
(2 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1, "exact": true }  } } ], "cursor": {} }');
                                                                                                                                                          document                                                                                                                                                           
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "meta" : { "a" : "some sentence", "b" : { "$numberInt" : "1" } }, "c" : true, "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.14142130855867909855" } } }
 { "_id" : { "$numberInt" : "7" }, "meta" : { "a" : "some other sentence", "b" : { "$numberInt" : "2" } }, "c" : true, "v" : [ { "$numberDouble" : "8.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "0.10000000000000000555" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "5.0813383763359256662" } } }
(2 rows)

ROLLBACK;
-- exact = false
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "exact": false }  } } ], "cursor": {} }');
                                                                                                                                                       document                                                                                                                                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "meta" : { "a" : "some sentence", "b" : { "$numberInt" : "1" } }, "c" : true, "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.14142130855867909855" } } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1, "exact": false }  } } ], "cursor": {} }');
                                                                                                                                                       document                                                                                                                                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "meta" : { "a" : "some sentence", "b" : { "$numberInt" : "1" } }, "c" : true, "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.14142130855867909855" } } }
(1 row)

ROLLBACK;
-- filter:, with $eq, $gt, $lt, $gte, $lte, $ne, $in, $and, $or, $regex
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$eq": "some sentence"}}, "exact": true, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                      document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$gt": "some sentence"}}, "exact": true, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
 document 
---------------------------------------------------------------------
(0 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$lt": "some sentence"}}, "exact": true, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
(2 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 15.0, 5.0, 0.1 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$ne": "some sentence"}}, "exact": true, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "0.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "200000.0" } }
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "700000.0" } }
(3 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$in": ["some sentence", "other sentence"]}}, "exact": true, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
(2 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$regex": "^some", "$options" : "i"}}, "exact": true, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
(2 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  [ { "b" : 3 } ] }, "exact": true, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "9" }, "searchScore" : { "$numberDouble" : "1203412.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "meta.a": { "$eq": "other sentence" } }, { "meta.b": { "$lt": 10 } } ] }, "exact": true, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.a": { "$gt": "other sentence" } }, { "meta.b": { "$gt": 1 } } ] }, "exact": true, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
                                       document                                        
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "searchScore" : { "$numberDouble" : "14142.0" } }
 { "_id" : { "$numberInt" : "7" }, "searchScore" : { "$numberDouble" : "508134.0" } }
 { "_id" : { "$numberInt" : "8" }, "searchScore" : { "$numberDouble" : "1004092.0" } }
(3 rows)

ROLLBACK;
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
EXPLAIN (VERBOSE on, COSTS off) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$in": ["some sentence", "other sentence"]}}, "exact": true, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(document, public.l2_distance(public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true), public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a" : { "$in" : [ "some sentence", "other sentence" ] } }, "exact" : true, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true))), '{ "searchScore" : { "$round" : [ { "$multiply" : [ "$__cosmos_meta__.score", { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS document FROM (SELECT collection.document FROM documentdb_data.documents_8104_8100079 collection WHERE ((documentdb_api_catalog.bson_dollar_in(collection.document, '{ "meta.a" : [ "some sentence", "other sentence" ] }'::documentdb_core.bson) AND (collection.document OPERATOR(documentdb_api_internal.##=) ANY (ARRAY['{ "meta.a" : "some sentence" }'::documentdb_api_internal.bsonindexbounds, '{ "meta.a" : "other sentence" }'::documentdb_api_internal.bsonindexbounds]))) AND ((collection.shard_key_value OPERATOR(pg_catalog.=) '8104'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL))) ORDER BY (public.l2_distance(public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "meta.a" : { "$in" : [ "some sentence", "other sentence" ] } }, "exact" : true, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true))) LIMIT '4'::bigint) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(agg_stage_0.document, l2_distance(vector(documentdb_api_internal.bson_extract_vector(agg_stage_0.document, 'v'::text), 3, true), '[3,4.9,1]'::vector)), '{ "searchScore" : { "$round" : [ { "$multiply" : [ "$__cosmos_meta__.score", { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)
               ->  Limit
                     Output: collection.document, (l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                     ->  Sort
                           Output: collection.document, (l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                           Sort Key: (l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                           ->  Bitmap Heap Scan on documentdb_data.documents_8104_8100079 collection
                                 Output: collection.document, l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector)
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@*=) '{ "meta.a" : [ "some sentence", "other sentence" ] }'::documentdb_core.bson)
                                 Filter: (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)
                                 ->  Bitmap Index Scan on "idx_meta.a"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@*=) '{ "meta.a" : [ "some sentence", "other sentence" ] }'::documentdb_core.bson)
(20 rows)

EXPLAIN (VERBOSE on, COSTS off) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$and": [ { "meta.a": { "eq": "other sentence" } }, { "meta.b": { "$lt": 10 } } ] }, "exact": true, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(document, public.l2_distance(public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true), public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "meta.a" : { "eq" : "other sentence" } }, { "meta.b" : { "$lt" : { "$numberInt" : "10" } } } ] }, "exact" : true, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true))), '{ "searchScore" : { "$round" : [ { "$multiply" : [ "$__cosmos_meta__.score", { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS document FROM (SELECT collection.document FROM documentdb_data.documents_8104_8100079 collection WHERE (((collection.document OPERATOR(documentdb_api_catalog.#=) '{ "meta.a" : { "eq" : "other sentence" } }'::documentdb_core.bsonquery) AND (collection.document OPERATOR(documentdb_api_catalog.#<) '{ "meta.b" : { "$numberInt" : "10" } }'::documentdb_core.bsonquery)) AND ((collection.shard_key_value OPERATOR(pg_catalog.=) '8104'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL))) ORDER BY (public.l2_distance(public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$and" : [ { "meta.a" : { "eq" : "other sentence" } }, { "meta.b" : { "$lt" : { "$numberInt" : "10" } } } ] }, "exact" : true, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true))) LIMIT '4'::bigint) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(agg_stage_0.document, l2_distance(vector(documentdb_api_internal.bson_extract_vector(agg_stage_0.document, 'v'::text), 3, true), '[3,4.9,1]'::vector)), '{ "searchScore" : { "$round" : [ { "$multiply" : [ "$__cosmos_meta__.score", { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)
               ->  Limit
                     Output: collection.document, (l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                     ->  Sort
                           Output: collection.document, (l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                           Sort Key: (l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                           ->  Bitmap Heap Scan on documentdb_data.documents_8104_8100079 collection
                                 Output: collection.document, l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector)
                                 Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@<) '{ "meta.b" : { "$numberInt" : "10" } }'::documentdb_core.bson)
                                 Filter: ((collection.document OPERATOR(documentdb_api_catalog.@=) '{ "meta.a" : { "eq" : "other sentence" } }'::documentdb_core.bson) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL))
                                 ->  Bitmap Index Scan on "numberIndex_meta.b"
                                       Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@<) '{ "meta.b" : { "$numberInt" : "10" } }'::documentdb_core.bson)
(20 rows)

EXPLAIN (VERBOSE on, COSTS off) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"$or": [ { "meta.a": { "$gt": "other sentence" } }, { "meta.b": { "$gt": 1 } } ] }, "exact": true, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(document, public.l2_distance(public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true), public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$or" : [ { "meta.a" : { "$gt" : "other sentence" } }, { "meta.b" : { "$gt" : { "$numberInt" : "1" } } } ] }, "exact" : true, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true))), '{ "searchScore" : { "$round" : [ { "$multiply" : [ "$__cosmos_meta__.score", { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS document FROM (SELECT collection.document FROM documentdb_data.documents_8104_8100079 collection WHERE (((collection.document OPERATOR(documentdb_api_catalog.#>) '{ "meta.a" : "other sentence" }'::documentdb_core.bsonquery) OR (collection.document OPERATOR(documentdb_api_catalog.#>) '{ "meta.b" : { "$numberInt" : "1" } }'::documentdb_core.bsonquery)) AND ((collection.shard_key_value OPERATOR(pg_catalog.=) '8104'::bigint) AND (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL))) ORDER BY (public.l2_distance(public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "4" }, "path" : "v", "filter" : { "$or" : [ { "meta.a" : { "$gt" : "other sentence" } }, { "meta.b" : { "$gt" : { "$numberInt" : "1" } } } ] }, "exact" : true, "nProbes" : { "$numberInt" : "1" } }'::documentdb_core.bson, 'vector'::text), 3, true))) LIMIT '4'::bigint) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Subquery Scan on agg_stage_0
               Output: documentdb_api_internal.bson_dollar_project(documentdb_api_internal.bson_document_add_score_field(agg_stage_0.document, l2_distance(vector(documentdb_api_internal.bson_extract_vector(agg_stage_0.document, 'v'::text), 3, true), '[3,4.9,1]'::vector)), '{ "searchScore" : { "$round" : [ { "$multiply" : [ "$__cosmos_meta__.score", { "$numberInt" : "100000" } ] } ] } }'::documentdb_core.bson, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)
               ->  Limit
                     Output: collection.document, (l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                     ->  Sort
                           Output: collection.document, (l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                           Sort Key: (l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                           ->  Bitmap Heap Scan on documentdb_data.documents_8104_8100079 collection
                                 Output: collection.document, l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector)
                                 Recheck Cond: ((collection.document OPERATOR(documentdb_api_catalog.@>) '{ "meta.a" : "other sentence" }'::documentdb_core.bson) OR (collection.document OPERATOR(documentdb_api_catalog.@>) '{ "meta.b" : { "$numberInt" : "1" } }'::documentdb_core.bson))
                                 Filter: (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)
                                 ->  BitmapOr
                                       ->  Bitmap Index Scan on "idx_meta.a"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@>) '{ "meta.a" : "other sentence" }'::documentdb_core.bson)
                                       ->  Bitmap Index Scan on "numberIndex_meta.b"
                                             Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@>) '{ "meta.b" : { "$numberInt" : "1" } }'::documentdb_core.bson)
(23 rows)

ROLLBACK;
-- shard
SET client_min_messages TO WARNING;
SELECT documentdb_api.shard_collection('db','aggregation_pipeline_vector_ivf_exact', '{"_id":"hashed"}', false);
 shard_collection 
---------------------------------------------------------------------
 
(1 row)

RESET client_min_messages;
ANALYZE;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1, "exact": true }  } } ], "cursor": {} }');
                                                                                                                                                          document                                                                                                                                                           
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "meta" : { "a" : "some sentence", "b" : { "$numberInt" : "1" } }, "c" : true, "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.14142130855867909855" } } }
 { "_id" : { "$numberInt" : "7" }, "meta" : { "a" : "some other sentence", "b" : { "$numberInt" : "2" } }, "c" : true, "v" : [ { "$numberDouble" : "8.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "0.10000000000000000555" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "5.0813383763359256662" } } }
(2 rows)

EXPLAIN (VERBOSE on, COSTS off) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1, "exact": true }  } } ], "cursor": {} }');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   ->  Distributed Subplan 312_1
         ->  Limit
               Output: remote_scan.document, remote_scan."?sort?"
               ->  Sort
                     Output: remote_scan.document, remote_scan."?sort?"
                     Sort Key: remote_scan."?sort?"
                     ->  Custom Scan (Citus Adaptive)
                           Output: remote_scan.document, remote_scan."?sort?"
                           Task Count: 8
                           Tasks Shown: One of 8
                           ->  Task
                                 Query: SELECT document, public.l2_distance(public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true), '[3,4.9,1]'::public.vector) AS "?sort?" FROM documentdb_data.documents_8104_8100088 collection WHERE (documentdb_api_internal.bson_extract_vector(document, 'v'::text) IS NOT NULL) ORDER BY (public.l2_distance(public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true), '[3,4.9,1]'::public.vector)) LIMIT '2'::bigint
                                 Node: host=localhost port=58070 dbname=regression
                                 ->  Limit
                                       Output: document, (l2_distance(vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                                       ->  Sort
                                             Output: document, (l2_distance(vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                                             Sort Key: (l2_distance(vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
                                             ->  Seq Scan on documentdb_data.documents_8104_8100088 collection
                                                   Output: document, l2_distance(vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true), '[3,4.9,1]'::vector)
                                                   Filter: (documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text) IS NOT NULL)
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_document_add_score_field(document, public.l2_distance(public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true), public.vector(documentdb_api_internal.bson_extract_vector('{ "vector" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "4.9000000000000003553" }, { "$numberDouble" : "1.0" } ], "k" : { "$numberInt" : "2" }, "path" : "v", "nProbes" : { "$numberInt" : "1" }, "exact" : true }'::documentdb_core.bson, 'vector'::text), 3, true))) AS document FROM (SELECT intermediate_result.document FROM read_intermediate_result('312_1'::text, 'binary'::citus_copy_format) intermediate_result(document documentdb_core.bson)) agg_stage_0
         Node: host=localhost port=58070 dbname=regression
         ->  Function Scan on pg_catalog.read_intermediate_result intermediate_result
               Output: documentdb_api_internal.bson_document_add_score_field(intermediate_result.document, l2_distance(vector(documentdb_api_internal.bson_extract_vector(intermediate_result.document, 'v'::text), 3, true), '[3,4.9,1]'::vector))
               Function Call: read_intermediate_result('312_1'::text, 'binary'::citus_copy_format)
(31 rows)

COMMIT;
-- shard is not supported with filter yet
BEGIN;
SET LOCAL enable_seqscan to off;
SET LOCAL documentdb.enableVectorPreFilter = on;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_vector_ivf_exact", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "filter": {"meta.a":  { "$eq": "some sentence"}}, "exact": true, "nProbes": 1 }  } }, { "$project": {"searchScore": {"$round": [ {"$multiply": ["$__cosmos_meta__.score", 100000]}]} } } ], "cursor": {} }');
ERROR:  Filter is not supported for vector search on sharded collection.
ROLLBACK;
SELECT drop_collection('db','aggregation_pipeline_vector_ivf_exact');
 drop_collection 
---------------------------------------------------------------------
 t
(1 row)

