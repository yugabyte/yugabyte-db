SET citus.next_shard_id TO 320000;
SET documentdb.next_collection_id TO 32000;
SET documentdb.next_collection_index_id TO 32000;
CREATE SCHEMA change_index_jobs_schema;
CREATE OR REPLACE FUNCTION change_index_jobs_schema.change_index_jobs_status(active_status boolean)
RETURNS void
AS $$
DECLARE
    job_id integer;
BEGIN
    FOR job_id IN (SELECT jobid FROM cron.job WHERE jobname LIKE 'documentdb_index_%' order by jobid)
    LOOP
        UPDATE cron.job SET active = active_status WHERE jobid = job_id;
        RAISE NOTICE 'Processing job_id: %', job_id;
    END LOOP;
END;
$$
LANGUAGE plpgsql;
SET search_path to documentdb_core,documentdb_api,documentdb_api_catalog,change_index_jobs_schema;
-- Delete all old create index requests from other tests
DELETE from documentdb_api_catalog.documentdb_index_queue;
---- createIndexes - top level - parse error ----
SELECT * FROM documentdb_api.create_indexes_background('db', NULL);
ERROR:  arg cannot be NULL
SELECT * FROM documentdb_api.create_indexes_background(NULL, '{}');
ERROR:  dbName cannot be NULL
SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "unknown_field": []}');
                                                                                                        retval                                                                                                         | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "BSON field 'createIndexes.unknown_field' is an unknown field", "code" : { "$numberInt" : "136314909" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": null, "indexes": [{"key": {"a": 1, "": -1}, "name": "my_idx"}]}');
                                                                                            retval                                                                                             | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "collection name has invalid type null", "code" : { "$numberInt" : "16777245" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": null}');
                                                                                                                   retval                                                                                                                   | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "BSON field 'createIndexes.indexes' is the wrong type 'null', expected type 'array'", "code" : { "$numberInt" : "67108893" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": 5}');
                                                                                                                  retval                                                                                                                   | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "BSON field 'createIndexes.indexes' is the wrong type 'int', expected type 'array'", "code" : { "$numberInt" : "67108893" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": []}');
                                                                                              retval                                                                                               | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Must specify at least one index to create", "code" : { "$numberInt" : "16777245" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6"}');
                                                                                                           retval                                                                                                           | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "BSON field 'createIndexes.indexes' is missing but a required field", "code" : { "$numberInt" : "16777245" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{}');
                                                                                                           retval                                                                                                           | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "BSON field 'createIndexes.indexes' is missing but a required field", "code" : { "$numberInt" : "16777245" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": 1}');
                                                                                            retval                                                                                            | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "collection name has invalid type int", "code" : { "$numberInt" : "16777245" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": 1}');
                                                                                                                  retval                                                                                                                   | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "BSON field 'createIndexes.indexes' is the wrong type 'int', expected type 'array'", "code" : { "$numberInt" : "67108893" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [1,2]}');
                                                                                                                    retval                                                                                                                    | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "BSON field 'createIndexes.indexes.0' is the wrong type 'int', expected type 'object'", "code" : { "$numberInt" : "67108893" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": 1}]}');
                                                                                                                            retval                                                                                                                             | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : 1 } :: caused by :: The field 'key' must be an object, but got int", "code" : { "$numberInt" : "67108893" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"name": 1}]}');
                                                                                                                             retval                                                                                                                              | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"name\" : 1 } :: caused by :: The field 'name' must be an string, but got int", "code" : { "$numberInt" : "67108893" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"unique": "1"}]}');
                                                                                                                                               retval                                                                                                                                               | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"unique\" : \"1\" } :: caused by :: The field 'unique' has value unique: \"1\", which is not convertible to bool", "code" : { "$numberInt" : "67108893" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a": 1}}]}');
                                                                                                                                            retval                                                                                                                                            | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a\" : 1 } } :: caused by :: The 'name' field is a required property of an index specification", "code" : { "$numberInt" : "50331677" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"name": "my_idx"}]}');
                                                                                                                                          retval                                                                                                                                           | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"name\" : \"my_idx\" } :: caused by :: The 'key' field is a required property of an index specification", "code" : { "$numberInt" : "50331677" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"unknown_field": "111"}]}');
                                                                                                                                                                      retval                                                                                                                                                                      | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"unknown_field\" : \"111\" } :: caused by :: The field 'unknown_field' is not valid for an index specification. Specification: { \"unknown_field\" : \"111\" }", "code" : { "$numberInt" : "33816605" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"name": "_name_", "unknown_field": "111"}]}');
                                                                                                                                                                                             retval                                                                                                                                                                                             | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"name\" : \"_name_\", \"unknown_field\" : \"111\" } :: caused by :: The field 'unknown_field' is not valid for an index specification. Specification: { \"name\" : \"_name_\", \"unknown_field\" : \"111\" }", "code" : { "$numberInt" : "33816605" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

---- createIndexes - indexes.key - parse error ----
SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"": 1}, "name": "my_idx"}]}');
                                                                                                                                        retval                                                                                                                                         | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"\" : 1 }, \"name\" : \"my_idx\" } :: caused by :: Index keys cannot be an empty field", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a": 1, "": -1}, "name": "my_idx"}]}');
                                                                                                                                              retval                                                                                                                                               | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a\" : 1, \"\" : -1 }, \"name\" : \"my_idx\" } :: caused by :: Index keys cannot be an empty field", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.$**": 1, "b": -1}, "name": "my_idx"}]}');
                                                                                                                                                    retval                                                                                                                                                    | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a.$**\" : 1, \"b\" : -1 }, \"name\" : \"my_idx\" } :: caused by :: wildcard indexes do not allow compounding", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {".$**": 1}, "name": "my_idx"}]}');
                                                                                                                                             retval                                                                                                                                              | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \".$**\" : 1 }, \"name\" : \"my_idx\" } :: caused by :: Index keys cannot contain an empty field.", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.$**": "bad"}, "name": "my_idx"}]}');
                                                                                                                                          retval                                                                                                                                           | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a.$**\" : \"bad\" }, \"name\" : \"my_idx\" } :: caused by :: Unknown index plugin \"bad\"", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.$**": 0}, "name": "my_idx"}]}');
                                                                                                                                               retval                                                                                                                                                | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a.$**\" : 0 }, \"name\" : \"my_idx\" } :: caused by :: Values in the index key pattern cannot be 0.", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.$**": ""}, "name": "my_idx"}]}');
                                                                                                                                                      retval                                                                                                                                                       | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a.$**\" : \"\" }, \"name\" : \"my_idx\" } :: caused by :: Values in the index key pattern cannot be empty strings", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.$**": {"a": 1}}, "name": "my_idx"}]}');
                                                                                                                                                                                        retval                                                                                                                                                                                        | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a.$**\" : { \"a\" : 1 } }, \"name\" : \"my_idx\" } :: caused by :: Values in v:2 index key pattern cannot be of type object. Only numbers > 0, numbers < 0, and strings are allowed.", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT index_cmd, cmd_type, index_id, index_cmd_status, collection_id, attempt, user_oid FROM documentdb_api_catalog.documentdb_index_queue ORDER BY index_id;
 index_cmd | cmd_type | index_id | index_cmd_status | collection_id | attempt | user_oid 
---------------------------------------------------------------------
(0 rows)

-- note that those are valid ..
SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a$**foo": 1}, "name": "my_idx_1"}]}');
NOTICE:  creating collection
                                                                                                               retval                                                                                                                | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : true, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32001" } ] } }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a$**": 1}, "name": "my_idx_3"}]}');
                                                                                                                retval                                                                                                                | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "2" }, "numIndexesAfter" : { "$numberInt" : "3" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32002" } ] } }
(1 row)

-- valid sparse index
SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"asparse": 1}, "name": "my_sparse_idx1", "sparse": true}]}');
                                                                                                                retval                                                                                                                | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "3" }, "numIndexesAfter" : { "$numberInt" : "4" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32003" } ] } }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"asparse_num": 1}, "name": "my_sparse_num_idx1", "sparse": 1}]}');
                                                                                                                retval                                                                                                                | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "4" }, "numIndexesAfter" : { "$numberInt" : "5" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32004" } ] } }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"asparse_num": 1}, "name": "my_non_sparse_num_idx1", "sparse": 0}]}');
                                                                                                                retval                                                                                                                | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "5" }, "numIndexesAfter" : { "$numberInt" : "6" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32005" } ] } }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.sparse.double": 1}, "name": "my_sparse_double_idx1", "sparse": 0.2}]}');
                                                                                                                retval                                                                                                                | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "6" }, "numIndexesAfter" : { "$numberInt" : "7" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32006" } ] } }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": null, "createIndexes": "collection_6", "indexes": [{"key": 0, "key": {"bsparse": 1}, "name": "my_non_sparse_idx1", "sparse": false}]}');
                                                                                                                retval                                                                                                                | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "7" }, "numIndexesAfter" : { "$numberInt" : "8" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32007" } ] } }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"cs.$**": 1}, "name": "my_wildcard_non_sparse_idx1", "sparse": false}]}');
                                                                                                                retval                                                                                                                | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "8" }, "numIndexesAfter" : { "$numberInt" : "9" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32008" } ] } }
(1 row)

-- invalid sparse indexes
SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"bs.$**": 1}, "name": "my_wildcard_sparse_idx1", "sparse": true}]}');
                                                                                                                                                                       retval                                                                                                                                                                        | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"bs.$**\" : 1 }, \"name\" : \"my_wildcard_sparse_idx1\", \"sparse\" : true } :: caused by :: Index type 'wildcard' does not support the sparse option", "code" : { "$numberInt" : "33816605" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"bs.$**": 1}, "name": "my_wildcard_sparse_idx1", "sparse": "true"}]}');
                                                                                                                                                                                     retval                                                                                                                                                                                     | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"bs.$**\" : 1 }, \"name\" : \"my_wildcard_sparse_idx1\", \"sparse\" : \"true\" } :: caused by :: The field 'sparse' has value sparse: \"true\", which is not convertible to bool", "code" : { "$numberInt" : "67108893" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"bs.a": 1}, "name": "my_sparse_with_pfe_idx", "sparse": true, "partialFilterExpression": { "rating": { "$gt": 5 } }}]}');
                                                                                                                                                                                                        retval                                                                                                                                                                                                         | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"bs.a\" : 1 }, \"name\" : \"my_sparse_with_pfe_idx\", \"sparse\" : true, \"partialFilterExpression\" : { \"rating\" : { \"$gt\" : 5 } } } :: caused by :: cannot mix \"partialFilterExpression\" and \"sparse\" options", "code" : { "$numberInt" : "33816605" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

-- sparse can create index for same key with different sparse options
SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.sparse.b": 1}, "name": "my_sparse_a_b_idx", "sparse": true}]}');
                                                                                                                retval                                                                                                                 | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "9" }, "numIndexesAfter" : { "$numberInt" : "10" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32009" } ] } }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.sparse.b": 1}, "name": "my_non_sparse_a_b_idx", "sparse": false}]}');
                                                                                                                 retval                                                                                                                 | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "10" }, "numIndexesAfter" : { "$numberInt" : "11" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32010" } ] } }
(1 row)

-- valid hash indexes
SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a": "hashed"}, "name": "my_idx_hashed"}]}');
                                                                                                                 retval                                                                                                                 | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "11" }, "numIndexesAfter" : { "$numberInt" : "12" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32011" } ] } }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a": "hashed", "b": 1 }, "name": "my_idx_hashed_compound"}]}');
                                                                                                                 retval                                                                                                                 | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "12" }, "numIndexesAfter" : { "$numberInt" : "13" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32012" } ] } }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a": 1, "b": "hashed" }, "name": "my_idx_hashed_compound_hash"}]}');
                                                                                                                 retval                                                                                                                 | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "13" }, "numIndexesAfter" : { "$numberInt" : "14" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32013" } ] } }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a$**": "hashed"}, "name": "my_idx_dollar_name_1"}]}');
                                                                                                                 retval                                                                                                                 | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "14" }, "numIndexesAfter" : { "$numberInt" : "15" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32014" } ] } }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.c$": "hashed"}, "name": "my_idx_dollar_name_2"}]}');
                                                                                                                 retval                                                                                                                 | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "15" }, "numIndexesAfter" : { "$numberInt" : "16" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32015" } ] } }
(1 row)

-- invalid hash indexes
SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"b": "hashed" }, "unique": 1, "name": "invalid_hashed"}]}');
                                                                                                                                                                            retval                                                                                                                                                                             | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"b\" : \"hashed\" }, \"unique\" : 1, \"name\" : \"invalid_hashed\" } :: caused by :: Currently hashed indexes cannot guarantee uniqueness. Use a regular index", "code" : { "$numberInt" : "319291421" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"b": "hashed", "c": "hashed" }, "name": "invalid_hashed"}]}');
                                                                                                                                                                          retval                                                                                                                                                                          | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"b\" : \"hashed\", \"c\" : \"hashed\" }, \"name\" : \"invalid_hashed\" } :: caused by :: A maximum of one index field is allowed to be hashed but found 2", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"b": "hashed", "c": 1, "d": "hashed" }, "name": "invalid_hashed"}]}');
                                                                                                                                                                               retval                                                                                                                                                                                | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"b\" : \"hashed\", \"c\" : 1, \"d\" : \"hashed\" }, \"name\" : \"invalid_hashed\" } :: caused by :: A maximum of one index field is allowed to be hashed but found 2", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"b.$**": "hashed" }, "name": "invalid_hashed"}]}');
                                                                                                                                                                    retval                                                                                                                                                                     | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"b.$**\" : \"hashed\" }, \"name\" : \"invalid_hashed\" } :: caused by :: Index key contains an illegal field name: field name starts with '$'.", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

-- can't create index on same key with same sparse options
SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.sparse.b": 1}, "name": "my_non_sparse_a_b_idx1"}]}');
                                                                                                           retval                                                                                                           | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Index already exists with a different name: my_non_sparse_a_b_idx", "code" : { "$numberInt" : "570425373" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.sparse.b": 1}, "name": "my_non_sparse_a_b_idx2", "sparse": false}]}');
                                                                                                           retval                                                                                                           | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Index already exists with a different name: my_non_sparse_a_b_idx", "code" : { "$numberInt" : "570425373" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.sparse.b": 1}, "name": "my_non_sparse_a_b_idx3", "sparse": true}]}');
                                                                                                         retval                                                                                                         | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Index already exists with a different name: my_sparse_a_b_idx", "code" : { "$numberInt" : "570425373" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

-- passing named args is also ok
SELECT * FROM documentdb_api.create_indexes_background(p_database_name=>'db', p_index_spec=>'{"createIndexes": "collection_6", "indexes": [{"key": {"c.a$**": 1}, "name": "my_idx_4"}]}');
                                                                                                                 retval                                                                                                                 | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "16" }, "numIndexesAfter" : { "$numberInt" : "17" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32016" } ] } }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background(p_index_spec=>'{"createIndexes": "collection_6", "indexes": [{"key": {"d.a$**": 1}, "name": "my_idx_5"}]}', p_database_name=>'db');
                                                                                                                 retval                                                                                                                 | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "17" }, "numIndexesAfter" : { "$numberInt" : "18" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32017" } ] } }
(1 row)

-- invalid index names
SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a": 1 }, "name": "*"}]}');
                                                                                                                                    retval                                                                                                                                    | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a\" : 1 }, \"name\" : \"*\" } :: caused by :: The index name '*' is not valid", "code" : { "$numberInt" : "16777245" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a": 1 }, "name": "name\u0000field"}]}');
                                                                                                                                                  retval                                                                                                                                                   | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a\" : 1 }, \"name\" : \"name\\u0000field\" } :: caused by :: The index name cannot contain embedded nulls", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

-- For the next test, show the commands that we internally execute to build
-- & clean-up the collection indexes.
SET client_min_messages TO DEBUG1;
-- Creating another index with the same name is not ok.
-- Note that we won't create other indexes too, even if it would be ok to create them in a separate command.
SELECT * FROM documentdb_api.create_indexes_background(
  p_database_name=>'db',
  p_index_spec=>'{
    "createIndexes": "collection_6",
    "indexes": [
      {"key": {"x.y.z": 1}, "name": "valid_index_1"},
      {"key": {"c.d.e": 1}, "name": "my_idx_5"},
      {"key": {"x.y": 1}, "name": "valid_index_2"}
    ]
  }');
DEBUG:  executing "SELECT citus_is_coordinator()" via SPI
DEBUG:  executing "SELECT documentdb_api_internal.create_indexes_background_internal('db','BSONHEXcb00000002637265617465496e6465786573000d000000636f6c6c656374696f6e5f360004696e6465786573009d00000003300032000000036b6579001000000010782e792e7a000100000000026e616d65000e00000076616c69645f696e6465785f3100000331002d000000036b6579001000000010632e642e65000100000000026e616d6500090000006d795f6964785f35000003320030000000036b6579000e00000010782e79000100000000026e616d65000e00000076616c69645f696e6465785f3200000000')" via SPI
DEBUG:  executing "SELECT index_id, index_spec, documentdb_api_internal.index_build_is_in_progress(index_id) FROM documentdb_api_catalog.collection_indexes WHERE collection_id = $1 AND (index_spec).index_name = $2 AND (index_is_valid OR documentdb_api_internal.index_build_is_in_progress(index_id))" via SPI
DEBUG:  executing "SELECT index_id, index_spec, documentdb_api_internal.index_build_is_in_progress(index_id)FROM documentdb_api_catalog.collection_indexes WHERE collection_id = $1 AND documentdb_api_internal.index_spec_options_are_equivalent(index_spec, $2) AND (index_is_valid OR documentdb_api_internal.index_build_is_in_progress(index_id))" via SPI
DEBUG:  executing "SELECT index_id, index_spec, documentdb_api_internal.index_build_is_in_progress(index_id) FROM documentdb_api_catalog.collection_indexes WHERE collection_id = $1 AND (index_spec).index_name = $2 AND (index_is_valid OR documentdb_api_internal.index_build_is_in_progress(index_id))" via SPI
                                                                                                                                                                                                                                                         retval                                                                                                                                                                                                                                                          | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "An existing index has the same name as the requested index. When index names are not specified, they are auto generated and can cause conflicts. Please refer to our documentation. Requested index: { \"v\" : 2, \"key\" : { \"c.d.e\" : 1 }, \"name\" : \"my_idx_5\" }, existing index: { \"v\" : 2, \"key\" : { \"d.a$**\" : 1 }, \"name\" : \"my_idx_5\" }", "code" : { "$numberInt" : "587202589" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

RESET client_min_messages;
--
SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.$**foo": 1}, "name": "my_idx"}]}');
                                                                                                                                               retval                                                                                                                                               | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a.$**foo\" : 1 }, \"name\" : \"my_idx\" } :: caused by :: Index key contains an illegal field name", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.$**.foo": 1}, "name": "my_idx"}]}');
                                                                                                                                               retval                                                                                                                                                | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a.$**.foo\" : 1 }, \"name\" : \"my_idx\" } :: caused by :: Index key contains an illegal field name", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"b": -1, "a.$**": 1}, "name": "my_idx"}]}');
                                                                                                                                                    retval                                                                                                                                                    | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"b\" : -1, \"a.$**\" : 1 }, \"name\" : \"my_idx\" } :: caused by :: wildcard indexes do not allow compounding", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {}, "name": "my_idx"}]}');
                                                                                                                                    retval                                                                                                                                     | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : {  }, \"name\" : \"my_idx\" } :: caused by :: Index keys cannot be an empty field", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"name": "my_idx"}]}');
                                                                                                                                          retval                                                                                                                                           | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"name\" : \"my_idx\" } :: caused by :: The 'key' field is a required property of an index specification", "code" : { "$numberInt" : "50331677" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"$**foo": 1}, "name": "my_idx_13"}]}');
                                                                                                                                                              retval                                                                                                                                                              | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"$**foo\" : 1 }, \"name\" : \"my_idx_13\" } :: caused by :: Index key contains an illegal field name: field name starts with '$'.", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"..": 1}, "name": "my_idx_12"}]}');
                                                                                                                                              retval                                                                                                                                              | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"..\" : 1 }, \"name\" : \"my_idx_12\" } :: caused by :: Index keys cannot contain an empty field.", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a..b.$**": 1}, "name": "my_idx_10"}]}');
                                                                                                                                                 retval                                                                                                                                                 | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a..b.$**\" : 1 }, \"name\" : \"my_idx_10\" } :: caused by :: Index keys cannot contain an empty field.", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a..b.foo": 1}, "name": "my_idx_11"}]}');
                                                                                                                                                 retval                                                                                                                                                 | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a..b.foo\" : 1 }, \"name\" : \"my_idx_11\" } :: caused by :: Index keys cannot contain an empty field.", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"$a": 1}, "name": "my_idx_12"}]}');
                                                                                                                                                            retval                                                                                                                                                            | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"$a\" : 1 }, \"name\" : \"my_idx_12\" } :: caused by :: Index key contains an illegal field name: field name starts with '$'.", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {".": 1}, "name": "my_idx_12"}]}');
                                                                                                                                             retval                                                                                                                                              | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \".\" : 1 }, \"name\" : \"my_idx_12\" } :: caused by :: Index keys cannot contain an empty field.", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.$b": 1}, "name": "my_idx_12"}]}');
                                                                                                                                                             retval                                                                                                                                                             | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a.$b\" : 1 }, \"name\" : \"my_idx_12\" } :: caused by :: Index key contains an illegal field name: field name starts with '$'.", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.$b.$**": 1}, "name": "my_idx_12"}]}');
                                                                                                                                                               retval                                                                                                                                                               | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a.$b.$**\" : 1 }, \"name\" : \"my_idx_12\" } :: caused by :: Index key contains an illegal field name: field name starts with '$'.", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a.": 1}, "name": "my_idx_12"}]}');
                                                                                                                                              retval                                                                                                                                              | ok | requests 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Error in specification { \"key\" : { \"a.\" : 1 }, \"name\" : \"my_idx_12\" } :: caused by :: Index keys cannot contain an empty field.", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f  | { }
(1 row)

-- valid mongo index type in specification, which are not supported yet
SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a$**": "2d"}, "name": "my_idx_2d"}]}');
                                                                                                                 retval                                                                                                                 | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "18" }, "numIndexesAfter" : { "$numberInt" : "19" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32018" } ] } }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a$**": "2dsphere"}, "name": "my_idx_2dsphere"}]}');
                                                                                                                 retval                                                                                                                 | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "19" }, "numIndexesAfter" : { "$numberInt" : "20" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32019" } ] } }
(1 row)

SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"a$**": "text"}, "name": "my_idx_text"}]}');
                                                                                                                 retval                                                                                                                 | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "20" }, "numIndexesAfter" : { "$numberInt" : "21" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32020" } ] } }
(1 row)

-- create a valid index.
SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"start_path": 1}, "name": "my_idx_14"}]}');
                                                                                                                 retval                                                                                                                 | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "21" }, "numIndexesAfter" : { "$numberInt" : "22" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32021" } ] } }
(1 row)

-- creating the same index should noop
SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"start_path": 1}, "name": "my_idx_14"}]}');
                                                                                                                                    retval                                                                                                                                    | ok |                                     requests                                     
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "22" }, "numIndexesAfter" : { "$numberInt" : "22" }, "createdCollectionAutomatically" : false, "note" : "all indexes already exist", "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32021" } ] } }
(1 row)

-- two index spec one already exists and another is new
SELECT * FROM documentdb_api.create_indexes_background('db', '{"createIndexes": "collection_6", "indexes": [{"key": {"start_path": 1}, "name": "my_idx_14"}, {"key": {"another_path": 1}, "name": "my_idx_15"}]}');
                                                                                                                                 retval                                                                                                                                  | ok |                                                   requests                                                   
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "22" }, "numIndexesAfter" : { "$numberInt" : "23" }, "createdCollectionAutomatically" : false, "note" : "index already exists", "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t  | { "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32021" }, { "$numberInt" : "32022" } ] } }
(1 row)

-- Delete all old create index requests submitted so far
DELETE from documentdb_api_catalog.documentdb_index_queue;
-- The create_indexes_background creates a remote connection via run_command_on_coordinator. Therefore, setting sequence instead of GUC.
CALL documentdb_distributed_test_helpers.create_indexes_background(
  'db',
  '{
     "createIndexes": "createIndex_background_1",
     "indexes": [
       {"key": {"a": 1}, "name": "my_idx_a"}
     ]
   }'
);
NOTICE:  creating collection
                                                                                                               retval                                                                                                                | ok 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : true, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t
(1 row)

CALL documentdb_distributed_test_helpers.create_indexes_background(
  'db',
  '{
     "createIndexes": "createIndex_background_1",
     "indexes": [
       {"key": {"b": 1}, "name": "my_idx_b"}
     ],
     "blocking": true
   }',
   p_log_index_queue => true
);
INFO:  Index Queue Commands: CREATE INDEX  documents_rum_index_32025 ON documentdb_data.documents_32001 USING documentdb_rum ( document documentdb_api_catalog.bson_rum_single_path_ops(path='b',tl=2699)) 
                                                                                                                retval                                                                                                                | ok 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "2" }, "numIndexesAfter" : { "$numberInt" : "3" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t
(1 row)

-- Queue should be empty
SELECT index_cmd, cmd_type, index_id, index_cmd_status, collection_id, attempt, user_oid FROM documentdb_api_catalog.documentdb_index_queue ORDER BY index_id;
 index_cmd | cmd_type | index_id | index_cmd_status | collection_id | attempt | user_oid 
---------------------------------------------------------------------
(0 rows)

SELECT * FROM documentdb_distributed_test_helpers.count_collection_indexes('db', 'createIndex_background_1') ORDER BY 1,2;
 index_type_is_primary | index_type_count 
---------------------------------------------------------------------
 f                     |                2
 t                     |                1
(2 rows)

-- Show that we didn't leave any invalid pg indexes behind
SELECT indexrelid::regclass, indisvalid, indisready
FROM documentdb_distributed_test_helpers.get_data_table_indexes('db', 'createIndex_background_1')
ORDER BY indexrelid;
                indexrelid                 | indisvalid | indisready 
---------------------------------------------------------------------
 documentdb_data.collection_pk_32001       | t          | t
 documentdb_data.documents_rum_index_32024 | t          | t
 documentdb_data.documents_rum_index_32025 | t          | t
(3 rows)

CALL documentdb_distributed_test_helpers.create_indexes_background(
  'db',
  '{
     "createIndexes": "createIndex_background_1",
     "indexes": [
       {"key": {"c": 1}, "name": "my_idx_c"},
       {"key": {"d": 1}, "name": "my_idx_d"}
     ]
   }',
   p_log_index_queue => true
);
INFO:  Index Queue Commands: CREATE INDEX CONCURRENTLY documents_rum_index_32026 ON documentdb_data.documents_32001 USING documentdb_rum ( document documentdb_api_catalog.bson_rum_single_path_ops(path='c',tl=2699)) ,CREATE INDEX CONCURRENTLY documents_rum_index_32027 ON documentdb_data.documents_32001 USING documentdb_rum ( document documentdb_api_catalog.bson_rum_single_path_ops(path='d',tl=2699)) 
                                                                                                                retval                                                                                                                | ok 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "3" }, "numIndexesAfter" : { "$numberInt" : "5" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t
(1 row)

-- Index request submission will fail
CALL documentdb_distributed_test_helpers.create_indexes_background(
  'db',
  '{
     "createIndexes": "createIndex_background_1",
     "indexes": [
       {"key": {"c": 1}, "name": "my_idx_c", "unique": true}
     ]
   }'
);
                                                                                                                                                                                                                                                              retval                                                                                                                                                                                                                                                               | ok 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "An existing index has the same name as the requested index. When index names are not specified, they are auto generated and can cause conflicts. Please refer to our documentation. Requested index: { \"v\" : 2, \"key\" : { \"c\" : 1 }, \"name\" : \"my_idx_c\", \"unique\" : true }, existing index: { \"v\" : 2, \"key\" : { \"c\" : 1 }, \"name\" : \"my_idx_c\" }", "code" : { "$numberInt" : "587202589" } } }, "ok" : { "$numberInt" : "0" } } | f
(1 row)

SELECT * FROM documentdb_distributed_test_helpers.count_collection_indexes('db', 'createIndex_background_1') ORDER BY 1,2;
 index_type_is_primary | index_type_count 
---------------------------------------------------------------------
 f                     |                4
 t                     |                1
(2 rows)

-- Test unique and non-unique index creation in same request
------ check the intermediate response
SELECT documentdb_api_internal.create_indexes_background_internal(
  'db',
  '{
     "createIndexes": "intermediate",
     "indexes": [
       {"key": {"a": 1}, "name": "my_idx_a", "unique": true},
       {"key": {"b": 1}, "name": "my_idx_b" }
     ]
   }'
);
NOTICE:  creating collection
                                                                                                                                                      create_indexes_background_internal                                                                                                                                                       
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "3" }, "createdCollectionAutomatically" : true, "ok" : { "$numberInt" : "1" } } }, "indexRequest" : { "cmdType" : "C", "ids" : [ { "$numberInt" : "32029" }, { "$numberInt" : "32030" } ] }, "ok" : { "$numberInt" : "1" } }
(1 row)

--- sleep for 2 seconds, so above request is processed by cron-job
SELECT pg_sleep(2);
 pg_sleep 
---------------------------------------------------------------------
 
(1 row)

------ check the end-to-end success flow
SELECT documentdb_api.insert_one('db','mycol', '{"_id": 1, "a" : 80, "b" : 10 }', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','mycol', '{"_id": 2, "a" : 90, "b" : 20 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

CALL documentdb_distributed_test_helpers.create_indexes_background(
  'db',
  '{
     "createIndexes": "mycol",
     "indexes": [
       {"key": {"a": 1}, "name": "my_idx_a", "unique": true},
       {"key": {"b": 1}, "name": "my_idx_b" }
     ]
   }'
);
                                                                                                                retval                                                                                                                | ok 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "3" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t
(1 row)

SELECT * FROM documentdb_distributed_test_helpers.count_collection_indexes('db', 'mycol') ORDER BY 1,2;
 index_type_is_primary | index_type_count 
---------------------------------------------------------------------
 f                     |                2
 t                     |                1
(2 rows)

-- Test constraint violation for unique index, insert duplicate docs
SELECT documentdb_api.insert_one('db','constraint', '{"_id": 1, "a" : 80 }', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','constraint', '{"_id": 2, "a" : 80 }', NULL);
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

CALL documentdb_distributed_test_helpers.create_indexes_background(
  'db',
  '{
     "createIndexes": "constraint",
     "indexes": [
       {"key": {"a": 1}, "name": "my_idx_a", "unique": true}
     ]
   }'
);
                                                                                                             retval                                                                                                             | ok 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Duplicate key violation on the requested collection: Index 'my_idx_a'", "code" : { "$numberInt" : "319029277" } } }, "ok" : { "$numberInt" : "0" } } | f
(1 row)

-- try multiple such requests which are going to fail
CALL documentdb_distributed_test_helpers.create_indexes_background(
  'db',
  '{
     "createIndexes": "constraint",
     "indexes": [
       {"key": {"a": 1}, "name": "my_idx_a", "unique": true}
     ]
   }'
);
                                                                                                             retval                                                                                                             | ok 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Duplicate key violation on the requested collection: Index 'my_idx_a'", "code" : { "$numberInt" : "319029277" } } }, "ok" : { "$numberInt" : "0" } } | f
(1 row)

-- try multiple such requests which are going to fail
CALL documentdb_distributed_test_helpers.create_indexes_background(
  'db',
  '{
     "createIndexes": "constraint",
     "indexes": [
       {"key": {"a": 1}, "name": "my_idx_a", "unique": true}
     ]
   }'
);
                                                                                                             retval                                                                                                             | ok 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Duplicate key violation on the requested collection: Index 'my_idx_a'", "code" : { "$numberInt" : "319029277" } } }, "ok" : { "$numberInt" : "0" } } | f
(1 row)

-- test skippable error test
-- todo: add this test back when pgvector version upgrade is done.
-- CALL documentdb_distributed_test_helpers.create_indexes_background('db', '{ "createIndexes": "ValidateVectorSearchAsync", "indexes": [ { "name": "largeVectorIndex", "key": { "largevector": "cosmosSearch"}, "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 100, "similarity": "COS", "dimensions": 2001 } } ] }');
-- CALL documentdb_distributed_test_helpers.create_indexes_background('db', '{ "createIndexes": "ValidateVectorSearchAsync", "indexes": [ { "name": "largeVectorIndex", "key": { "largevector": "cosmosSearch"}, "cosmosSearchOptions": { "kind": "vector-hnsw", "similarity": "COS", "dimensions": 2001 } } ] }');
-- test another skippable error
SELECT documentdb_api.insert_one('db','LargeKeySize', '{"_id": 1, "a" : [ "p86PXqGpykgF4prF9X0ouGVG7mkRGg9ZyXZwt25L49trG5IQXgrHdkR01ZKSBlZv8SH04XUych6c0HNvS6Dn17Rx3JgKYMFqxSTyhRZLdlmMgxCMBE7wYDrvtfCPRgeDPGOR4FTVP0521ulBAnAdoxub6WndMqLhGZKymTmmjdCJ28ka0fnN47BeMPy9jqllCfuWh6MUg4bSRrvkopOHgkXx0Jdg7KwLsvfozsoVzKVI1BYlV6ruz1QipKZTRgAJVUYEzG9qA28ZBFu6ZLN0vzeXpPlxNbPu4pwLcPISxCNmgIeDm397Bs9krq0OCqhqhVJzYaLLmcTipuqi0mmPYNBF5RYfiEWeLmarJzW4oirL1s6d8EMGqvlRW5M6GY5OCUo5BfvADGpa8VQ3dGF1GKs05U7IWax6am9TOuq6hXWuhw3r8pmv0OvhqNmh0Wm9rAoK2zEHnuwoUqh57McwWx5gvouiZQdgDrRlU0IAvv4wpPwtgoAZpNje9ZPNywbrdYkKdy3CPGDf4bhreNvnOVx2aIfY3ZlQCL8RWXjIN1HWhb8nRTZuaqJVDh8lnB8kessHCrS0tTLEcnjZIRVPXge5F3AD2x4PYrP1jthursnY6XqqzZVvN2PEia9AXyqvAi8447AONDn27AqUEDRCVBg8l4DzbZ7O2OUOyG3nBE78xDdQMbpkhmPF0MPiihgZtcPLxB4E36I5Kr1g0ecmX6XsFN2FFDDHg0R8oi120fnm33UWWwpfM13czkJKzkGucSDv0NO0nrmd0yxlTwLCwYg3IOP62pyUFfZNj755sbXigEajKcypSgNdCcVJ8fak9xhe575FmcA1LSr8qOKKCyy3bZdyFKuwDtAtCOrlp2Ay5qtqIJhovZp3ek6U1ZKlLAXPf5Xk661XHOLuFNExn7vyMxeFKb9v2EWmdrO622ylfc0xnGnOc2yT7lAE7w1x4AGxBdgjI3q052o4gWfALRDjbhEK39sM2rpTIwMrvsSo35rsv5p9mQ2zQCL1OUBHQHmDFEzfH7zanSgISWGYjdbpGoyo3JxhcypqUxx7jB4DIe20i3fGbdpFOKVirFjZ4LyfaDgGWGaW6eD7XyAigTuajLe5NpXBJOAQr31C8YYl1XlWZSBv8jdOjpLE8BixgHsXTldxzh7QxPQH2eKO74FeDySOZCNlsHENbQHbwfQJRxz33oHpr0dsNRn2AYCP6mOFJ8G9AASMx6jSP5j2ZRZGFb6GKhG2FyiIklRTPvtu14aMPTgD0tPBlXEWwi6IuynzrXXzOY3BodDRk2EwkruuuuEwCuSd82HJDuChSWf2A9duqv9J0UrbYuXN9NWOVypBq4tlY6joGUPe509Z4EQEKAmFIUV0GBQixzt1tPVgBs9esNvNFSftzKgYBS4FJe489UWwaX3njm5uQYW7wFJuqcI4A0MrfOYJSgJwzvtfaKwu95yAtjW7QgLPG355RkKsjZDLZdjuNvjN17yYC0xchIaBGaK6cIGDjRV2mnmKHaaLRrEwjKqS1F1FCH19JnXSB1OoDdcoEYAbQwK2Kd0KWKh6tslohWoPWvFlOXBzZOEnPNENpU8xxD8mHxYDr8siiaknwRMvqf4yP2Oe4v7GFwOrMmR6UJknUu7xp2HvsjqceO5g7nkuUyiec4lk1sPraMygpBAboLCB3S4qSfNqtfJj0vwZVXmmK3lJyrh2dgJ7botypjDE1ENq6vovXKtZ7OYfE81V2ic5qnSKakbwmsiS3uywVjuvFtDBwgZQBhEMqcG6txa9qNINGA5Xbt1xnhJbFuxaykJpBTGtYAem00AX5ZRTVPy57WRue1aIvopDx92yL2Lw3eWSebATumO91PYlVDUhHzaQ232MS2hrHbKZYWguCb9UU3Wrsu9f5dybJDhJhE7jOnDb4hYJvdxQH8Ni7cELn4bf0AxXTQ74RJM2ZiPCAG8CYtpDcaHnU4BEfs5stjBOX1rWgQihsz5fbCEZOcDYJ5om5Gwk3R12Q49Ly3IARzsVTZnswxfpOfq6bIY9oKLpYanNDaf9ZhZEaa2MwOA9Ruiy4RmquYoJ92gBxS1l1FC8jYlCEfvSAkylhSA54TsWVVIwsOZd6Hj3RQQZtQcJEIMIHPxdTNUx1sSMCItVbTikTw8gviNtI1UM6VOJxiqBsdOmfy8WbfP7djRbRUBwCnCFoaEIFrAQfebevG6hxQ6MbeVP17ythvVUlDSJL2Bn7KmwNBj7Aido8RmBUPXuTxZzMpuLjn1q0Wm4FMz232XddybeBnELMMDkEWUqPL94xo1AdfhtXQ2WhpIJKHsSqj6vv51PnmfzmHZaqXkWIY6WhCf7SsBMojqBUEEI3VYKxcQ5IBzvX284CrH5x2M6AoGpANFp036l6cor9VBVYHyXODCBO1ACMDe9YENwatNgWhpiu2W6Ao1jE5vs00Vk9j4gY9NFPNrjpw5gFgRdinELZAyd2akBSoYdXxBt9NtfVJEYl2OiblplIOgB7fi4HEho4JtNhmyS3P3BdlQkRAciVHfHKAOdi2dBZxxVFJjqBuVW4Svv6XJuYYLPMJiPGrgV3rvlzlUdUAn0LKsga4BEn4cPoRnRPPYgj7L5bkqMxonzRiCBkMU4HTYBTrVfNqu7zHLcMQwc9lIEHYHDN2JyqEr0emG5B8NMqDJFwUHIILvA5pUuZQT5PV87QpLs8n24vV5YHqFDFm7KlGxan3Hdy5Zw4PaQsROlwIxFGFuHUXi6B4nn8KYZlULfAQ7stk4DDukrPmOXlbbDOhNHu2pXqejS12MTOYZ3" ] }');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

CALL documentdb_distributed_test_helpers.create_indexes_background('db', '{ "createIndexes": "LargeKeySize", "indexes": [ { "key" : { "a": 1 }, "name": "rumConstraint1"}] }');
                                                                                                                retval                                                                                                                | ok 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } } | t
(1 row)

CALL documentdb_distributed_test_helpers.create_indexes_background('db', '{ "createIndexes": "UnsupportedLanguage", "indexes": [ { "key": { "$**": "text" }, "name": "idx1", "default_language": "ok" } ] }');
NOTICE:  creating collection
                                                                                                     retval                                                                                                     | ok 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "unsupported language: \"ok\" for text index version 3", "code" : { "$numberInt" : "503316509" } } }, "ok" : { "$numberInt" : "0" } } | f
(1 row)

--Reset -- so that other tests do not get impacted
SELECT change_index_jobs_schema.change_index_jobs_status(false);
NOTICE:  Processing job_id: 2
NOTICE:  Processing job_id: 3
 change_index_jobs_status 
---------------------------------------------------------------------
 
(1 row)

-- test CheckForIndexCmdToFinish
DELETE FROM documentdb_api_catalog.documentdb_index_queue;
-- add dummy entries
INSERT INTO documentdb_api_catalog.documentdb_index_queue (index_cmd, cmd_type, index_id, index_cmd_status, collection_id, comment) 
VALUES ('CREATE INDEX CONCURRENTLY', 'C', 32101, 3, 32000, '{"err_msg" : "deadlock detected", "err_code" : { "$numberInt" : "16908292" }}');
INSERT INTO documentdb_api_catalog.documentdb_index_queue (index_cmd, cmd_type, index_id, index_cmd_status, global_pid, collection_id) 
VALUES ('CREATE INDEX CONCURRENTLY', 'C', 32105, 2, 10015415, 32000);
INSERT INTO documentdb_api_catalog.documentdb_index_queue (index_cmd, cmd_type, index_id, index_cmd_status, collection_id) 
VALUES ('CREATE INDEX CONCURRENTLY', 'R', 32105, 2, 32000);
-- this should return finish : 1, ok : 0 and error message due to index_id 32101
SELECT * FROM documentdb_api_internal.check_build_index_status('{"indexRequest" : {"cmdType" : "C", "ids" :[32101,32102,32103,32104,32105,32106]}}');
                                                                                                                                                      retval                                                                                                                                                       | ok | complete 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "deadlock detected. createIndexes() command might cause deadlock when there is a concurrent operation that require exclusive access on the same collection", "code" : { "$numberInt" : "16908292" } } }, "ok" : { "$numberInt" : "0" } } | f  | t
(1 row)

DELETE FROM documentdb_api_catalog.documentdb_index_queue;
-- test failure but no comment.
INSERT INTO documentdb_api_catalog.documentdb_index_queue (index_cmd, cmd_type, index_id, index_cmd_status, collection_id) 
VALUES ('CREATE INDEX CONCURRENTLY', 'C', 32102, 3, 32000);
INSERT INTO documentdb_api_catalog.documentdb_index_queue (index_cmd, cmd_type, index_id, index_cmd_status, collection_id) 
VALUES ('CREATE INDEX CONCURRENTLY', 'C', 32103, 4, 32000);
INSERT INTO documentdb_api_catalog.documentdb_index_queue (index_cmd, cmd_type, index_id, index_cmd_status, collection_id) 
VALUES ('CREATE INDEX CONCURRENTLY', 'C', 32104, 4, 32000);
-- this should return finish : 1, ok : 0 and error message due to empty comment of failed request
SELECT * FROM documentdb_api_internal.check_build_index_status('{"indexRequest" : {"cmdType" : "C", "ids" :[32101,32102,32103,32104,32105,32106]}}');
                                                                                 retval                                                                                  | ok | complete 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Index Creation failed", "code" : { "$numberInt" : "29" } } }, "ok" : { "$numberInt" : "0" } } | f  | t
(1 row)

DELETE FROM documentdb_api_catalog.documentdb_index_queue;
-- test with failed global_pid, attempt is still 1
INSERT INTO documentdb_api_catalog.documentdb_index_queue (index_cmd, cmd_type, index_id, index_cmd_status, global_pid, collection_id) 
VALUES ('CREATE INDEX CONCURRENTLY', 'C', 32105, 2, 10015415, 32000);
-- this should return finish : 0, ok : 1, it should wait for cron job to pick request again for index_id 32005 and mark attempt = 2
SELECT * FROM documentdb_api_internal.check_build_index_status('{"indexRequest" : {"cmdType" : "C", "ids" :[32101,32102,32103,32104,32105,32106]}}');
              retval               | ok | complete 
---------------------------------------------------------------------
 { "ok" : { "$numberInt" : "1" } } | t  | f
(1 row)

DELETE FROM documentdb_api_catalog.documentdb_index_queue;
-- test with attempt > 1
INSERT INTO documentdb_api_catalog.documentdb_index_queue (index_cmd, cmd_type, index_id, index_cmd_status, collection_id, attempt) 
VALUES ('CREATE INDEX CONCURRENTLY', 'C', 32105, 2, 32000, 2);
-- this should return finish : 1, ok : 0 and error message due to one attempt is failed "Index creation attempt failed"
SELECT * FROM documentdb_api_internal.check_build_index_status('{"indexRequest" : {"cmdType" : "C", "ids" :[32101,32102,32103,32104,32105,32106]}}');
                                                                                     retval                                                                                      | ok | complete 
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "ok" : { "$numberInt" : "0" }, "errmsg" : "Index creation attempt failed", "code" : { "$numberInt" : "29" } } }, "ok" : { "$numberInt" : "0" } } | f  | t
(1 row)

DELETE FROM documentdb_api_catalog.documentdb_index_queue;
SELECT * FROM documentdb_api_internal.check_build_index_status('{"indexRequest" : {"cmdType" : "C", "ids" :[32101]}}');
              retval               | ok | complete 
---------------------------------------------------------------------
 { "ok" : { "$numberInt" : "1" } } | t  | t
(1 row)

BEGIN;
-- test config update, documentdb_api_internal.schedule_background_index_build_workers reads default guc values
SELECT FROM documentdb_api_internal.schedule_background_index_build_workers();
--
(1 row)

SELECT schedule, jobname FROM cron.job WHERE jobname LIKE 'documentdb_index_build_task_%' ORDER BY jobId;
 schedule  |            jobname            
---------------------------------------------------------------------
 2 seconds | documentdb_index_build_task_1
 2 seconds | documentdb_index_build_task_2
(2 rows)

SELECT FROM documentdb_api_internal.schedule_background_index_build_workers(1);
--
(1 row)

SELECT schedule, jobname FROM cron.job WHERE jobname LIKE 'documentdb_index_build_task_%' ORDER BY jobId;
 schedule  |            jobname            
---------------------------------------------------------------------
 2 seconds | documentdb_index_build_task_1
(1 row)

SELECT FROM documentdb_api_internal.schedule_background_index_build_workers(1, 3);
--
(1 row)

SELECT schedule, jobname FROM cron.job WHERE jobname LIKE 'documentdb_index_build_task_%' ORDER BY jobId;
 schedule  |            jobname            
---------------------------------------------------------------------
 3 seconds | documentdb_index_build_task_1
(1 row)

ROLLBACK;
SELECT schedule, jobname FROM cron.job WHERE jobname LIKE 'documentdb_index_build_task_%' ORDER BY jobId;
 schedule  |            jobname            
---------------------------------------------------------------------
 2 seconds | documentdb_index_build_task_1
 2 seconds | documentdb_index_build_task_2
(2 rows)

