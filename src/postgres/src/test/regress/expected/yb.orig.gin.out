--
-- Yugabyte-owned test for gin access method.
--
-- Disable sequential scan so that bitmap index scan is always chosen.
SET enable_seqscan = off;
SET enable_bitmapscan = on;
--
-- Create temp tables because gin access method is only supported on temporary
-- tables.
--
CREATE TEMP TABLE vectors (i serial PRIMARY KEY, v tsvector);
CREATE TEMP TABLE arrays (i serial PRIMARY KEY, a int[]);
CREATE TEMP TABLE jsonbs (i serial PRIMARY KEY, j jsonb);
CREATE TEMP TABLE multi (v tsvector, a1 text[], a2 float[], j1 jsonb, j2 jsonb);
CREATE TEMP TABLE expression (v tsvector, a text[], j jsonb);
CREATE TEMP TABLE partial (v tsvector, a text[], j jsonb);
--
-- tsvector
--
INSERT INTO vectors (v) VALUES
    (to_tsvector('simple', 'a bb ccc')),
    (to_tsvector('simple', 'bb a e i o u')),
    (to_tsvector('simple', 'ccd'));
CREATE INDEX ON vectors USING gin (v); -- test ambuild
INSERT INTO vectors (v) VALUES
    (to_tsvector('simple', 'a a a a a a')),
    (to_tsvector('simple', 'cc')); -- test aminsert
-- test amgetbitmap
EXPLAIN (costs off) SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'a');
                 QUERY PLAN
---------------------------------------------
 Bitmap Heap Scan on vectors
   Recheck Cond: (v @@ '''a'''::tsquery)
   ->  Bitmap Index Scan on vectors_v_idx
         Index Cond: (v @@ '''a'''::tsquery)
(4 rows)

SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'a');
 i |                  v
---+--------------------------------------
 1 | 'a':1 'bb':2 'ccc':3
 2 | 'a':2 'bb':1 'e':3 'i':4 'o':5 'u':6
 4 | 'a':1,2,3,4,5,6
(3 rows)

EXPLAIN (costs off) SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'a & e');
                     QUERY PLAN
-----------------------------------------------------
 Bitmap Heap Scan on vectors
   Recheck Cond: (v @@ '''a'' & ''e'''::tsquery)
   ->  Bitmap Index Scan on vectors_v_idx
         Index Cond: (v @@ '''a'' & ''e'''::tsquery)
(4 rows)

SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'a & e');
 i |                  v
---+--------------------------------------
 2 | 'a':2 'bb':1 'e':3 'i':4 'o':5 'u':6
(1 row)

EXPLAIN (costs off) SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'bb | cc');
                      QUERY PLAN
-------------------------------------------------------
 Bitmap Heap Scan on vectors
   Recheck Cond: (v @@ '''bb'' | ''cc'''::tsquery)
   ->  Bitmap Index Scan on vectors_v_idx
         Index Cond: (v @@ '''bb'' | ''cc'''::tsquery)
(4 rows)

SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'bb | cc');
 i |                  v
---+--------------------------------------
 1 | 'a':1 'bb':2 'ccc':3
 2 | 'a':2 'bb':1 'e':3 'i':4 'o':5 'u':6
 5 | 'cc':1
(3 rows)

EXPLAIN (costs off) SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'bb & !ccc');
                       QUERY PLAN
---------------------------------------------------------
 Bitmap Heap Scan on vectors
   Recheck Cond: (v @@ '''bb'' & !''ccc'''::tsquery)
   ->  Bitmap Index Scan on vectors_v_idx
         Index Cond: (v @@ '''bb'' & !''ccc'''::tsquery)
(4 rows)

SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'bb & !ccc');
 i |                  v
---+--------------------------------------
 2 | 'a':2 'bb':1 'e':3 'i':4 'o':5 'u':6
(1 row)

EXPLAIN (costs off) SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'cc:*');
                   QUERY PLAN
------------------------------------------------
 Bitmap Heap Scan on vectors
   Recheck Cond: (v @@ '''cc'':*'::tsquery)
   ->  Bitmap Index Scan on vectors_v_idx
         Index Cond: (v @@ '''cc'':*'::tsquery)
(4 rows)

SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'cc:*');
 i |          v
---+----------------------
 1 | 'a':1 'bb':2 'ccc':3
 3 | 'ccd':1
 5 | 'cc':1
(3 rows)

EXPLAIN (costs off) SELECT count(*) FROM vectors WHERE v @@ to_tsquery('simple', 'a');
                    QUERY PLAN
---------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on vectors
         Recheck Cond: (v @@ '''a'''::tsquery)
         ->  Bitmap Index Scan on vectors_v_idx
               Index Cond: (v @@ '''a'''::tsquery)
(5 rows)

SELECT count(*) FROM vectors WHERE v @@ to_tsquery('simple', 'a');
 count
-------
     3
(1 row)

--
-- array
--
INSERT INTO arrays (a) VALUES
    ('{1, 3, 5}'),
    (ARRAY[2, 3, 5]),
    ('{7, 1, 6, 4}');
CREATE INDEX ON arrays USING gin (a); -- test ambuild
INSERT INTO arrays (a) VALUES
    ('{3}'),
    ('{3, 3, 3}'),
    ('{10, 20, 30}'); -- test aminsert
-- test amgetbitmap
EXPLAIN (costs off) SELECT * FROM arrays WHERE a && '{1, 100, 3}';
                    QUERY PLAN
---------------------------------------------------
 Bitmap Heap Scan on arrays
   Recheck Cond: (a && '{1,100,3}'::integer[])
   ->  Bitmap Index Scan on arrays_a_idx
         Index Cond: (a && '{1,100,3}'::integer[])
(4 rows)

SELECT * FROM arrays WHERE a && '{1, 100, 3}';
 i |     a
---+-----------
 1 | {1,3,5}
 2 | {2,3,5}
 3 | {7,1,6,4}
 4 | {3}
 5 | {3,3,3}
(5 rows)

EXPLAIN (costs off) SELECT * FROM arrays WHERE a @> '{5, 3}';
                  QUERY PLAN
-----------------------------------------------
 Bitmap Heap Scan on arrays
   Recheck Cond: (a @> '{5,3}'::integer[])
   ->  Bitmap Index Scan on arrays_a_idx
         Index Cond: (a @> '{5,3}'::integer[])
(4 rows)

SELECT * FROM arrays WHERE a @> '{5, 3}';
 i |    a
---+---------
 1 | {1,3,5}
 2 | {2,3,5}
(2 rows)

EXPLAIN (costs off) SELECT * FROM arrays WHERE a <@ '{5, 4, 3, 2}';
                    QUERY PLAN
---------------------------------------------------
 Bitmap Heap Scan on arrays
   Recheck Cond: (a <@ '{5,4,3,2}'::integer[])
   ->  Bitmap Index Scan on arrays_a_idx
         Index Cond: (a <@ '{5,4,3,2}'::integer[])
(4 rows)

SELECT * FROM arrays WHERE a <@ '{5, 4, 3, 2}';
 i |    a
---+---------
 2 | {2,3,5}
 4 | {3}
 5 | {3,3,3}
(3 rows)

EXPLAIN (costs off) SELECT * FROM arrays WHERE a = '{3}';
                 QUERY PLAN
--------------------------------------------
 Bitmap Heap Scan on arrays
   Recheck Cond: (a = '{3}'::integer[])
   ->  Bitmap Index Scan on arrays_a_idx
         Index Cond: (a = '{3}'::integer[])
(4 rows)

SELECT * FROM arrays WHERE a = '{3}';
 i |  a
---+-----
 4 | {3}
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM arrays WHERE a = '{3}';
                    QUERY PLAN
--------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on arrays
         Recheck Cond: (a = '{3}'::integer[])
         ->  Bitmap Index Scan on arrays_a_idx
               Index Cond: (a = '{3}'::integer[])
(5 rows)

SELECT count(*) FROM arrays WHERE a = '{3}';
 count
-------
     1
(1 row)

--
-- jsonb
--
INSERT INTO jsonbs (j) VALUES
    ('{"aaa":[1,2.00,3]}'),
    ('{"ggg":"aaa"}'),
    ('["bbb", "aaa"]');
CREATE INDEX ON jsonbs USING gin (j); -- test ambuild
INSERT INTO jsonbs (j) VALUES
    ('"aaa"'),
    ('3.0'),
    ('{"aaa":{"bbb":[2,4], "ccc":{"ddd":6}}, "eee":8}'); -- test aminsert
-- test amgetbitmap
EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j ? 'aaa';
               QUERY PLAN
-----------------------------------------
 Bitmap Heap Scan on jsonbs
   Recheck Cond: (j ? 'aaa'::text)
   ->  Bitmap Index Scan on jsonbs_j_idx
         Index Cond: (j ? 'aaa'::text)
(4 rows)

SELECT * FROM jsonbs WHERE j ? 'aaa';
 i |                           j
---+-------------------------------------------------------
 1 | {"aaa": [1, 2.00, 3]}
 3 | ["bbb", "aaa"]
 4 | "aaa"
 6 | {"aaa": {"bbb": [2, 4], "ccc": {"ddd": 6}}, "eee": 8}
(4 rows)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j ?| '{"ggg", "eee"}';
                   QUERY PLAN
------------------------------------------------
 Bitmap Heap Scan on jsonbs
   Recheck Cond: (j ?| '{ggg,eee}'::text[])
   ->  Bitmap Index Scan on jsonbs_j_idx
         Index Cond: (j ?| '{ggg,eee}'::text[])
(4 rows)

SELECT * FROM jsonbs WHERE j ?| '{"ggg", "eee"}';
 i |                           j
---+-------------------------------------------------------
 2 | {"ggg": "aaa"}
 6 | {"aaa": {"bbb": [2, 4], "ccc": {"ddd": 6}}, "eee": 8}
(2 rows)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j ?& '{"aaa", "eee"}';
                   QUERY PLAN
------------------------------------------------
 Bitmap Heap Scan on jsonbs
   Recheck Cond: (j ?& '{aaa,eee}'::text[])
   ->  Bitmap Index Scan on jsonbs_j_idx
         Index Cond: (j ?& '{aaa,eee}'::text[])
(4 rows)

SELECT * FROM jsonbs WHERE j ?& '{"aaa", "eee"}';
 i |                           j
---+-------------------------------------------------------
 6 | {"aaa": {"bbb": [2, 4], "ccc": {"ddd": 6}}, "eee": 8}
(1 row)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j @> '{"bbb":[4]}';
                    QUERY PLAN
--------------------------------------------------
 Bitmap Heap Scan on jsonbs
   Recheck Cond: (j @> '{"bbb": [4]}'::jsonb)
   ->  Bitmap Index Scan on jsonbs_j_idx
         Index Cond: (j @> '{"bbb": [4]}'::jsonb)
(4 rows)

SELECT * FROM jsonbs WHERE j @> '{"bbb":[4]}';
 i | j
---+---
(0 rows)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j @> '{"aaa":{"bbb":[4]}}';
                        QUERY PLAN
-----------------------------------------------------------
 Bitmap Heap Scan on jsonbs
   Recheck Cond: (j @> '{"aaa": {"bbb": [4]}}'::jsonb)
   ->  Bitmap Index Scan on jsonbs_j_idx
         Index Cond: (j @> '{"aaa": {"bbb": [4]}}'::jsonb)
(4 rows)

SELECT * FROM jsonbs WHERE j @> '{"aaa":{"bbb":[4]}}';
 i |                           j
---+-------------------------------------------------------
 6 | {"aaa": {"bbb": [2, 4], "ccc": {"ddd": 6}}, "eee": 8}
(1 row)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j @? '$.aaa[*] ? (@ == 2)';
                         QUERY PLAN
------------------------------------------------------------
 Bitmap Heap Scan on jsonbs
   Recheck Cond: (j @? '$."aaa"[*]?(@ == 2)'::jsonpath)
   ->  Bitmap Index Scan on jsonbs_j_idx
         Index Cond: (j @? '$."aaa"[*]?(@ == 2)'::jsonpath)
(4 rows)

SELECT * FROM jsonbs WHERE j @? '$.aaa[*] ? (@ == 2)';
 i |           j
---+-----------------------
 1 | {"aaa": [1, 2.00, 3]}
(1 row)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j @@ '$.ggg starts with "aa"';
                            QUERY PLAN
-------------------------------------------------------------------
 Bitmap Heap Scan on jsonbs
   Recheck Cond: (j @@ '($."ggg" starts with "aa")'::jsonpath)
   ->  Bitmap Index Scan on jsonbs_j_idx
         Index Cond: (j @@ '($."ggg" starts with "aa")'::jsonpath)
(4 rows)

SELECT * FROM jsonbs WHERE j @@ '$.ggg starts with "aa"';
 i |       j
---+----------------
 2 | {"ggg": "aaa"}
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM jsonbs WHERE j ? 'aaa';
                  QUERY PLAN
-----------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on jsonbs
         Recheck Cond: (j ? 'aaa'::text)
         ->  Bitmap Index Scan on jsonbs_j_idx
               Index Cond: (j ? 'aaa'::text)
(5 rows)

SELECT count(*) FROM jsonbs WHERE j ? 'aaa';
 count
-------
     4
(1 row)

--
-- jsonb_path
--
DROP INDEX jsonbs_j_idx;
CREATE INDEX ON jsonbs USING gin (j jsonb_path_ops); -- test ambuild
INSERT INTO jsonbs (j) VALUES
    ('{"aaa":{"bbb":[2], "ccc":{"ddd":6}}, "eee":[]}'); -- test aminsert
EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j ? 'aaa';
         QUERY PLAN
-----------------------------
 Seq Scan on jsonbs
   Filter: (j ? 'aaa'::text)
(2 rows)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j ?| '{"ggg", "eee"}';
              QUERY PLAN
--------------------------------------
 Seq Scan on jsonbs
   Filter: (j ?| '{ggg,eee}'::text[])
(2 rows)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j ?& '{"aaa", "eee"}';
              QUERY PLAN
--------------------------------------
 Seq Scan on jsonbs
   Filter: (j ?& '{aaa,eee}'::text[])
(2 rows)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j @> '{"aaa":{"bbb":[4]}}';
                        QUERY PLAN
-----------------------------------------------------------
 Bitmap Heap Scan on jsonbs
   Recheck Cond: (j @> '{"aaa": {"bbb": [4]}}'::jsonb)
   ->  Bitmap Index Scan on jsonbs_j_idx
         Index Cond: (j @> '{"aaa": {"bbb": [4]}}'::jsonb)
(4 rows)

SELECT * FROM jsonbs WHERE j @> '{"aaa":{"bbb":[4]}}';
 i |                           j
---+-------------------------------------------------------
 6 | {"aaa": {"bbb": [2, 4], "ccc": {"ddd": 6}}, "eee": 8}
(1 row)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j @? '$.aaa[*] ? (@ == 2)';
                         QUERY PLAN
------------------------------------------------------------
 Bitmap Heap Scan on jsonbs
   Recheck Cond: (j @? '$."aaa"[*]?(@ == 2)'::jsonpath)
   ->  Bitmap Index Scan on jsonbs_j_idx
         Index Cond: (j @? '$."aaa"[*]?(@ == 2)'::jsonpath)
(4 rows)

SELECT * FROM jsonbs WHERE j @? '$.aaa[*] ? (@ == 2)';
 i |           j
---+-----------------------
 1 | {"aaa": [1, 2.00, 3]}
(1 row)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j @@ '$.ggg starts with "aa"';
                            QUERY PLAN
-------------------------------------------------------------------
 Bitmap Heap Scan on jsonbs
   Recheck Cond: (j @@ '($."ggg" starts with "aa")'::jsonpath)
   ->  Bitmap Index Scan on jsonbs_j_idx
         Index Cond: (j @@ '($."ggg" starts with "aa")'::jsonpath)
(4 rows)

SELECT * FROM jsonbs WHERE j @@ '$.ggg starts with "aa"';
 i |       j
---+----------------
 2 | {"ggg": "aaa"}
(1 row)

--
-- Multicolumn
--
INSERT INTO multi VALUES
    (to_tsvector('simple', 'a b'), ARRAY['c', 'd'], ARRAY[5.0, 6.1], '{"f":3}',
     '{"r":[3,6.5]}'),
    (to_tsvector('simple', '0'), ARRAY['0'], ARRAY[0], '0', '0');
CREATE INDEX ON multi USING gin (v, a1); -- test ambuild
CREATE INDEX ON multi USING gin (a2, a2); -- test ambuild
CREATE INDEX ON multi USING gin (j1 jsonb_ops, j2 jsonb_path_ops); -- test ambuild
INSERT INTO multi VALUES
    (to_tsvector('simple', 'c d'), ARRAY['a'], ARRAY[5, 6.1], '{"f":5}',
     '{"r":[3.0,6.5]}'); -- test aminsert
EXPLAIN (costs off) SELECT count(*) FROM multi WHERE v @@ 'a' or a1 && ARRAY['a'];
                                QUERY PLAN
--------------------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on multi
         Recheck Cond: ((v @@ '''a'''::tsquery) OR (a1 && '{a}'::text[]))
         ->  BitmapOr
               ->  Bitmap Index Scan on multi_v_a1_idx
                     Index Cond: (v @@ '''a'''::tsquery)
               ->  Bitmap Index Scan on multi_v_a1_idx
                     Index Cond: (a1 && '{a}'::text[])
(8 rows)

SELECT count(*) FROM multi WHERE v @@ 'a' or a1 && ARRAY['a'];
 count
-------
     2
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM multi WHERE a2 && ARRAY[5.0]::float[];
                         QUERY PLAN
-------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on multi
         Recheck Cond: (a2 && '{5}'::double precision[])
         ->  Bitmap Index Scan on multi_a2_a21_idx
               Index Cond: (a2 && '{5}'::double precision[])
(5 rows)

SELECT count(*) FROM multi WHERE a2 && ARRAY[5.0]::float[];
 count
-------
     2
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM multi WHERE j1 ? 'f' and j2 @> '{"r":[3.0]}';
                                   QUERY PLAN
--------------------------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on multi
         Recheck Cond: ((j1 ? 'f'::text) AND (j2 @> '{"r": [3.0]}'::jsonb))
         ->  Bitmap Index Scan on multi_j1_j2_idx
               Index Cond: ((j1 ? 'f'::text) AND (j2 @> '{"r": [3.0]}'::jsonb))
(5 rows)

SELECT count(*) FROM multi WHERE j1 ? 'f' and j2 @> '{"r":[3.0]}';
 count
-------
     2
(1 row)

--
-- Expression index
--
INSERT INTO expression VALUES
    (to_tsvector('simple', 'a b c'), ARRAY['d', 'e', 'f'], '{"g":["h","i"]}');
CREATE INDEX ON expression USING gin (tsvector_to_array(v)); -- test ambuild
CREATE INDEX ON expression USING gin (array_to_tsvector(a)); -- test ambuild
CREATE INDEX ON expression USING gin (
    jsonb_to_tsvector('simple', j, '["string"]')); -- test ambuild
INSERT INTO expression VALUES
    (to_tsvector('simple', 'a a'), ARRAY['d', 'd'], '{"g":"g"}'); -- test aminsert
EXPLAIN (costs off) SELECT count(*) FROM expression WHERE tsvector_to_array(v) && ARRAY['b'];
                            QUERY PLAN
-------------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on expression
         Recheck Cond: (tsvector_to_array(v) && '{b}'::text[])
         ->  Bitmap Index Scan on expression_tsvector_to_array_idx
               Index Cond: (tsvector_to_array(v) && '{b}'::text[])
(5 rows)

SELECT count(*) FROM expression WHERE tsvector_to_array(v) && ARRAY['b'];
 count
-------
     1
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM expression WHERE array_to_tsvector(a) @@ 'e';
                              QUERY PLAN
----------------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on expression
         Recheck Cond: (array_to_tsvector(a) @@ '''e'''::tsquery)
         ->  Bitmap Index Scan on expression_array_to_tsvector_idx
               Index Cond: (array_to_tsvector(a) @@ '''e'''::tsquery)
(5 rows)

SELECT count(*) FROM expression WHERE array_to_tsvector(a) @@ 'e';
 count
-------
     1
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM expression
    WHERE jsonb_to_tsvector('simple', j, '["string"]') @@ 'h';
                                                   QUERY PLAN
----------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on expression
         Recheck Cond: (jsonb_to_tsvector('simple'::regconfig, j, '["string"]'::jsonb) @@ '''h'''::tsquery)
         ->  Bitmap Index Scan on expression_jsonb_to_tsvector_idx
               Index Cond: (jsonb_to_tsvector('simple'::regconfig, j, '["string"]'::jsonb) @@ '''h'''::tsquery)
(5 rows)

SELECT count(*) FROM expression
    WHERE jsonb_to_tsvector('simple', j, '["string"]') @@ 'h';
 count
-------
     1
(1 row)

--
-- Partial index
--
INSERT INTO partial VALUES
    (to_tsvector('simple', 'a a'), ARRAY['d', 'e', 'f'], '{"g":["h","i"]}');
CREATE INDEX ON partial USING gin (v) WHERE v @@ 'c'; -- test ambuild
CREATE INDEX ON partial USING gin (a) WHERE j @> '{"g":["i"]}'; -- test ambuild
CREATE INDEX ON partial USING gin (j) WHERE a && ARRAY['f']; -- test ambuild
INSERT INTO partial VALUES
    (to_tsvector('simple', 'a b c'), ARRAY['d', 'd'], '{"g":"g"}'); -- test aminsert
EXPLAIN (costs off) SELECT count(*) FROM partial WHERE v @@ 'b';
               QUERY PLAN
-----------------------------------------
 Aggregate
   ->  Seq Scan on partial
         Filter: (v @@ '''b'''::tsquery)
(3 rows)

EXPLAIN (costs off) SELECT count(*) FROM partial WHERE v @@ 'c';
                   QUERY PLAN
------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on partial
         Recheck Cond: (v @@ '''c'''::tsquery)
         ->  Bitmap Index Scan on partial_v_idx
(4 rows)

SELECT count(*) FROM partial WHERE v @@ 'c';
 count
-------
     1
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM partial WHERE a && ARRAY['e'];
              QUERY PLAN
--------------------------------------
 Aggregate
   ->  Seq Scan on partial
         Filter: (a && '{e}'::text[])
(3 rows)

EXPLAIN (costs off) SELECT count(*) FROM partial
    WHERE a && ARRAY['e'] and j @> '{"g":["i"]}';
                                  QUERY PLAN
-------------------------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on partial
         Recheck Cond: ((a && '{e}'::text[]) AND (j @> '{"g": ["i"]}'::jsonb))
         ->  Bitmap Index Scan on partial_a_idx
               Index Cond: (a && '{e}'::text[])
(5 rows)

SELECT count(*) FROM partial
    WHERE a && ARRAY['e'] and j @> '{"g":["i"]}';
 count
-------
     1
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM partial
    WHERE j @? '$.g[*] ? (@ == "h")';
                       QUERY PLAN
--------------------------------------------------------
 Aggregate
   ->  Seq Scan on partial
         Filter: (j @? '$."g"[*]?(@ == "h")'::jsonpath)
(3 rows)

EXPLAIN (costs off) SELECT count(*) FROM partial
    WHERE j @? '$.g[*] ? (@ == "h")' and a && ARRAY['f'];
                                       QUERY PLAN
-----------------------------------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on partial
         Recheck Cond: ((j @? '$."g"[*]?(@ == "h")'::jsonpath) AND (a && '{f}'::text[]))
         ->  Bitmap Index Scan on partial_j_idx
               Index Cond: (j @? '$."g"[*]?(@ == "h")'::jsonpath)
(5 rows)

SELECT count(*) FROM partial
    WHERE j @? '$.g[*] ? (@ == "h")' and a && ARRAY['f'];
 count
-------
     1
(1 row)

-- Cleanup
DISCARD TEMP;
--
-- Try creating gin index on Yugabyte table.
--
CREATE TABLE vectors (i serial PRIMARY KEY, v tsvector);
CREATE INDEX ON vectors USING gin (v);
-- Cleanup
DROP TABLE vectors;
RESET enable_seqscan;
RESET enable_bitmapscan;
