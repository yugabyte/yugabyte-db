--
-- Colocation regress test for legacy colocated databases
-- The regress test is the same as yb_feature_colocation except it doesn't cover new colocation
-- behaviors
--
-- CREATE TABLE on non-colocated database
CREATE TABLE tab_colo (a INT) WITH (colocation = true);
ERROR:  cannot set colocation true on a non-colocated database
CREATE TABLE tab_noco (a INT) WITH (colocation = false);
DROP TABLE tab_noco;
-- CREATE DATABASE colocated
CREATE DATABASE colocation_test colocation = true;
\c colocation_test
CREATE TABLE e (id int PRIMARY KEY, first_name TEXT) WITH (colocation = true) SPLIT INTO 10 TABLETS;
ERROR:  cannot create colocated table with split option
-- CREATE TABLE
CREATE TABLE tab_nonkey (a INT);
\d tab_nonkey
             Table "public.tab_nonkey"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 a      | integer |           |          |
Colocation: true

CREATE TABLE tab_key (a INT PRIMARY KEY);
\d tab_key
              Table "public.tab_key"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 a      | integer |           | not null |
Indexes:
    "tab_key_pkey" PRIMARY KEY, lsm (a ASC), colocation: true
Colocation: true

CREATE TABLE tab_range (a INT, PRIMARY KEY (a ASC));
CREATE TABLE tab_range_nonkey (a INT, b INT, PRIMARY KEY (a ASC));
-- opt out of using colocated tablet
CREATE TABLE tab_nonkey_noco (a INT) WITH (colocation = false);
-- colocated tables with no primary keys should not be hash partitioned
CREATE TABLE split_table ( a integer, b text ) SPLIT INTO 4 TABLETS;
ERROR:  cannot create colocated table with split option
-- multi column primary key table
CREATE TABLE tab_range_range (a INT, b INT, PRIMARY KEY (a, b DESC));
CREATE TABLE tab_range_colo (a INT, PRIMARY KEY (a ASC)) WITH (colocation = true);
INSERT INTO tab_range (a) VALUES (0), (1), (2);
INSERT INTO tab_range (a, b) VALUES (0, '0'); -- fail
ERROR:  column "b" of relation "tab_range" does not exist
LINE 1: INSERT INTO tab_range (a, b) VALUES (0, '0');
                                  ^
INSERT INTO tab_range_nonkey (a, b) VALUES (0, '0'), (1, '1');
INSERT INTO tab_nonkey_noco (a) VALUES (0), (1), (2), (3);
INSERT INTO tab_range_range (a, b) VALUES (0, 0), (0, 1), (1, 0), (1, 1);
INSERT INTO tab_range_colo (a) VALUES (0), (1), (2), (3);
SELECT * FROM tab_range;
 a
---
 0
 1
 2
(3 rows)

SELECT * FROM tab_range WHERE a = 2;
 a
---
 2
(1 row)

SELECT * FROM tab_range WHERE n = '0'; -- fail
ERROR:  column "n" does not exist
LINE 1: SELECT * FROM tab_range WHERE n = '0';
                                      ^
SELECT * FROM tab_range_nonkey;
 a | b
---+---
 0 | 0
 1 | 1
(2 rows)

SELECT * FROM tab_nonkey_noco ORDER BY a ASC;
 a
---
 0
 1
 2
 3
(4 rows)

SELECT * FROM tab_range_range;
 a | b
---+---
 0 | 1
 0 | 0
 1 | 1
 1 | 0
(4 rows)

SELECT * FROM tab_range_colo;
 a
---
 0
 1
 2
 3
(4 rows)

BEGIN;
INSERT INTO tab_range_colo VALUES (4);
SELECT * FROM tab_range_colo;
 a
---
 0
 1
 2
 3
 4
(5 rows)

ROLLBACK;
BEGIN;
INSERT INTO tab_range_colo VALUES (5);
COMMIT;
SELECT * FROM tab_range_colo;
 a
---
 0
 1
 2
 3
 5
(5 rows)

INSERT INTO tab_range_colo VALUES (6), (6);
ERROR:  duplicate key value violates unique constraint "tab_range_colo_pkey"
-- CREATE INDEX
-- table with index
CREATE TABLE tab_range_nonkey2 (a INT, b INT, PRIMARY KEY (a ASC));
CREATE INDEX idx_range ON tab_range_nonkey2 (a);
\d tab_range_nonkey2
         Table "public.tab_range_nonkey2"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 a      | integer |           | not null |
 b      | integer |           |          |
Indexes:
    "tab_range_nonkey2_pkey" PRIMARY KEY, lsm (a ASC), colocation: true
    "idx_range" lsm (a ASC), colocation: true
Colocation: true

INSERT INTO tab_range_nonkey2 (a, b) VALUES (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5);
EXPLAIN (COSTS OFF) SELECT * FROM tab_range_nonkey2 WHERE a = 1;
                          QUERY PLAN
--------------------------------------------------------------
 Index Scan using tab_range_nonkey2_pkey on tab_range_nonkey2
   Index Cond: (a = 1)
(2 rows)

SELECT * FROM tab_range_nonkey2 WHERE a = 1;
 a | b
---+---
 1 | 1
(1 row)

UPDATE tab_range_nonkey2 SET b = b + 1 WHERE a > 3;
SELECT * FROM tab_range_nonkey2;
 a | b
---+---
 0 | 0
 1 | 1
 2 | 2
 3 | 3
 4 | 5
 5 | 6
(6 rows)

DELETE FROM tab_range_nonkey2 WHERE a > 3;
SELECT * FROM tab_range_nonkey2;
 a | b
---+---
 0 | 0
 1 | 1
 2 | 2
 3 | 3
(4 rows)

-- colocated table with non-colocated index
CREATE TABLE tab_range_nonkey3 (a INT, b INT, PRIMARY KEY (a ASC));
CREATE INDEX idx_range_colo ON tab_range_nonkey3 (a) WITH (colocation = true);
ERROR:  unrecognized parameter "colocation"
-- colocated table with colocated index
CREATE TABLE tab_range_nonkey4 (a INT, b INT, PRIMARY KEY (a ASC));
CREATE INDEX idx_range_noco ON tab_range_nonkey4 (a) WITH (colocation = false);
ERROR:  unrecognized parameter "colocation"
-- non-colocated table with index
CREATE TABLE tab_range_nonkey_noco (a INT, b INT, PRIMARY KEY (a ASC)) WITH (colocation = false);
CREATE INDEX idx_range2 ON tab_range_nonkey_noco (a);
INSERT INTO tab_range_nonkey_noco (a, b) VALUES (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5);
EXPLAIN (COSTS OFF) SELECT * FROM tab_range_nonkey_noco WHERE a = 1;
                              QUERY PLAN
----------------------------------------------------------------------
 Index Scan using tab_range_nonkey_noco_pkey on tab_range_nonkey_noco
   Index Cond: (a = 1)
(2 rows)

SELECT * FROM tab_range_nonkey_noco WHERE a = 1;
 a | b
---+---
 1 | 1
(1 row)

UPDATE tab_range_nonkey_noco SET b = b + 1 WHERE a > 3;
SELECT * FROM tab_range_nonkey_noco;
 a | b
---+---
 0 | 0
 1 | 1
 2 | 2
 3 | 3
 4 | 5
 5 | 6
(6 rows)

DELETE FROM tab_range_nonkey_noco WHERE a > 3;
SELECT * FROM tab_range_nonkey_noco;
 a | b
---+---
 0 | 0
 1 | 1
 2 | 2
 3 | 3
(4 rows)

-- more tables and indexes
CREATE TABLE tab_range_nonkey_noco2 (a INT, b INT, PRIMARY KEY (a ASC)) WITH (colocation = false);
CREATE INDEX idx_range3 ON tab_range_nonkey_noco2 (a);
INSERT INTO tab_range_nonkey_noco2 (a, b) VALUES (0, 0);
CREATE TABLE tab_range_nonkey_noco3 (a INT, b INT, PRIMARY KEY (a ASC)) WITH (colocation = false);
CREATE INDEX idx_range4 ON tab_range_nonkey_noco3 (a);
CREATE TABLE tab_range_nonkey5 (a INT, b INT, PRIMARY KEY (a ASC));
CREATE INDEX idx_range5 ON tab_range_nonkey5 (a);
CREATE TABLE tbl (r1 INT, r2 INT, v1 INT, v2 INT,
PRIMARY KEY (r1, r2));
CREATE INDEX idx_hash1 on tbl (r1 HASH);
ERROR:  cannot colocate hash partitioned index
CREATE INDEX idx_hash2 on tbl ((r1, r2) HASH);
ERROR:  cannot colocate hash partitioned index
CREATE INDEX idx_hash3 on tbl (r1 HASH, r2 ASC);
ERROR:  cannot colocate hash partitioned index
CREATE UNIQUE INDEX unique_idx_hash1 on tbl (r1 HASH);
ERROR:  cannot colocate hash partitioned index
CREATE UNIQUE INDEX unique_idx_hash2 on tbl ((r1, r2) HASH);
ERROR:  cannot colocate hash partitioned index
CREATE UNIQUE INDEX unique_idx_hash3 on tbl (r1 HASH, r2 ASC);
ERROR:  cannot colocate hash partitioned index
\d tbl
                Table "public.tbl"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 r1     | integer |           | not null |
 r2     | integer |           | not null |
 v1     | integer |           |          |
 v2     | integer |           |          |
Indexes:
    "tbl_pkey" PRIMARY KEY, lsm (r1 ASC, r2 ASC), colocation: true
Colocation: true

-- Make sure nothing bad happens to UNIQUE constraints after disabling HASH columns
-- for colocated indexes
CREATE TABLE tbl2 (r1 int PRIMARY KEY, r2 int, v1 int, v2 int, UNIQUE(v1));
ALTER TABLE tbl2 ADD CONSTRAINT unique_v2_tbl2 UNIQUE(v2);
\d tbl2
                Table "public.tbl2"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 r1     | integer |           | not null |
 r2     | integer |           |          |
 v1     | integer |           |          |
 v2     | integer |           |          |
Indexes:
    "tbl2_pkey" PRIMARY KEY, lsm (r1 ASC), colocation: true
    "tbl2_v1_key" UNIQUE CONSTRAINT, lsm (v1 ASC), colocation: true
    "unique_v2_tbl2" UNIQUE CONSTRAINT, lsm (v2 ASC), colocation: true
Colocation: true

DROP TABLE tbl, tbl2;
-- colocated table with unique index
CREATE TABLE tab_nonkey2 (a INT) WITH (colocation = true);
CREATE UNIQUE INDEX idx_range6 ON tab_nonkey2 (a);
\dt
                 List of relations
 Schema |          Name          | Type  |  Owner
--------+------------------------+-------+----------
 public | tab_key                | table | yugabyte
 public | tab_nonkey             | table | yugabyte
 public | tab_nonkey2            | table | yugabyte
 public | tab_nonkey_noco        | table | yugabyte
 public | tab_range              | table | yugabyte
 public | tab_range_colo         | table | yugabyte
 public | tab_range_nonkey       | table | yugabyte
 public | tab_range_nonkey2      | table | yugabyte
 public | tab_range_nonkey3      | table | yugabyte
 public | tab_range_nonkey4      | table | yugabyte
 public | tab_range_nonkey5      | table | yugabyte
 public | tab_range_nonkey_noco  | table | yugabyte
 public | tab_range_nonkey_noco2 | table | yugabyte
 public | tab_range_nonkey_noco3 | table | yugabyte
 public | tab_range_range        | table | yugabyte
(15 rows)

\di
                                List of relations
 Schema |            Name             | Type  |  Owner   |         Table
--------+-----------------------------+-------+----------+------------------------
 public | idx_range                   | index | yugabyte | tab_range_nonkey2
 public | idx_range2                  | index | yugabyte | tab_range_nonkey_noco
 public | idx_range3                  | index | yugabyte | tab_range_nonkey_noco2
 public | idx_range4                  | index | yugabyte | tab_range_nonkey_noco3
 public | idx_range5                  | index | yugabyte | tab_range_nonkey5
 public | idx_range6                  | index | yugabyte | tab_nonkey2
 public | tab_key_pkey                | index | yugabyte | tab_key
 public | tab_range_colo_pkey         | index | yugabyte | tab_range_colo
 public | tab_range_nonkey2_pkey      | index | yugabyte | tab_range_nonkey2
 public | tab_range_nonkey3_pkey      | index | yugabyte | tab_range_nonkey3
 public | tab_range_nonkey4_pkey      | index | yugabyte | tab_range_nonkey4
 public | tab_range_nonkey5_pkey      | index | yugabyte | tab_range_nonkey5
 public | tab_range_nonkey_noco2_pkey | index | yugabyte | tab_range_nonkey_noco2
 public | tab_range_nonkey_noco3_pkey | index | yugabyte | tab_range_nonkey_noco3
 public | tab_range_nonkey_noco_pkey  | index | yugabyte | tab_range_nonkey_noco
 public | tab_range_nonkey_pkey       | index | yugabyte | tab_range_nonkey
 public | tab_range_pkey              | index | yugabyte | tab_range
 public | tab_range_range_pkey        | index | yugabyte | tab_range_range
(18 rows)

-- TRUNCATE TABLE
-- truncate colocated table with default index
TRUNCATE TABLE tab_range;
SELECT * FROM tab_range;
 a
---
(0 rows)

INSERT INTO tab_range VALUES (4);
SELECT * FROM tab_range;
 a
---
 4
(1 row)

INSERT INTO tab_range VALUES (1);
INSERT INTO tab_range VALUES (2), (5);
SELECT * FROM tab_range;
 a
---
 1
 2
 4
 5
(4 rows)

DELETE FROM tab_range WHERE a = 2;
TRUNCATE TABLE tab_range;
SELECT * FROM tab_range;
 a
---
(0 rows)

INSERT INTO tab_range VALUES (2);
SELECT * FROM tab_range;
 a
---
 2
(1 row)

TRUNCATE TABLE tab_range;
-- truncate non-colocated table without index
TRUNCATE TABLE tab_nonkey_noco;
SELECT * FROM tab_nonkey_noco;
 a
---
(0 rows)

-- truncate colocated table with explicit index
TRUNCATE TABLE tab_range_nonkey2;
SELECT * FROM tab_range_nonkey2;
 a | b
---+---
(0 rows)

-- truncate non-colocated table with explicit index
TRUNCATE TABLE tab_range_nonkey_noco2;
SELECT * FROM tab_range_nonkey_noco2;
 a | b
---+---
(0 rows)

-- insert and truncate colocated table with explicit index
INSERT INTO tab_nonkey2 VALUES (1), (2), (3);
EXPLAIN (COSTS OFF) SELECT a FROM tab_nonkey2 ORDER BY a;
                   QUERY PLAN
-------------------------------------------------
 Index Only Scan using idx_range6 on tab_nonkey2
(1 row)

SELECT a FROM tab_nonkey2 ORDER BY a;
 a
---
 1
 2
 3
(3 rows)

TRUNCATE TABLE tab_nonkey2;
SELECT a FROM tab_nonkey2 ORDER BY a;
 a
---
(0 rows)

INSERT INTO tab_nonkey2 VALUES (2), (4);
SELECT a FROM tab_nonkey2 ORDER BY a;
 a
---
 2
 4
(2 rows)

\dt
                 List of relations
 Schema |          Name          | Type  |  Owner
--------+------------------------+-------+----------
 public | tab_key                | table | yugabyte
 public | tab_nonkey             | table | yugabyte
 public | tab_nonkey2            | table | yugabyte
 public | tab_nonkey_noco        | table | yugabyte
 public | tab_range              | table | yugabyte
 public | tab_range_colo         | table | yugabyte
 public | tab_range_nonkey       | table | yugabyte
 public | tab_range_nonkey2      | table | yugabyte
 public | tab_range_nonkey3      | table | yugabyte
 public | tab_range_nonkey4      | table | yugabyte
 public | tab_range_nonkey5      | table | yugabyte
 public | tab_range_nonkey_noco  | table | yugabyte
 public | tab_range_nonkey_noco2 | table | yugabyte
 public | tab_range_nonkey_noco3 | table | yugabyte
 public | tab_range_range        | table | yugabyte
(15 rows)

\di
                                List of relations
 Schema |            Name             | Type  |  Owner   |         Table
--------+-----------------------------+-------+----------+------------------------
 public | idx_range                   | index | yugabyte | tab_range_nonkey2
 public | idx_range2                  | index | yugabyte | tab_range_nonkey_noco
 public | idx_range3                  | index | yugabyte | tab_range_nonkey_noco2
 public | idx_range4                  | index | yugabyte | tab_range_nonkey_noco3
 public | idx_range5                  | index | yugabyte | tab_range_nonkey5
 public | idx_range6                  | index | yugabyte | tab_nonkey2
 public | tab_key_pkey                | index | yugabyte | tab_key
 public | tab_range_colo_pkey         | index | yugabyte | tab_range_colo
 public | tab_range_nonkey2_pkey      | index | yugabyte | tab_range_nonkey2
 public | tab_range_nonkey3_pkey      | index | yugabyte | tab_range_nonkey3
 public | tab_range_nonkey4_pkey      | index | yugabyte | tab_range_nonkey4
 public | tab_range_nonkey5_pkey      | index | yugabyte | tab_range_nonkey5
 public | tab_range_nonkey_noco2_pkey | index | yugabyte | tab_range_nonkey_noco2
 public | tab_range_nonkey_noco3_pkey | index | yugabyte | tab_range_nonkey_noco3
 public | tab_range_nonkey_noco_pkey  | index | yugabyte | tab_range_nonkey_noco
 public | tab_range_nonkey_pkey       | index | yugabyte | tab_range_nonkey
 public | tab_range_pkey              | index | yugabyte | tab_range
 public | tab_range_range_pkey        | index | yugabyte | tab_range_range
(18 rows)

-- ALTER TABLE
INSERT INTO tab_range (a) VALUES (0), (1), (2);
INSERT INTO tab_range_nonkey2 (a, b) VALUES (0, 0), (1, 1);
SELECT * FROM tab_range;
 a
---
 0
 1
 2
(3 rows)

SELECT * FROM tab_range_nonkey2;
 a | b
---+---
 0 | 0
 1 | 1
(2 rows)

-- Alter colocated tables
ALTER TABLE tab_range ADD COLUMN x INT;
ALTER TABLE tab_range_nonkey2 DROP COLUMN b;
SELECT * FROM tab_range;
 a | x
---+---
 0 |
 1 |
 2 |
(3 rows)

SELECT * FROM tab_range_nonkey2;
 a
---
 0
 1
(2 rows)

ALTER TABLE tab_range_nonkey2 RENAME TO tab_range_nonkey2_renamed;
SELECT * FROM tab_range_nonkey2_renamed;
 a
---
 0
 1
(2 rows)

SELECT * FROM tab_range_nonkey2;
ERROR:  relation "tab_range_nonkey2" does not exist
LINE 1: SELECT * FROM tab_range_nonkey2;
                      ^
-- DROP TABLE
-- drop colocated table with default index
DROP TABLE tab_range;
SELECT * FROM tab_range;
ERROR:  relation "tab_range" does not exist
LINE 1: SELECT * FROM tab_range;
                      ^
-- drop non-colocated table without index
DROP TABLE tab_nonkey_noco;
SELECT * FROM tab_nonkey_noco;
ERROR:  relation "tab_nonkey_noco" does not exist
LINE 1: SELECT * FROM tab_nonkey_noco;
                      ^
--- drop colocated table with explicit index
DROP TABLE tab_range_nonkey2_renamed;
SELECT * FROM tab_range_nonkey2_renamed;
ERROR:  relation "tab_range_nonkey2_renamed" does not exist
LINE 1: SELECT * FROM tab_range_nonkey2_renamed;
                      ^
-- drop non-colocated table with explicit index
DROP TABLE tab_range_nonkey_noco2;
SELECT * FROM tab_range_nonkey_noco2;
ERROR:  relation "tab_range_nonkey_noco2" does not exist
LINE 1: SELECT * FROM tab_range_nonkey_noco2;
                      ^
-- DROP INDEX
-- drop index on non-colocated table
DROP INDEX idx_range2;
EXPLAIN (COSTS OFF) SELECT * FROM tab_range_nonkey_noco WHERE a = 1;
                              QUERY PLAN
----------------------------------------------------------------------
 Index Scan using tab_range_nonkey_noco_pkey on tab_range_nonkey_noco
   Index Cond: (a = 1)
(2 rows)

-- drop index on colocated table
DROP INDEX idx_range5;
EXPLAIN (COSTS OFF) SELECT * FROM tab_range_nonkey5 WHERE a = 1;
                          QUERY PLAN
--------------------------------------------------------------
 Index Scan using tab_range_nonkey5_pkey on tab_range_nonkey5
   Index Cond: (a = 1)
(2 rows)

\dt
                 List of relations
 Schema |          Name          | Type  |  Owner
--------+------------------------+-------+----------
 public | tab_key                | table | yugabyte
 public | tab_nonkey             | table | yugabyte
 public | tab_nonkey2            | table | yugabyte
 public | tab_range_colo         | table | yugabyte
 public | tab_range_nonkey       | table | yugabyte
 public | tab_range_nonkey3      | table | yugabyte
 public | tab_range_nonkey4      | table | yugabyte
 public | tab_range_nonkey5      | table | yugabyte
 public | tab_range_nonkey_noco  | table | yugabyte
 public | tab_range_nonkey_noco3 | table | yugabyte
 public | tab_range_range        | table | yugabyte
(11 rows)

\di
                                List of relations
 Schema |            Name             | Type  |  Owner   |         Table
--------+-----------------------------+-------+----------+------------------------
 public | idx_range4                  | index | yugabyte | tab_range_nonkey_noco3
 public | idx_range6                  | index | yugabyte | tab_nonkey2
 public | tab_key_pkey                | index | yugabyte | tab_key
 public | tab_range_colo_pkey         | index | yugabyte | tab_range_colo
 public | tab_range_nonkey3_pkey      | index | yugabyte | tab_range_nonkey3
 public | tab_range_nonkey4_pkey      | index | yugabyte | tab_range_nonkey4
 public | tab_range_nonkey5_pkey      | index | yugabyte | tab_range_nonkey5
 public | tab_range_nonkey_noco3_pkey | index | yugabyte | tab_range_nonkey_noco3
 public | tab_range_nonkey_noco_pkey  | index | yugabyte | tab_range_nonkey_noco
 public | tab_range_nonkey_pkey       | index | yugabyte | tab_range_nonkey
 public | tab_range_range_pkey        | index | yugabyte | tab_range_range
(11 rows)

-- Test colocated tables/indexes with SPLIT INTO/SPLIT AT
CREATE TABLE invalid_tbl_split_into (k INT) SPLIT INTO 10 TABLETS;
ERROR:  cannot create colocated table with split option
CREATE TABLE invalid_tbl_split_at (k INT) SPLIT AT VALUES ((100));
ERROR:  cannot create colocated table with split option
CREATE TABLE test_tbl (k INT);
CREATE INDEX invalid_idx_split_into ON test_tbl (k) SPLIT INTO 10 TABLETS;
ERROR:  cannot create colocated index with split option
CREATE INDEX invalid_idx_split_at ON test_tbl (k) SPLIT AT VALUES ((100));
ERROR:  cannot create colocated index with split option
DROP TABLE test_tbl;
-- Test colocated partitioned table and partition tables
CREATE TABLE partitioned_table (
    k1 INT,
    v1 INT,
    v2 TEXT
)
PARTITION BY HASH (k1)
WITH (colocation_id='123456');
SELECT * FROM yb_table_properties('partitioned_table'::regclass::oid);
 num_tablets | num_hash_key_columns | is_colocated | tablegroup_oid | colocation_id
-------------+----------------------+--------------+----------------+---------------
           1 |                    0 | t            |                |        123456
(1 row)

CREATE TABLE table_partition PARTITION OF partitioned_table
FOR VALUES WITH (modulus 2, remainder 0)
WITH (colocation_id='234567');
SELECT * FROM yb_table_properties('table_partition'::regclass::oid);
 num_tablets | num_hash_key_columns | is_colocated | tablegroup_oid | colocation_id
-------------+----------------------+--------------+----------------+---------------
           1 |                    0 | t            |                |        234567
(1 row)

-- drop database
\c yugabyte
DROP DATABASE colocation_test;
-- Test syntax change as a result of Colocation GA change
-- Fail: only one of 'colocation' and 'colocated' options can be specified in CREATE DATABASE
CREATE DATABASE colocation_test colocated = true colocation = true;
WARNING:  'colocated' syntax is deprecated and will be removed in a future release
LINE 1: CREATE DATABASE colocation_test colocated = true colocation ...
                                        ^
HINT:  Use 'colocation' instead of 'colocated'.
ERROR:  conflicting or redundant options
LINE 1: CREATE DATABASE colocation_test colocated = true colocation ...
                                                         ^
-- Succeed with deprecated warning: create a colocated database using old syntax
CREATE DATABASE colocation_test colocated = true;
WARNING:  'colocated' syntax is deprecated and will be removed in a future release
LINE 1: CREATE DATABASE colocation_test colocated = true;
                                        ^
HINT:  Use 'colocation' instead of 'colocated'.
DROP DATABASE colocation_test;
-- Succeed: create a colocated database using new syntax
CREATE DATABASE colocation_test colocation = true;
\c colocation_test
-- Fail: only one of 'colocation' and 'colocated' options can be specified in CREATE TABLE
CREATE TABLE tbl_colocated_colocation (k INT, v INT)
WITH (colocation = true, colocated = true);
ERROR:  cannot specify both of 'colocation' and 'colocated' options
HINT:  Use 'colocation' instead of 'colocated'.
-- Succeed with deprecated warning: create a colocated table using old syntax
CREATE TABLE tbl_colocated (k INT, v INT) WITH (colocated = true);
WARNING:  'colocated' syntax is deprecated and will be removed in a future release
HINT:  Use 'colocation' instead of 'colocated'.
-- Succeed: create a colocated table using new syntax
CREATE TABLE tbl_colocation (k INT, v INT) WITH (colocation = true);
-- Check colocated table footer
\d tbl_colocation
           Table "public.tbl_colocation"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 k      | integer |           |          |
 v      | integer |           |          |
Colocation: true

-- Create and describe a table opt out of colocation
CREATE TABLE tbl_no_colocation (k INT, v INT) WITH (colocation = false);
\d tbl_no_colocation
         Table "public.tbl_no_colocation"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 k      | integer |           |          |
 v      | integer |           |          |

-- Test table rewrite operations with legacy colocation.
-- Suppress NOTICE messages during table rewrite operations.
SET client_min_messages TO WARNING;
CREATE TABLE base (col int, col2 int);
CREATE INDEX base_idx ON base(col2);
INSERT INTO base VALUES (1, 3), (2, 2), (3, 1);
ALTER TABLE base ADD PRIMARY KEY (col HASH); -- should fail.
ERROR:  cannot colocate hash partitioned index
ALTER TABLE base
    ADD PRIMARY KEY (col), ADD COLUMN col3 float DEFAULT random();
ALTER TABLE base ALTER COLUMN col2 TYPE int2;
ALTER TABLE base ADD COLUMN col4 SERIAL;
SELECT col, col2, col4 FROM base;
 col | col2 | col4 
-----+------+------
   1 |    3 |    1
   2 |    2 |    2
   3 |    1 |    3
(3 rows)

SELECT col, col2, col4 FROM base WHERE col2 = 1;
 col | col2 | col4 
-----+------+------
   3 |    1 |    3
(1 row)

ALTER TABLE base DROP CONSTRAINT base_pkey;
SELECT col, col2, col4 FROM base ORDER BY col;
 col | col2 | col4 
-----+------+------
   1 |    3 |    1
   2 |    2 |    2
   3 |    1 |    3
(3 rows)

\d+ base;
                                                     Table "public.base"
 Column |       Type       | Collation | Nullable |              Default               | Storage | Stats target | Description 
--------+------------------+-----------+----------+------------------------------------+---------+--------------+-------------
 col    | integer          |           | not null |                                    | plain   |              | 
 col2   | smallint         |           |          |                                    | plain   |              | 
 col3   | double precision |           |          | random()                           | plain   |              | 
 col4   | integer          |           | not null | nextval('base_col4_seq'::regclass) | plain   |              | 
Indexes:
    "base_idx" lsm (col2 ASC), colocation: true
Colocation: true

SELECT num_tablets, num_hash_key_columns, is_colocated FROM
    yb_table_properties('base_idx'::regclass);
 num_tablets | num_hash_key_columns | is_colocated 
-------------+----------------------+--------------
           1 |                    0 | t
(1 row)

CREATE TABLE base2 (col int, col2 int) WITH (COLOCATION=false);
CREATE INDEX base2_idx ON base2(col2);
INSERT INTO base2 VALUES (1, 3), (2, 2), (3, 1);
ALTER TABLE base2
    ADD PRIMARY KEY (col ASC), ADD COLUMN col3 float DEFAULT random();
ALTER TABLE base2 ALTER COLUMN col2 TYPE int2;
ALTER TABLE base2 ADD COLUMN col4 SERIAL;
SELECT col, col2, col4 FROM base2;
 col | col2 | col4 
-----+------+------
   1 |    3 |    1
   2 |    2 |    2
   3 |    1 |    3
(3 rows)

SELECT col, col2, col4 FROM base2 WHERE col2 = 1;
 col | col2 | col4 
-----+------+------
   3 |    1 |    3
(1 row)

ALTER TABLE base2 DROP CONSTRAINT base2_pkey;
SELECT col, col2, col4 FROM base2 ORDER BY col;
 col | col2 | col4 
-----+------+------
   1 |    3 |    1
   2 |    2 |    2
   3 |    1 |    3
(3 rows)

\d+ base2;
                                                     Table "public.base2"
 Column |       Type       | Collation | Nullable |               Default               | Storage | Stats target | Description 
--------+------------------+-----------+----------+-------------------------------------+---------+--------------+-------------
 col    | integer          |           | not null |                                     | plain   |              | 
 col2   | smallint         |           |          |                                     | plain   |              | 
 col3   | double precision |           |          | random()                            | plain   |              | 
 col4   | integer          |           | not null | nextval('base2_col4_seq'::regclass) | plain   |              | 
Indexes:
    "base2_idx" lsm (col2 HASH)
Options: colocation=false

SELECT num_tablets, num_hash_key_columns, is_colocated FROM
    yb_table_properties('base2_idx'::regclass);
 num_tablets | num_hash_key_columns | is_colocated 
-------------+----------------------+--------------
           3 |                    1 | f
(1 row)

-- Drop database
\c yugabyte
DROP DATABASE colocation_test;
SELECT count(*) FROM pg_database WHERE datname = 'colocation_test';
 count 
-------
     0
(1 row)
