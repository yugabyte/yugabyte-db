--
-- FLOAT8
--
--
-- Build a table for testing
-- (This temporarily hides the table created in test_setup.sql)
-- YB note: but we also want to test YB tables instead of temporary tables, so
-- create a new table in a new namespace instead.
--
CREATE SCHEMA yb_tmp;
SET search_path TO yb_tmp;
-- TODO(jason): see if "PRIMARY KEY" could be removed, which is not present in
-- the upstream test.
CREATE TABLE FLOAT8_TBL(f1 float8 PRIMARY KEY);
INSERT INTO FLOAT8_TBL(f1) VALUES ('    0.0   ');
INSERT INTO FLOAT8_TBL(f1) VALUES ('1004.30  ');
INSERT INTO FLOAT8_TBL(f1) VALUES ('   -34.84');
INSERT INTO FLOAT8_TBL(f1) VALUES ('1.2345678901234e+200');
INSERT INTO FLOAT8_TBL(f1) VALUES ('1.2345678901234e-200');
-- test for underflow and overflow handling
SELECT '10e400'::float8;
ERROR:  "10e400" is out of range for type double precision
LINE 1: SELECT '10e400'::float8;
               ^
SELECT '-10e400'::float8;
ERROR:  "-10e400" is out of range for type double precision
LINE 1: SELECT '-10e400'::float8;
               ^
SELECT '10e-400'::float8;
ERROR:  "10e-400" is out of range for type double precision
LINE 1: SELECT '10e-400'::float8;
               ^
SELECT '-10e-400'::float8;
ERROR:  "-10e-400" is out of range for type double precision
LINE 1: SELECT '-10e-400'::float8;
               ^
-- bad input
INSERT INTO FLOAT8_TBL(f1) VALUES ('');
ERROR:  invalid input syntax for type double precision: ""
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('     ');
ERROR:  invalid input syntax for type double precision: "     "
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('     ');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('xyz');
ERROR:  invalid input syntax for type double precision: "xyz"
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('xyz');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('5.0.0');
ERROR:  invalid input syntax for type double precision: "5.0.0"
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('5.0.0');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('5 . 0');
ERROR:  invalid input syntax for type double precision: "5 . 0"
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('5 . 0');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('5.   0');
ERROR:  invalid input syntax for type double precision: "5.   0"
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('5.   0');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('    - 3');
ERROR:  invalid input syntax for type double precision: "    - 3"
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('    - 3');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('123           5');
ERROR:  invalid input syntax for type double precision: "123           5"
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('123           5');
                                           ^
-- special inputs
SELECT 'NaN'::float8;
 float8
--------
    NaN
(1 row)

SELECT 'nan'::float8;
 float8
--------
    NaN
(1 row)

SELECT '   NAN  '::float8;
 float8
--------
    NaN
(1 row)

SELECT 'infinity'::float8;
  float8
----------
 Infinity
(1 row)

SELECT '          -INFINiTY   '::float8;
  float8
-----------
 -Infinity
(1 row)

-- bad special inputs
SELECT 'N A N'::float8;
ERROR:  invalid input syntax for type double precision: "N A N"
LINE 1: SELECT 'N A N'::float8;
               ^
SELECT 'NaN x'::float8;
ERROR:  invalid input syntax for type double precision: "NaN x"
LINE 1: SELECT 'NaN x'::float8;
               ^
SELECT ' INFINITY    x'::float8;
ERROR:  invalid input syntax for type double precision: " INFINITY    x"
LINE 1: SELECT ' INFINITY    x'::float8;
               ^
SELECT 'Infinity'::float8 + 100.0;
 ?column?
----------
 Infinity
(1 row)

SELECT 'Infinity'::float8 / 'Infinity'::float8;
 ?column?
----------
      NaN
(1 row)

SELECT 'nan'::float8 / 'nan'::float8;
 ?column?
----------
      NaN
(1 row)

SELECT 'nan'::numeric::float8;
 float8
--------
    NaN
(1 row)

SELECT '' AS five, * FROM FLOAT8_TBL ORDER BY f1;
 five |          f1
------+----------------------
      |               -34.84
      |                    0
      | 1.2345678901234e-200
      |               1004.3
      | 1.2345678901234e+200
(5 rows)

SELECT '' AS four, f.* FROM FLOAT8_TBL f WHERE f.f1 <> '1004.3' ORDER BY f1;
 four |          f1
------+----------------------
      |               -34.84
      |                    0
      | 1.2345678901234e-200
      | 1.2345678901234e+200
(4 rows)

SELECT '' AS one, f.* FROM FLOAT8_TBL f WHERE f.f1 = '1004.3' ORDER BY f1;
 one |   f1
-----+--------
     | 1004.3
(1 row)

SELECT '' AS three, f.* FROM FLOAT8_TBL f WHERE '1004.3' > f.f1 ORDER BY f1;
 three |          f1
-------+----------------------
       |               -34.84
       |                    0
       | 1.2345678901234e-200
(3 rows)

SELECT '' AS three, f.* FROM FLOAT8_TBL f WHERE  f.f1 < '1004.3' ORDER BY f1;
 three |          f1
-------+----------------------
       |               -34.84
       |                    0
       | 1.2345678901234e-200
(3 rows)

SELECT '' AS four, f.* FROM FLOAT8_TBL f WHERE '1004.3' >= f.f1 ORDER BY f1;
 four |          f1
------+----------------------
      |               -34.84
      |                    0
      | 1.2345678901234e-200
      |               1004.3
(4 rows)

SELECT '' AS four, f.* FROM FLOAT8_TBL f WHERE  f.f1 <= '1004.3' ORDER BY f1;
 four |          f1
------+----------------------
      |               -34.84
      |                    0
      | 1.2345678901234e-200
      |               1004.3
(4 rows)

SELECT '' AS three, f.f1, f.f1 * '-10' AS x
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0' ORDER BY f1;
 three |          f1          |           x
-------+----------------------+-----------------------
       | 1.2345678901234e-200 | -1.2345678901234e-199
       |               1004.3 |                -10043
       | 1.2345678901234e+200 | -1.2345678901234e+201
(3 rows)

SELECT '' AS three, f.f1, f.f1 + '-10' AS x
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0' ORDER BY f1;
 three |          f1          |          x
-------+----------------------+----------------------
       | 1.2345678901234e-200 |                  -10
       |               1004.3 |                994.3
       | 1.2345678901234e+200 | 1.2345678901234e+200
(3 rows)

SELECT '' AS three, f.f1, f.f1 / '-10' AS x
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0' ORDER BY f1;
 three |          f1          |           x
-------+----------------------+-----------------------
       | 1.2345678901234e-200 | -1.2345678901234e-201
       |               1004.3 |   -100.42999999999999
       | 1.2345678901234e+200 | -1.2345678901234e+199
(3 rows)

SELECT '' AS three, f.f1, f.f1 - '-10' AS x
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0' ORDER BY f1;
 three |          f1          |          x
-------+----------------------+----------------------
       | 1.2345678901234e-200 |                   10
       |               1004.3 |               1014.3
       | 1.2345678901234e+200 | 1.2345678901234e+200
(3 rows)

SELECT '' AS one, f.f1 ^ '2.0' AS square_f1
   FROM FLOAT8_TBL f where f.f1 = '1004.3' ORDER BY f1;
 one |     square_f1
-----+--------------------
     | 1008618.4899999999
(1 row)

-- absolute value
SELECT '' AS five, f.f1, @f.f1 AS abs_f1
   FROM FLOAT8_TBL f ORDER BY f1;
 five |          f1          |        abs_f1
------+----------------------+----------------------
      |               -34.84 |                34.84
      |                    0 |                    0
      | 1.2345678901234e-200 | 1.2345678901234e-200
      |               1004.3 |               1004.3
      | 1.2345678901234e+200 | 1.2345678901234e+200
(5 rows)

-- truncate
SELECT '' AS five, f.f1, trunc(f.f1) AS trunc_f1
   FROM FLOAT8_TBL f ORDER BY f1;
 five |          f1          |       trunc_f1
------+----------------------+----------------------
      |               -34.84 |                  -34
      |                    0 |                    0
      | 1.2345678901234e-200 |                    0
      |               1004.3 |                 1004
      | 1.2345678901234e+200 | 1.2345678901234e+200
(5 rows)

-- round
SELECT '' AS five, f.f1, round(f.f1) AS round_f1
   FROM FLOAT8_TBL f ORDER BY f1;
 five |          f1          |       round_f1
------+----------------------+----------------------
      |               -34.84 |                  -35
      |                    0 |                    0
      | 1.2345678901234e-200 |                    0
      |               1004.3 |                 1004
      | 1.2345678901234e+200 | 1.2345678901234e+200
(5 rows)

-- ceil / ceiling
select ceil(f1) as ceil_f1 from float8_tbl f ORDER BY f1;
       ceil_f1
----------------------
                  -34
                    0
                    1
                 1005
 1.2345678901234e+200
(5 rows)

select ceiling(f1) as ceiling_f1 from float8_tbl f ORDER BY f1;
      ceiling_f1
----------------------
                  -34
                    0
                    1
                 1005
 1.2345678901234e+200
(5 rows)

-- floor
select floor(f1) as floor_f1 from float8_tbl f ORDER BY f1;
       floor_f1
----------------------
                  -35
                    0
                    0
                 1004
 1.2345678901234e+200
(5 rows)

-- sign
select sign(f1) as sign_f1 from float8_tbl f ORDER BY f1;
 sign_f1
---------
      -1
       0
       1
       1
       1
(5 rows)

-- avoid bit-exact output here because operations may not be bit-exact.
SET extra_float_digits = 0;
-- square root
SELECT sqrt(float8 '64') AS eight;
 eight
-------
     8
(1 row)

SELECT |/ float8 '64' AS eight;
 eight
-------
     8
(1 row)

SELECT '' AS three, f.f1, |/f.f1 AS sqrt_f1
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0' ORDER BY f1;
 three |          f1          |        sqrt_f1
-------+----------------------+-----------------------
       | 1.2345678901234e-200 | 1.11111110611109e-100
       |               1004.3 |      31.6906926399535
       | 1.2345678901234e+200 | 1.11111110611109e+100
(3 rows)

-- power
SELECT power(float8 '144', float8 '0.5');
 power
-------
    12
(1 row)

-- take exp of ln(f.f1)
SELECT '' AS three, f.f1, exp(ln(f.f1)) AS exp_ln_f1
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0' ORDER BY f1;
 three |          f1          |       exp_ln_f1
-------+----------------------+-----------------------
       | 1.2345678901234e-200 | 1.23456789012339e-200
       |               1004.3 |                1004.3
       | 1.2345678901234e+200 | 1.23456789012338e+200
(3 rows)

-- cube root
SELECT ||/ float8 '27' AS three;
 three
-------
     3
(1 row)

SELECT '' AS five, f.f1, ||/f.f1 AS cbrt_f1 FROM FLOAT8_TBL f ORDER BY f1;
 five |          f1          |       cbrt_f1
------+----------------------+----------------------
      |               -34.84 |    -3.26607421344208
      |                    0 |                    0
      | 1.2345678901234e-200 |  2.3112042409018e-67
      |               1004.3 |      10.014312837827
      | 1.2345678901234e+200 | 4.97933859234765e+66
(5 rows)

SELECT '' AS five, * FROM FLOAT8_TBL ORDER BY f1;
 five |          f1
------+----------------------
      |               -34.84
      |                    0
      | 1.2345678901234e-200
      |               1004.3
      | 1.2345678901234e+200
(5 rows)

-- This could be done as an UPDATE.
DROP TABLE FLOAT8_TBL;
CREATE TABLE FLOAT8_TBL (f1 float8 PRIMARY KEY);
INSERT INTO FLOAT8_TBL(f1) VALUES ('    0.0   ');
INSERT INTO FLOAT8_TBL(f1) VALUES ('-1004.30  ');
INSERT INTO FLOAT8_TBL(f1) VALUES ('   -34.84');
INSERT INTO FLOAT8_TBL(f1) VALUES ('-1.2345678901234e+200');
INSERT INTO FLOAT8_TBL(f1) VALUES ('-1.2345678901234e-200');
SELECT '' AS bad, f.f1 * '1e200' from FLOAT8_TBL f ORDER BY f1;
ERROR:  value out of range: overflow
SELECT '' AS bad, f.f1 ^ '1e200' from FLOAT8_TBL f ORDER BY f1;
ERROR:  value out of range: overflow
SELECT 0 ^ 0 + 0 ^ 1 + 0 ^ 0.0 + 0 ^ 0.5;
 ?column?
----------
        2
(1 row)

SELECT '' AS bad, ln(f.f1) from FLOAT8_TBL f where f.f1 = '0.0' ORDER BY f1;
ERROR:  cannot take logarithm of zero
SELECT '' AS bad, ln(f.f1) from FLOAT8_TBL f where f.f1 < '0.0' ORDER BY f1;
ERROR:  cannot take logarithm of a negative number
SELECT '' AS bad, exp(f.f1) from FLOAT8_TBL f ORDER BY f1;
ERROR:  value out of range: underflow
SELECT '' AS bad, f.f1 / '0.0' from FLOAT8_TBL f ORDER BY f1;
ERROR:  division by zero
SELECT '' AS five, * FROM FLOAT8_TBL ORDER BY f1;
 five |          f1
------+-----------------------
      | -1.2345678901234e+200
      |               -1004.3
      |                -34.84
      | -1.2345678901234e-200
      |                     0
(5 rows)

RESET extra_float_digits;
-- test for over- and underflow
INSERT INTO FLOAT8_TBL(f1) VALUES ('10e400');
ERROR:  "10e400" is out of range for type double precision
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('10e400');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e400');
ERROR:  "-10e400" is out of range for type double precision
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e400');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('10e-400');
ERROR:  "10e-400" is out of range for type double precision
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('10e-400');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e-400');
ERROR:  "-10e-400" is out of range for type double precision
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e-400');
                                           ^
DROP TABLE FLOAT8_TBL;
-- YB note: reset the changes from above.
DROP SCHEMA yb_tmp;
RESET search_path;
-- Check the float8 values exported for use by other tests
SELECT '' AS five, * FROM FLOAT8_TBL ORDER BY f1;
 five |          f1
------+-----------------------
      | -1.2345678901234e+200
      |               -1004.3
      |                -34.84
      | -1.2345678901234e-200
      |                     0
(5 rows)

-- test exact cases for trigonometric functions in degrees
SELECT x,
       sind(x),
       sind(x) IN (-1,-0.5,0,0.5,1) AS sind_exact
FROM (VALUES (0), (30), (90), (150), (180),
      (210), (270), (330), (360)) AS t(x);
  x  | sind | sind_exact
-----+------+------------
   0 |    0 | t
  30 |  0.5 | t
  90 |    1 | t
 150 |  0.5 | t
 180 |    0 | t
 210 | -0.5 | t
 270 |   -1 | t
 330 | -0.5 | t
 360 |    0 | t
(9 rows)

SELECT x,
       cosd(x),
       cosd(x) IN (-1,-0.5,0,0.5,1) AS cosd_exact
FROM (VALUES (0), (60), (90), (120), (180),
      (240), (270), (300), (360)) AS t(x);
  x  | cosd | cosd_exact
-----+------+------------
   0 |    1 | t
  60 |  0.5 | t
  90 |    0 | t
 120 | -0.5 | t
 180 |   -1 | t
 240 | -0.5 | t
 270 |    0 | t
 300 |  0.5 | t
 360 |    1 | t
(9 rows)

SELECT x,
       tand(x),
       tand(x) IN ('-Infinity'::float8,-1,0,
                   1,'Infinity'::float8) AS tand_exact,
       cotd(x),
       cotd(x) IN ('-Infinity'::float8,-1,0,
                   1,'Infinity'::float8) AS cotd_exact
FROM (VALUES (0), (45), (90), (135), (180),
      (225), (270), (315), (360)) AS t(x);
  x  |   tand    | tand_exact |   cotd    | cotd_exact
-----+-----------+------------+-----------+------------
   0 |         0 | t          |  Infinity | t
  45 |         1 | t          |         1 | t
  90 |  Infinity | t          |         0 | t
 135 |        -1 | t          |        -1 | t
 180 |         0 | t          | -Infinity | t
 225 |         1 | t          |         1 | t
 270 | -Infinity | t          |         0 | t
 315 |        -1 | t          |        -1 | t
 360 |         0 | t          |  Infinity | t
(9 rows)

SELECT x,
       asind(x),
       asind(x) IN (-90,-30,0,30,90) AS asind_exact,
       acosd(x),
       acosd(x) IN (0,60,90,120,180) AS acosd_exact
FROM (VALUES (-1), (-0.5), (0), (0.5), (1)) AS t(x);
  x   | asind | asind_exact | acosd | acosd_exact
------+-------+-------------+-------+-------------
   -1 |   -90 | t           |   180 | t
 -0.5 |   -30 | t           |   120 | t
    0 |     0 | t           |    90 | t
  0.5 |    30 | t           |    60 | t
    1 |    90 | t           |     0 | t
(5 rows)

SELECT x,
       atand(x),
       atand(x) IN (-90,-45,0,45,90) AS atand_exact
FROM (VALUES ('-Infinity'::float8), (-1), (0), (1),
      ('Infinity'::float8)) AS t(x);
     x     | atand | atand_exact
-----------+-------+-------------
 -Infinity |   -90 | t
        -1 |   -45 | t
         0 |     0 | t
         1 |    45 | t
  Infinity |    90 | t
(5 rows)

SELECT x, y,
       atan2d(y, x),
       atan2d(y, x) IN (-90,0,90,180) AS atan2d_exact
FROM (SELECT 10*cosd(a), 10*sind(a)
      FROM generate_series(0, 360, 90) AS t(a)) AS t(x,y);
  x  |  y  | atan2d | atan2d_exact
-----+-----+--------+--------------
  10 |   0 |      0 | t
   0 |  10 |     90 | t
 -10 |   0 |    180 | t
   0 | -10 |    -90 | t
  10 |   0 |      0 | t
(5 rows)

