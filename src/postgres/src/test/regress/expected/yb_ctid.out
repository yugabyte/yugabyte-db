-- hash pk
create table ybctid_test_hash(k int primary key, v text);
insert into ybctid_test_hash values (1, 'one'), (2, 'two'), (3, 'three'), (4, 'four');
select ybctid, * from ybctid_test_hash;
         ybctid         | k |   v
------------------------+---+-------
 \x47121048800000012121 | 1 | one
 \x479eaf48800000042121 | 4 | four
 \x47c0c448800000022121 | 2 | two
 \x47fca048800000032121 | 3 | three
(4 rows)

select k, v from ybctid_test_hash where ybctid = '\x47121048800000012121';
 k |  v
---+-----
 1 | one
(1 row)

select ybctid, k, v from ybctid_test_hash order by ybctid;
         ybctid         | k |   v
------------------------+---+-------
 \x47121048800000012121 | 1 | one
 \x479eaf48800000042121 | 4 | four
 \x47c0c448800000022121 | 2 | two
 \x47fca048800000032121 | 3 | three
(4 rows)

create index on ybctid_test_hash(v);
explain (costs off)
select ybctid, * from ybctid_test_hash where v = 'one';
                         QUERY PLAN
-------------------------------------------------------------
 Index Scan using ybctid_test_hash_v_idx on ybctid_test_hash
   Index Cond: (v = 'one'::text)
(2 rows)

select ybctid, * from ybctid_test_hash where v = 'one';
         ybctid         | k |  v
------------------------+---+-----
 \x47121048800000012121 | 1 | one
(1 row)

drop table ybctid_test_hash;
-- range pk
create table ybctid_test_range(k int, v text, primary key(k asc));
insert into ybctid_test_range values (1, 'one'), (2, 'two'), (3, 'three'), (4, 'four');
select ybctid, * from ybctid_test_range;
     ybctid     | k |   v
----------------+---+-------
 \x488000000121 | 1 | one
 \x488000000221 | 2 | two
 \x488000000321 | 3 | three
 \x488000000421 | 4 | four
(4 rows)

select k, v from ybctid_test_range where ybctid = '\x488000000221';
 k |  v
---+-----
 2 | two
(1 row)

select ybctid, k, v from ybctid_test_range order by ybctid;
     ybctid     | k |   v
----------------+---+-------
 \x488000000121 | 1 | one
 \x488000000221 | 2 | two
 \x488000000321 | 3 | three
 \x488000000421 | 4 | four
(4 rows)

create index on ybctid_test_range(v asc);
explain (costs off)
select ybctid, * from ybctid_test_range where v = 'one';
                          QUERY PLAN
---------------------------------------------------------------
 Index Scan using ybctid_test_range_v_idx on ybctid_test_range
   Index Cond: (v = 'one'::text)
(2 rows)

select ybctid, * from ybctid_test_range where v = 'one';
     ybctid     | k |  v
----------------+---+-----
 \x488000000121 | 1 | one
(1 row)

drop table ybctid_test_range;
-- hash + range pk
create table ybctid_test_hash_range(k1 int, k2 int, k3 text, v text,
                                    primary key((k1, k2) hash, k3 asc));
insert into ybctid_test_hash_range values (1, 4, 'one', 'four'), (2, 3, 'two', 'three'),
                                          (3, 2, 'three', 'two'), (4, 1, 'four', 'one');
select ybctid, * from ybctid_test_hash_range;
                      ybctid                      | k1 | k2 |  k3   |   v
--------------------------------------------------+----+----+-------+-------
 \x4707b64880000003488000000221537468726565000021 |  3 |  2 | three | two
 \x47801748800000024880000003215374776f000021     |  2 |  3 | two   | three
 \x478343488000000448800000012153666f7572000021   |  4 |  1 | four  | one
 \x47a9014880000001488000000421536f6e65000021     |  1 |  4 | one   | four
(4 rows)

select k1, k2, k3, v from ybctid_test_hash_range
  where ybctid = '\x4707b64880000003488000000221537468726565000021';
 k1 | k2 |  k3   |  v
----+----+-------+-----
  3 |  2 | three | two
(1 row)

select ybctid, k1, k2, k3, v from ybctid_test_hash_range order by ybctid;
                      ybctid                      | k1 | k2 |  k3   |   v
--------------------------------------------------+----+----+-------+-------
 \x4707b64880000003488000000221537468726565000021 |  3 |  2 | three | two
 \x47801748800000024880000003215374776f000021     |  2 |  3 | two   | three
 \x478343488000000448800000012153666f7572000021   |  4 |  1 | four  | one
 \x47a9014880000001488000000421536f6e65000021     |  1 |  4 | one   | four
(4 rows)

create index on ybctid_test_hash_range(v desc);
explain (costs off)
select ybctid, * from ybctid_test_hash_range where v = 'one';
                               QUERY PLAN
-------------------------------------------------------------------------
 Index Scan using ybctid_test_hash_range_v_idx on ybctid_test_hash_range
   Index Cond: (v = 'one'::text)
(2 rows)

select ybctid, * from ybctid_test_hash_range where v = 'one';
                     ybctid                     | k1 | k2 |  k3  |  v
------------------------------------------------+----+----+------+-----
 \x478343488000000448800000012153666f7572000021 |  4 |  1 | four | one
(1 row)

drop table ybctid_test_hash_range;
-- no pk, ybctid are random, test can't show them or sort by them
create table ybctid_test_nopk(k int, v text);
insert into ybctid_test_nopk values (1, 'one'), (2, 'two'), (3, 'three'), (4, 'four');
CREATE OR REPLACE FUNCTION rows_by_ybctid() RETURNS TABLE (kp int, vp text)
AS $$
DECLARE rowid bytea;
BEGIN
  FOR rowid IN select ybctid from ybctid_test_nopk order by k
  LOOP
    RETURN QUERY select k, v from ybctid_test_nopk where ybctid = rowid;
  END LOOP;
END
$$ LANGUAGE plpgsql;
select * from rows_by_ybctid();
 kp |  vp
----+-------
  1 | one
  2 | two
  3 | three
  4 | four
(4 rows)

drop function rows_by_ybctid;
drop table ybctid_test_nopk;
-- colocated tables
create database codb colocation = true;
\c codb
-- with pk
create table ybctid_test_with_pk(k int, v text, primary key(k asc)) with (colocation=true);
insert into ybctid_test_with_pk values (1, 'one'), (2, 'two'), (3, 'three'), (4, 'four');
select ybctid, * from ybctid_test_with_pk;
     ybctid     | k |   v
----------------+---+-------
 \x488000000121 | 1 | one
 \x488000000221 | 2 | two
 \x488000000321 | 3 | three
 \x488000000421 | 4 | four
(4 rows)

select k, v from ybctid_test_with_pk where ybctid = '\x488000000121';
 k |  v
---+-----
 1 | one
(1 row)

select ybctid, k, v from ybctid_test_with_pk order by ybctid;
     ybctid     | k |   v
----------------+---+-------
 \x488000000121 | 1 | one
 \x488000000221 | 2 | two
 \x488000000321 | 3 | three
 \x488000000421 | 4 | four
(4 rows)

drop table ybctid_test_with_pk;
-- without pk
create table ybctid_test_without_pk(k int, v text) with (colocation=true);
insert into ybctid_test_without_pk values (1, 'one'), (2, 'two'), (3, 'three'), (4, 'four');
CREATE OR REPLACE FUNCTION rows_by_ybctid() RETURNS TABLE (kp int, vp text)
AS $$
DECLARE rowid bytea;
BEGIN
  FOR rowid IN select ybctid from ybctid_test_without_pk order by k
  LOOP
    RETURN QUERY select k, v from ybctid_test_without_pk where ybctid = rowid;
  END LOOP;
END
$$ LANGUAGE plpgsql;
select * from rows_by_ybctid();
 kp |  vp
----+-------
  1 | one
  2 | two
  3 | three
  4 | four
(4 rows)

drop function rows_by_ybctid;
drop table ybctid_test_without_pk;
