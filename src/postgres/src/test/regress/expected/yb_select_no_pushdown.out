-- Test disabled expression pushdown in scans
SET yb_enable_expression_pushdown to off;
-- For environment independent output of timestamps
SET timezone to 'UTC';
CREATE TABLE pushdown_test(k int primary key, i1 int, t1 text, ts1 timestamp, ts2 timestamp with time zone, r1 numrange, a1 int[]);
INSERT INTO pushdown_test VALUES (1, 1, 'value1', '2021-11-11 11:11:11', '2021-11-11 11:11:11+1', '[0, 0)', '{1, NULL, 42}');
INSERT INTO pushdown_test VALUES (2, 202, 'value2', NULL, '2222-02-22 22:22:22-7', numrange(-1, NULL), '{-2, 2, 122, -122}');
-- Simple expression (column = constant)
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE i1 = 1;
        QUERY PLAN
---------------------------
 Seq Scan on pushdown_test
   Filter: (i1 = 1)
(2 rows)

EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE t1 LIKE 'val%';
           QUERY PLAN
--------------------------------
 Seq Scan on pushdown_test
   Filter: (t1 ~~ 'val%'::text)
(2 rows)

EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE ts1 < '2021-11-11 11:11:12';
                                QUERY PLAN
---------------------------------------------------------------------------
 Seq Scan on pushdown_test
   Filter: (ts1 < 'Thu Nov 11 11:11:12 2021'::timestamp without time zone)
(2 rows)

EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE ts2 < '2021-11-11 11:11:10Z';
                                 QUERY PLAN
----------------------------------------------------------------------------
 Seq Scan on pushdown_test
   Filter: (ts2 < 'Thu Nov 11 11:11:10 2021 UTC'::timestamp with time zone)
(2 rows)

SELECT * FROM pushdown_test WHERE i1 = 1;
 k | i1 |   t1   |           ts1            |             ts2              |  r1   |     a1
---+----+--------+--------------------------+------------------------------+-------+-------------
 1 |  1 | value1 | Thu Nov 11 11:11:11 2021 | Thu Nov 11 10:11:11 2021 UTC | empty | {1,NULL,42}
(1 row)

SELECT * FROM pushdown_test WHERE t1 LIKE 'val%';
 k | i1  |   t1   |           ts1            |             ts2              |  r1   |       a1
---+-----+--------+--------------------------+------------------------------+-------+-----------------
 1 |   1 | value1 | Thu Nov 11 11:11:11 2021 | Thu Nov 11 10:11:11 2021 UTC | empty | {1,NULL,42}
 2 | 202 | value2 |                          | Sat Feb 23 05:22:22 2222 UTC | [-1,) | {-2,2,122,-122}
(2 rows)

SELECT * FROM pushdown_test WHERE ts1 < '2021-11-11 11:11:12';
 k | i1 |   t1   |           ts1            |             ts2              |  r1   |     a1
---+----+--------+--------------------------+------------------------------+-------+-------------
 1 |  1 | value1 | Thu Nov 11 11:11:11 2021 | Thu Nov 11 10:11:11 2021 UTC | empty | {1,NULL,42}
(1 row)

SELECT * FROM pushdown_test WHERE ts2 < '2021-11-11 11:11:10Z';
 k | i1 |   t1   |           ts1            |             ts2              |  r1   |     a1
---+----+--------+--------------------------+------------------------------+-------+-------------
 1 |  1 | value1 | Thu Nov 11 11:11:11 2021 | Thu Nov 11 10:11:11 2021 UTC | empty | {1,NULL,42}
(1 row)

-- Simple function on one column
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE isfinite(ts1);
        QUERY PLAN
---------------------------
 Seq Scan on pushdown_test
   Filter: isfinite(ts1)
(2 rows)

SELECT * FROM pushdown_test WHERE isfinite(ts1);
 k | i1 |   t1   |           ts1            |             ts2              |  r1   |     a1
---+----+--------+--------------------------+------------------------------+-------+-------------
 1 |  1 | value1 | Thu Nov 11 11:11:11 2021 | Thu Nov 11 10:11:11 2021 UTC | empty | {1,NULL,42}
(1 row)

-- Simple function on multiple columns
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE left(t1, i1) = 'v';
               QUERY PLAN
----------------------------------------
 Seq Scan on pushdown_test
   Filter: ("left"(t1, i1) = 'v'::text)
(2 rows)

SELECT * FROM pushdown_test WHERE left(t1, i1) = 'v';
 k | i1 |   t1   |           ts1            |             ts2              |  r1   |     a1
---+----+--------+--------------------------+------------------------------+-------+-------------
 1 |  1 | value1 | Thu Nov 11 11:11:11 2021 | Thu Nov 11 10:11:11 2021 UTC | empty | {1,NULL,42}
(1 row)

-- Functions safe for pushdown (yb_safe_funcs_for_pushdown.c)
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE i1 < 10 + random() * 90;
                                             QUERY PLAN
-----------------------------------------------------------------------------------------------------
 Seq Scan on pushdown_test
   Filter: ((i1)::double precision < ('10'::double precision + (random() * '90'::double precision)))
(2 rows)

SELECT * FROM pushdown_test WHERE i1 < 10 + random() * 90;
 k | i1 |   t1   |           ts1            |             ts2              |  r1   |     a1
---+----+--------+--------------------------+------------------------------+-------+-------------
 1 |  1 | value1 | Thu Nov 11 11:11:11 2021 | Thu Nov 11 10:11:11 2021 UTC | empty | {1,NULL,42}
(1 row)

-- Null test
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE ts1 IS NULL;
        QUERY PLAN
---------------------------
 Seq Scan on pushdown_test
   Filter: (ts1 IS NULL)
(2 rows)

EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE ts1 IS NOT NULL;
         QUERY PLAN
-----------------------------
 Seq Scan on pushdown_test
   Filter: (ts1 IS NOT NULL)
(2 rows)

SELECT * FROM pushdown_test WHERE ts1 IS NULL;
 k | i1  |   t1   | ts1 |             ts2              |  r1   |       a1
---+-----+--------+-----+------------------------------+-------+-----------------
 2 | 202 | value2 |     | Sat Feb 23 05:22:22 2222 UTC | [-1,) | {-2,2,122,-122}
(1 row)

SELECT * FROM pushdown_test WHERE ts1 IS NOT NULL;
 k | i1 |   t1   |           ts1            |             ts2              |  r1   |     a1
---+----+--------+--------------------------+------------------------------+-------+-------------
 1 |  1 | value1 | Thu Nov 11 11:11:11 2021 | Thu Nov 11 10:11:11 2021 UTC | empty | {1,NULL,42}
(1 row)

-- Boolean expression
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE i1 = 1 OR NOT isfinite(ts1) AND ts2 > '2001-01-01 01:01:01-7'::timestamptz;
                                                     QUERY PLAN
--------------------------------------------------------------------------------------------------------------------
 Seq Scan on pushdown_test
   Filter: ((i1 = 1) OR ((NOT isfinite(ts1)) AND (ts2 > 'Mon Jan 01 08:01:01 2001 UTC'::timestamp with time zone)))
(2 rows)

SELECT * FROM pushdown_test WHERE i1 = 1 OR NOT isfinite(ts1) AND ts2 > '2001-01-01 01:01:01-7'::timestamptz;
 k | i1 |   t1   |           ts1            |             ts2              |  r1   |     a1
---+----+--------+--------------------------+------------------------------+-------+-------------
 1 |  1 | value1 | Thu Nov 11 11:11:11 2021 | Thu Nov 11 10:11:11 2021 UTC | empty | {1,NULL,42}
(1 row)

-- Case expression
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE CASE WHEN i1 % 2 = 0 THEN ts1 < '2021-11-12' WHEN i1 % 2 = 1 THEN ts2 > '2022-01-01 00:00:00-7' END;
                                                                                                        QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on pushdown_test
   Filter: CASE WHEN ((i1 % 2) = 0) THEN (ts1 < 'Fri Nov 12 00:00:00 2021'::timestamp without time zone) WHEN ((i1 % 2) = 1) THEN (ts2 > 'Sat Jan 01 07:00:00 2022 UTC'::timestamp with time zone) ELSE NULL::boolean END
(2 rows)

EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE CASE i1 % 2 WHEN 0 THEN ts1 < '2021-11-12' WHEN 1 THEN ts2 > '2022-01-01 00:00:00-7' END;
                                                                                               QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on pushdown_test
   Filter: CASE (i1 % 2) WHEN 0 THEN (ts1 < 'Fri Nov 12 00:00:00 2021'::timestamp without time zone) WHEN 1 THEN (ts2 > 'Sat Jan 01 07:00:00 2022 UTC'::timestamp with time zone) ELSE NULL::boolean END
(2 rows)

SELECT * FROM pushdown_test WHERE CASE WHEN i1 % 2 = 0 THEN ts1 < '2021-11-12' WHEN i1 % 2 = 1 THEN ts2 > '2022-01-01 00:00:00-7' END;
 k | i1 | t1 | ts1 | ts2 | r1 | a1
---+----+----+-----+-----+----+----
(0 rows)

-- Aggregates
EXPLAIN (COSTS FALSE) SELECT count(*) FROM pushdown_test;
           QUERY PLAN
---------------------------------
 Finalize Aggregate
   ->  Seq Scan on pushdown_test
         Partial Aggregate: true
(3 rows)

EXPLAIN (COSTS FALSE) SELECT count(*) FROM pushdown_test WHERE i1 = 1;
           QUERY PLAN
---------------------------------
 Aggregate
   ->  Seq Scan on pushdown_test
         Filter: (i1 = 1)
(3 rows)

SELECT count(*) FROM pushdown_test;
 count
-------
     2
(1 row)

SELECT count(*) FROM pushdown_test WHERE i1 = 1;
 count
-------
     1
(1 row)

-- Parameter
PREPARE s AS SELECT * FROM pushdown_test WHERE i1 = $1;
EXPLAIN (COSTS FALSE) EXECUTE s(1);
        QUERY PLAN
---------------------------
 Seq Scan on pushdown_test
   Filter: (i1 = 1)
(2 rows)

EXECUTE s(1);
 k | i1 |   t1   |           ts1            |             ts2              |  r1   |     a1
---+----+--------+--------------------------+------------------------------+-------+-------------
 1 |  1 | value1 | Thu Nov 11 11:11:11 2021 | Thu Nov 11 10:11:11 2021 UTC | empty | {1,NULL,42}
(1 row)

DEALLOCATE s;
-- Join
CREATE TABLE pushdown_lookup(k int primary key, tag text);
INSERT INTO pushdown_lookup VALUES (1, 'foo'), (2, 'bar'), (3, 'baz');
EXPLAIN (COSTS FALSE) SELECT t.t1 FROM pushdown_test t, pushdown_lookup l WHERE t.k = l.k AND l.tag = 'foo';
                           QUERY PLAN
----------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t.k = l.k)
   ->  Seq Scan on pushdown_lookup l
         Filter: (tag = 'foo'::text)
   ->  Index Scan using pushdown_test_pkey on pushdown_test t
         Index Cond: (k = ANY (ARRAY[l.k, $1, $2, ..., $1023]))
(6 rows)

SELECT t.t1 FROM pushdown_test t, pushdown_lookup l WHERE t.k = l.k AND l.tag = 'foo';
   t1
--------
 value1
(1 row)

-- Negative test cases (expressions should not be pushed down)
-- Not immutable functions
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE t1 = concat('value', i1::text);
                  QUERY PLAN
----------------------------------------------
 Seq Scan on pushdown_test
   Filter: (t1 = concat('value', (i1)::text))
(2 rows)

SELECT * FROM pushdown_test WHERE t1 = concat('value', i1::text);
 k | i1 |   t1   |           ts1            |             ts2              |  r1   |     a1
---+----+--------+--------------------------+------------------------------+-------+-------------
 1 |  1 | value1 | Thu Nov 11 11:11:11 2021 | Thu Nov 11 10:11:11 2021 UTC | empty | {1,NULL,42}
(1 row)

-- Index scan
CREATE INDEX pushdown_test_i1 ON pushdown_test(i1);
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE i1 = 1;
                     QUERY PLAN
----------------------------------------------------
 Index Scan using pushdown_test_i1 on pushdown_test
   Index Cond: (i1 = 1)
(2 rows)

EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE i1 = 1 AND t1 = 'value1';
                     QUERY PLAN
----------------------------------------------------
 Index Scan using pushdown_test_i1 on pushdown_test
   Index Cond: (i1 = 1)
   Filter: (t1 = 'value1'::text)
(3 rows)

SELECT * FROM pushdown_test WHERE i1 = 1;
 k | i1 |   t1   |           ts1            |             ts2              |  r1   |     a1
---+----+--------+--------------------------+------------------------------+-------+-------------
 1 |  1 | value1 | Thu Nov 11 11:11:11 2021 | Thu Nov 11 10:11:11 2021 UTC | empty | {1,NULL,42}
(1 row)

SELECT * FROM pushdown_test WHERE i1 = 1 AND t1 = 'value1';
 k | i1 |   t1   |           ts1            |             ts2              |  r1   |     a1
---+----+--------+--------------------------+------------------------------+-------+-------------
 1 |  1 | value1 | Thu Nov 11 11:11:11 2021 | Thu Nov 11 10:11:11 2021 UTC | empty | {1,NULL,42}
(1 row)

-- Records, ranges, arrays
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE isempty(r1);
        QUERY PLAN
---------------------------
 Seq Scan on pushdown_test
   Filter: isempty(r1)
(2 rows)

EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE a1[2] = 2;
        QUERY PLAN
---------------------------
 Seq Scan on pushdown_test
   Filter: (a1[2] = 2)
(2 rows)

SELECT * FROM pushdown_test WHERE isempty(r1);
 k | i1 |   t1   |           ts1            |             ts2              |  r1   |     a1
---+----+--------+--------------------------+------------------------------+-------+-------------
 1 |  1 | value1 | Thu Nov 11 11:11:11 2021 | Thu Nov 11 10:11:11 2021 UTC | empty | {1,NULL,42}
(1 row)

SELECT * FROM pushdown_test WHERE a1[2] = 2;
 k | i1  |   t1   | ts1 |             ts2              |  r1   |       a1
---+-----+--------+-----+------------------------------+-------+-----------------
 2 | 202 | value2 |     | Sat Feb 23 05:22:22 2222 UTC | [-1,) | {-2,2,122,-122}
(1 row)

-- Pseudo types
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_test WHERE num_nulls(variadic a1) > 0;
               QUERY PLAN
----------------------------------------
 Seq Scan on pushdown_test
   Filter: (num_nulls(VARIADIC a1) > 0)
(2 rows)

SELECT * FROM pushdown_test WHERE num_nulls(variadic a1) > 0;
 k | i1 |   t1   |           ts1            |             ts2              |  r1   |     a1
---+----+--------+--------------------------+------------------------------+-------+-------------
 1 |  1 | value1 | Thu Nov 11 11:11:11 2021 | Thu Nov 11 10:11:11 2021 UTC | empty | {1,NULL,42}
(1 row)

-- Composite datatype
CREATE TYPE pair AS (first int, second int);
CREATE TABLE pushdown_composite(k int primary key, v pair);
INSERT INTO pushdown_composite VALUES (1, (2, 3));
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_composite WHERE (v).first = 2;
           QUERY PLAN
--------------------------------
 Seq Scan on pushdown_composite
   Filter: ((v).first = 2)
(2 rows)

SELECT * FROM pushdown_composite WHERE (v).first = 2;
 k |   v
---+-------
 1 | (2,3)
(1 row)

-- Enum datatype
CREATE TYPE color AS ENUM('red', 'green', 'blue');
CREATE TABLE pushdown_enum(k int, c color, x int);
INSERT INTO pushdown_enum VALUES (1, 'red', 255);
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_enum WHERE c = 'red';
          QUERY PLAN
------------------------------
 Seq Scan on pushdown_enum
   Filter: (c = 'red'::color)
(2 rows)

EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_enum WHERE c::text = 'red';
             QUERY PLAN
-------------------------------------
 Seq Scan on pushdown_enum
   Filter: ((c)::text = 'red'::text)
(2 rows)

SELECT * FROM pushdown_enum WHERE c = 'red';
 k |  c  |  x
---+-----+-----
 1 | red | 255
(1 row)

SELECT * FROM pushdown_enum WHERE c::text = 'red';
 k |  c  |  x
---+-----+-----
 1 | red | 255
(1 row)

-- Collation
CREATE TABLE pushdown_collation(k int primary key, v text COLLATE "ucs_basic");
INSERT INTO pushdown_collation VALUES (1, 'foo');
-- Do not pushdown operation on column with collation other than C
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_collation WHERE v = 'foo';
           QUERY PLAN
--------------------------------
 Seq Scan on pushdown_collation
   Filter: (v = 'foo'::text)
(2 rows)

SELECT * FROM pushdown_collation WHERE v = 'foo';
 k |  v
---+-----
 1 | foo
(1 row)

CREATE TABLE pushdown_index(k1 int, k2 int, v1 int, v2 int, v3 int, v4 int, v5 text, primary key (k1, k2));
CREATE INDEX pushdown_index_v1_v2_v3v4_idx ON pushdown_index(v1, v2, (v3 + v4) ASC);
INSERT INTO pushdown_index VALUES (1, 1, 1, 1, 1, 0, 'row 1');
INSERT INTO pushdown_index VALUES (1, 2, 3, 4, 5, 6, 'row 2');
INSERT INTO pushdown_index VALUES (1, 20, 20, 20, 20, 20, 'row 3');
INSERT INTO pushdown_index VALUES (2, 1, 1, 2, 3, 4, 'row 4');
INSERT INTO pushdown_index VALUES (2, 2, 1, 3, 2, 1, 'row 5');
INSERT INTO pushdown_index VALUES (2, 20, 1, 20, 40, 50, 'row 6');
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_index WHERE k1 = 1 AND k2 = 2;
                       QUERY PLAN
--------------------------------------------------------
 Index Scan using pushdown_index_pkey on pushdown_index
   Index Cond: ((k1 = 1) AND (k2 = 2))
(2 rows)

EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_index WHERE k1 = 1 AND k2/10 = 0;
                       QUERY PLAN
--------------------------------------------------------
 Index Scan using pushdown_index_pkey on pushdown_index
   Index Cond: (k1 = 1)
   Filter: ((k2 / 10) = 0)
(3 rows)

EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_index WHERE k1 = 1 AND k2 = v1;
                       QUERY PLAN
--------------------------------------------------------
 Index Scan using pushdown_index_pkey on pushdown_index
   Index Cond: (k1 = 1)
   Filter: (k2 = v1)
(3 rows)

EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_index WHERE k1 = 1 AND k2 = v1 AND CASE v2 % 2 WHEN 0 THEN v3 < 0 WHEN 1 THEN v3 > 0 END;
                                                QUERY PLAN
----------------------------------------------------------------------------------------------------------
 Index Scan using pushdown_index_pkey on pushdown_index
   Index Cond: (k1 = 1)
   Filter: ((k2 = v1) AND CASE (v2 % 2) WHEN 0 THEN (v3 < 0) WHEN 1 THEN (v3 > 0) ELSE NULL::boolean END)
(3 rows)

EXPLAIN (COSTS FALSE) SELECT v2 FROM pushdown_index WHERE v1 = 1;
                              QUERY PLAN
-----------------------------------------------------------------------
 Index Only Scan using pushdown_index_v1_v2_v3v4_idx on pushdown_index
   Index Cond: (v1 = 1)
(2 rows)

EXPLAIN (COSTS FALSE) SELECT v2 FROM pushdown_index WHERE v1 = 1 AND v2 > v1;
                              QUERY PLAN
-----------------------------------------------------------------------
 Index Only Scan using pushdown_index_v1_v2_v3v4_idx on pushdown_index
   Index Cond: (v1 = 1)
   Filter: (v2 > v1)
(3 rows)

EXPLAIN (COSTS FALSE) SELECT v2, v3, v4 FROM pushdown_index WHERE v1 = 1 AND v2 > v1;
                            QUERY PLAN
------------------------------------------------------------------
 Index Scan using pushdown_index_v1_v2_v3v4_idx on pushdown_index
   Index Cond: (v1 = 1)
   Filter: (v2 > v1)
(3 rows)

EXPLAIN (COSTS FALSE) SELECT v2 FROM pushdown_index WHERE v1 = 1 AND v2 = v3 + v4;
                            QUERY PLAN
------------------------------------------------------------------
 Index Scan using pushdown_index_v1_v2_v3v4_idx on pushdown_index
   Index Cond: (v1 = 1)
   Filter: (v2 = (v3 + v4))
(3 rows)

EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_index WHERE v1 = 1 AND v2 > v1 AND v3 > v2;
                            QUERY PLAN
------------------------------------------------------------------
 Index Scan using pushdown_index_v1_v2_v3v4_idx on pushdown_index
   Index Cond: (v1 = 1)
   Filter: ((v2 > v1) AND (v3 > v2))
(3 rows)

EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_index WHERE v1 = 1 AND v2 > v1 AND v3 > v2 AND CASE v3 % 2 WHEN 0 THEN v4 < 0 WHEN 1 THEN v4 > 0 END;
                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------
 Index Scan using pushdown_index_v1_v2_v3v4_idx on pushdown_index
   Index Cond: (v1 = 1)
   Filter: ((v2 > v1) AND (v3 > v2) AND CASE (v3 % 2) WHEN 0 THEN (v4 < 0) WHEN 1 THEN (v4 > 0) ELSE NULL::boolean END)
(3 rows)

SELECT * FROM pushdown_index WHERE k1 = 1 AND k2 = 2;
 k1 | k2 | v1 | v2 | v3 | v4 |  v5
----+----+----+----+----+----+-------
  1 |  2 |  3 |  4 |  5 |  6 | row 2
(1 row)

SELECT * FROM pushdown_index WHERE k1 = 1 AND k2/10 = 0;
 k1 | k2 | v1 | v2 | v3 | v4 |  v5
----+----+----+----+----+----+-------
  1 |  1 |  1 |  1 |  1 |  0 | row 1
  1 |  2 |  3 |  4 |  5 |  6 | row 2
(2 rows)

SELECT * FROM pushdown_index WHERE k1 = 1 AND k2 = v1;
 k1 | k2 | v1 | v2 | v3 | v4 |  v5
----+----+----+----+----+----+-------
  1 |  1 |  1 |  1 |  1 |  0 | row 1
  1 | 20 | 20 | 20 | 20 | 20 | row 3
(2 rows)

SELECT * FROM pushdown_index WHERE k1 = 1 AND k2 = v1 AND CASE v2 % 2 WHEN 0 THEN v3 < 0 WHEN 1 THEN v3 > 0 END;
 k1 | k2 | v1 | v2 | v3 | v4 |  v5
----+----+----+----+----+----+-------
  1 |  1 |  1 |  1 |  1 |  0 | row 1
(1 row)

SELECT v2 FROM pushdown_index WHERE v1 = 1;
 v2
----
  1
  2
  3
 20
(4 rows)

SELECT v2 FROM pushdown_index WHERE v1 = 1 AND v2 > v1;
 v2
----
  2
  3
 20
(3 rows)

SELECT v2, v3, v4 FROM pushdown_index WHERE v1 = 1 AND v2 > v1;
 v2 | v3 | v4
----+----+----
  2 |  3 |  4
  3 |  2 |  1
 20 | 40 | 50
(3 rows)

SELECT v2 FROM pushdown_index WHERE v1 = 1 AND v2 = v3 + v4;
 v2
----
  1
  3
(2 rows)

SELECT * FROM pushdown_index WHERE v1 = 1 AND v2 > v1 AND v3 > v2;
 k1 | k2 | v1 | v2 | v3 | v4 |  v5
----+----+----+----+----+----+-------
  2 |  1 |  1 |  2 |  3 |  4 | row 4
  2 | 20 |  1 | 20 | 40 | 50 | row 6
(2 rows)

SELECT * FROM pushdown_index WHERE v1 = 1 AND v2 > v1 AND v3 > v2 AND CASE v3 % 2 WHEN 0 THEN v4 < 0 WHEN 1 THEN v4 > 0 END;
 k1 | k2 | v1 | v2 | v3 | v4 |  v5
----+----+----+----+----+----+-------
  2 |  1 |  1 |  2 |  3 |  4 | row 4
(1 row)

PREPARE pk_param AS SELECT * FROM pushdown_index WHERE k1 = 1 AND k2 = v1 + $1;
EXPLAIN (COSTS FALSE) EXECUTE pk_param(0);
                       QUERY PLAN
--------------------------------------------------------
 Index Scan using pushdown_index_pkey on pushdown_index
   Index Cond: (k1 = 1)
   Filter: (k2 = (v1 + 0))
(3 rows)

EXECUTE pk_param(0);
 k1 | k2 | v1 | v2 | v3 | v4 |  v5
----+----+----+----+----+----+-------
  1 |  1 |  1 |  1 |  1 |  0 | row 1
  1 | 20 | 20 | 20 | 20 | 20 | row 3
(2 rows)

DEALLOCATE pk_param;
PREPARE si_param AS SELECT * FROM pushdown_index WHERE v1 = 1 AND v2 > v1 + $1 AND v3 > v2 + $2;
EXPLAIN (COSTS FALSE) EXECUTE si_param(0, 0);
                            QUERY PLAN
------------------------------------------------------------------
 Index Scan using pushdown_index_v1_v2_v3v4_idx on pushdown_index
   Index Cond: (v1 = 1)
   Filter: ((v2 > (v1 + 0)) AND (v3 > (v2 + 0)))
(3 rows)

EXECUTE si_param(0, 0);
 k1 | k2 | v1 | v2 | v3 | v4 |  v5
----+----+----+----+----+----+-------
  2 |  1 |  1 |  2 |  3 |  4 | row 4
  2 | 20 |  1 | 20 | 40 | 50 | row 6
(2 rows)

DEALLOCATE si_param;
-- Index scan with storage filter on a system table
EXPLAIN (COSTS FALSE) SELECT relname, relkind FROM pg_class WHERE relname LIKE 'pushdown_c%';
                                   QUERY PLAN
--------------------------------------------------------------------------------
 Index Scan using pg_class_relname_nsp_index on pg_class
   Index Cond: ((relname >= 'pushdown'::text) AND (relname < 'pushdowo'::text))
   Filter: (relname ~~ 'pushdown_c%'::text)
(3 rows)

SELECT relname, relkind FROM pg_class WHERE relname LIKE 'pushdown_c%';
         relname         | relkind
-------------------------+---------
 pushdown_collation      | r
 pushdown_collation_pkey | i
 pushdown_composite      | r
 pushdown_composite_pkey | i
(4 rows)

-- Index scan with storage filter on a range table
CREATE TABLE pushdown_range(k1 text, v1 int, v2 int, primary key(k1 asc)) SPLIT AT VALUES (('2 '), ('3 '), ('4 '), ('5 '), ('6 '), ('7 '), ('8 '), ('9 '));
INSERT INTO pushdown_range SELECT i::text, i, i FROM  generate_series(1,100) AS i;
EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_range WHERE k1 IN ('11', '17', '33', '42', '87') AND (v1 = 17 OR v2 = 87);
                       QUERY PLAN
--------------------------------------------------------
 Index Scan using pushdown_range_pkey on pushdown_range
   Index Cond: (k1 = ANY ('{11,17,33,42,87}'::text[]))
   Filter: ((v1 = 17) OR (v2 = 87))
(3 rows)

SELECT * FROM pushdown_range WHERE k1 IN ('11', '17', '33', '42', '87') AND (v1 = 17 OR v2 = 87);
 k1 | v1 | v2
----+----+----
 17 | 17 | 17
 87 | 87 | 87
(2 rows)

EXPLAIN (COSTS FALSE) SELECT * FROM pushdown_range WHERE v1 > 5 AND v2 < 33 ORDER BY k1;
                       QUERY PLAN
--------------------------------------------------------
 Index Scan using pushdown_range_pkey on pushdown_range
   Filter: ((v1 > 5) AND (v2 < 33))
(2 rows)

SELECT * FROM pushdown_range WHERE v1 > 5 AND v2 < 33 ORDER BY k1;
 k1 | v1 | v2
----+----+----
 10 | 10 | 10
 11 | 11 | 11
 12 | 12 | 12
 13 | 13 | 13
 14 | 14 | 14
 15 | 15 | 15
 16 | 16 | 16
 17 | 17 | 17
 18 | 18 | 18
 19 | 19 | 19
 20 | 20 | 20
 21 | 21 | 21
 22 | 22 | 22
 23 | 23 | 23
 24 | 24 | 24
 25 | 25 | 25
 26 | 26 | 26
 27 | 27 | 27
 28 | 28 | 28
 29 | 29 | 29
 30 | 30 | 30
 31 | 31 | 31
 32 | 32 | 32
 6  |  6 |  6
 7  |  7 |  7
 8  |  8 |  8
 9  |  9 |  9
(27 rows)

-- Plan for the lateral join leverages PARAM_EXEC params
CREATE TABLE tlateral1 (a int, b int, c varchar);
INSERT INTO tlateral1 SELECT i, i % 25, to_char(i % 4, 'FM0000') FROM generate_series(0, 599, 2) i;
CREATE TABLE tlateral2 (a int, b int, c varchar);
INSERT INTO tlateral2 SELECT i % 25, i, to_char(i % 4, 'FM0000') FROM generate_series(0, 599, 3) i;
ANALYZE tlateral1, tlateral2;
EXPLAIN (COSTS FALSE) SELECT * FROM tlateral1 t1 LEFT JOIN LATERAL (SELECT t2.a AS t2a, t2.c AS t2c, t2.b AS t2b, t3.b AS t3b, least(t1.a,t2.a,t3.b) FROM tlateral1 t2 JOIN tlateral2 t3 ON (t2.a = t3.b AND t2.c = t3.c)) ss ON t1.a = ss.t2a WHERE t1.b = 0 ORDER BY t1.a;
                                 QUERY PLAN
----------------------------------------------------------------------------
 Sort
   Sort Key: t1.a
   ->  Nested Loop Left Join
         ->  Seq Scan on tlateral1 t1
               Filter: (b = 0)
         ->  Hash Join
               Hash Cond: ((t2.a = t3.b) AND ((t2.c)::text = (t3.c)::text))
               ->  Seq Scan on tlateral1 t2
                     Filter: (t1.a = a)
               ->  Hash
                     ->  Seq Scan on tlateral2 t3
(11 rows)

SELECT * FROM tlateral1 t1 LEFT JOIN LATERAL (SELECT t2.a AS t2a, t2.c AS t2c, t2.b AS t2b, t3.b AS t3b, least(t1.a,t2.a,t3.b) FROM tlateral1 t2 JOIN tlateral2 t3 ON (t2.a = t3.b AND t2.c = t3.c)) ss ON t1.a = ss.t2a WHERE t1.b = 0 ORDER BY t1.a;
  a  | b |  c   | t2a | t2c  | t2b | t3b | least
-----+---+------+-----+------+-----+-----+-------
   0 | 0 | 0000 |   0 | 0000 |   0 |   0 |     0
  50 | 0 | 0002 |     |      |     |     |
 100 | 0 | 0000 |     |      |     |     |
 150 | 0 | 0002 | 150 | 0002 |   0 | 150 |   150
 200 | 0 | 0000 |     |      |     |     |
 250 | 0 | 0002 |     |      |     |     |
 300 | 0 | 0000 | 300 | 0000 |   0 | 300 |   300
 350 | 0 | 0002 |     |      |     |     |
 400 | 0 | 0000 |     |      |     |     |
 450 | 0 | 0002 | 450 | 0002 |   0 | 450 |   450
 500 | 0 | 0000 |     |      |     |     |
 550 | 0 | 0002 |     |      |     |     |
(12 rows)

-- Test PARAM_EXEC pushdown when parameters are coming from a subplan
CREATE TABLE tmaster(k int primary key, v1 int, v2 int);
INSERT INTO tmaster VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3);
CREATE TABLE tsub(k int primary key, v1 int, v2 int);
INSERT INTO tsub VALUES (1, 2, 3), (4, 5, 6);
EXPLAIN (COSTS FALSE) SELECT * FROM tmaster WHERE v1 = (SELECT v1 FROM tsub WHERE v2 = 3);
         QUERY PLAN
----------------------------
 Seq Scan on tmaster
   Filter: (v1 = $0)
   InitPlan 1 (returns $0)
     ->  Seq Scan on tsub
           Filter: (v2 = 3)
(5 rows)

SELECT * FROM tmaster WHERE v1 = (SELECT v1 FROM tsub WHERE v2 = 3);
 k | v1 | v2
---+----+----
 2 |  2 |  2
(1 row)

-- Test rescan of a subquery with pushdown of PARAM_EXEC parameters
CREATE TABLE tidxrescan1(k1 int, k2 int, v1 int, v2 int, primary key (k1 hash, k2 asc));
CREATE TABLE tidxrescan2(k1 int primary key, v1 int);
CREATE TABLE tidxrescan3(k1 int, v1 int);
CREATE INDEX ON tidxrescan3(k1) INCLUDE (v1);
INSERT INTO tidxrescan1 VALUES (1,1,2,3), (1,2,4,5);
INSERT INTO tidxrescan2 VALUES (1,2), (2,2);
INSERT INTO tidxrescan3 VALUES (1,2), (2,2);
EXPLAIN (COSTS FALSE) SELECT t1.k2, t1.v1, (SELECT t2.v1 FROM tidxrescan2 t2 WHERE t2.k1 = t1.k2 AND t2.v1 = t1.v1) FROM tidxrescan1 t1 WHERE t1.k1 = 1;
                         QUERY PLAN
-------------------------------------------------------------
 Index Scan using tidxrescan1_pkey on tidxrescan1 t1
   Index Cond: (k1 = 1)
   SubPlan 1
     ->  Index Scan using tidxrescan2_pkey on tidxrescan2 t2
           Index Cond: (k1 = t1.k2)
           Filter: (v1 = t1.v1)
(6 rows)

SELECT t1.k2, t1.v1, (SELECT t2.v1 FROM tidxrescan2 t2 WHERE t2.k1 = t1.k2 AND t2.v1 = t1.v1) FROM tidxrescan1 t1 WHERE t1.k1 = 1;
 k2 | v1 | v1
----+----+----
  1 |  2 |  2
  2 |  4 |
(2 rows)

SELECT t1.k2, t1.v1, (SELECT t2.v1 FROM tidxrescan2 t2 WHERE t2.k1 = t1.k2 AND t2.v1 = t1.v1) FROM tidxrescan1 t1 WHERE t1.k1 = 1 ORDER BY t1.k2 DESC;
 k2 | v1 | v1
----+----+----
  2 |  4 |
  1 |  2 |  2
(2 rows)

EXPLAIN (COSTS FALSE) SELECT t1.k2, t1.v1, (SELECT t2.v1 FROM tidxrescan3 t2 WHERE t2.k1 = t1.k2 AND t2.v1 = t1.v1) FROM tidxrescan1 t1 WHERE t1.k1 = 1;
                              QUERY PLAN
-----------------------------------------------------------------------
 Index Scan using tidxrescan1_pkey on tidxrescan1 t1
   Index Cond: (k1 = 1)
   SubPlan 1
     ->  Index Only Scan using tidxrescan3_k1_v1_idx on tidxrescan3 t2
           Index Cond: (k1 = t1.k2)
           Filter: (v1 = t1.v1)
(6 rows)

SELECT t1.k2, t1.v1, (SELECT t2.v1 FROM tidxrescan3 t2 WHERE t2.k1 = t1.k2 AND t2.v1 = t1.v1) FROM tidxrescan1 t1 WHERE t1.k1 = 1;
 k2 | v1 | v1
----+----+----
  1 |  2 |  2
  2 |  4 |
(2 rows)

SELECT t1.k2, t1.v1, (SELECT t2.v1 FROM tidxrescan3 t2 WHERE t2.k1 = t1.k2 AND t2.v1 = t1.v1) FROM tidxrescan1 t1 WHERE t1.k1 = 1 ORDER BY t1.k2 DESC;
 k2 | v1 | v1
----+----+----
  2 |  4 |
  1 |  2 |  2
(2 rows)

DROP TABLE tidxrescan1;
DROP TABLE tidxrescan2;
DROP TABLE tidxrescan3;
DROP TABLE tmaster;
DROP TABLE tsub;
DROP TABLE tlateral1;
DROP TABLE tlateral2;
DROP TABLE pushdown_range;
DROP TABLE pushdown_index;
DROP TABLE pushdown_test;
DROP TABLE pushdown_lookup;
DROP TABLE pushdown_composite;
DROP TABLE pushdown_enum;
DROP TABLE pushdown_collation;
DROP TYPE pair;
DROP TYPE color;
