--
-- SCHEMA
--
-- Create 2 schemas with table of the same name in each.
CREATE SCHEMA S1;
CREATE SCHEMA S2;
CREATE TABLE S1.TBL (a1 int PRIMARY KEY);
CREATE TABLE S2.TBL (a2 text PRIMARY KEY);
-- Insert values into the tables and verify both can be queried.
INSERT INTO S1.TBL VALUES (1);
INSERT INTO S2.TBL VALUES ('a');
SELECT * FROM S1.TBL;
 a1
----
  1
(1 row)

SELECT * FROM S2.TBL;
 a2
----
 a
(1 row)

-- Drop one table and verify the other still exists.
DROP TABLE S1.TBL;
SELECT * FROM S2.TBL;
 a2
----
 a
(1 row)

DROP TABLE S2.TBL;
-- Test ALTER TABLE [IF EXISTS].. SET SCHEMA..
CREATE TABLE S1.TBL2 (a1 int PRIMARY KEY, a2 int);
CREATE INDEX IDX2 ON S1.TBL2(a2);
INSERT INTO S1.TBL2 VALUES (2, 2);
SELECT * FROM S1.TBL2;
 a1 | a2
----+----
  2 |  2
(1 row)

\d S1.TBL2;
                  Table "s1.tbl2"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 a1     | integer |           | not null |
 a2     | integer |           |          |
Indexes:
    "tbl2_pkey" PRIMARY KEY, lsm (a1 HASH)
    "idx2" lsm (a2 HASH)

ALTER TABLE S1.TBL2 SET SCHEMA S2;
SELECT * FROM S1.TBL2;
ERROR:  relation "s1.tbl2" does not exist
LINE 1: SELECT * FROM S1.TBL2;
                      ^
SELECT * FROM S2.TBL2;
 a1 | a2
----+----
  2 |  2
(1 row)

\d S2.TBL2;
                  Table "s2.tbl2"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 a1     | integer |           | not null |
 a2     | integer |           |          |
Indexes:
    "tbl2_pkey" PRIMARY KEY, lsm (a1 HASH)
    "idx2" lsm (a2 HASH)

\d S2.IDX2;
           Index "s2.idx2"
 Column |  Type   | Key? | Definition
--------+---------+------+------------
 a2     | integer | yes  | a2
lsm, for table "s2.tbl2"

DROP TABLE S2.TBL2;
SELECT * FROM S2.TBL2;
ERROR:  relation "s2.tbl2" does not exist
LINE 1: SELECT * FROM S2.TBL2;
                      ^
ALTER TABLE S2.TBL2 SET SCHEMA S1;            -- the table was deleted
ERROR:  relation "s2.tbl2" does not exist
ALTER TABLE IF EXISTS S2.TBL2 SET SCHEMA S1;  -- OK
NOTICE:  relation "tbl2" does not exist, skipping
-- for partitioned table
CREATE TABLE S1.P_TBL (k INT PRIMARY KEY, value TEXT)  PARTITION BY RANGE(k);
CREATE TABLE S1.P_TBL_1 PARTITION OF S1.P_TBL FOR VALUES FROM (1) TO (3);
CREATE TABLE S1.P_TBL_DEFAULT PARTITION OF S1.P_TBL DEFAULT;
CREATE INDEX P_TBL_K_IDX on S1.P_TBL(k);
ALTER TABLE S1.P_TBL SET SCHEMA S2;
\d+ S2.P_TBL
                               Partitioned table "s2.p_tbl"
 Column |  Type   | Collation | Nullable | Default | Storage  | Stats target | Description
--------+---------+-----------+----------+---------+----------+--------------+-------------
 k      | integer |           | not null |         | plain    |              |
 value  | text    |           |          |         | extended |              |
Partition key: RANGE (k)
Indexes:
    "p_tbl_pkey" PRIMARY KEY, lsm (k HASH)
    "p_tbl_k_idx" lsm (k HASH)
Partitions: s1.p_tbl_1 FOR VALUES FROM (1) TO (3),
            s1.p_tbl_default DEFAULT

DROP TABLE S2.P_TBL;
-- for temp table
CREATE TEMP TABLE TMP_TBL (a INT PRIMARY KEY);
ALTER TABLE TMP_TBL SET SCHEMA S2;
ERROR:  cannot move objects into or out of temporary schemas
DROP TABLE TMP_TBL;
-- Test ALTER SEQUENCE [IF EXISTS].. SET SCHEMA..
CREATE SEQUENCE S1.TEST_SEQ;
SELECT nextval('S1.TEST_SEQ');
 nextval
---------
       1
(1 row)

\d S1.TEST_SEQ;
                            Sequence "s1.test_seq"
  Type  | Start | Minimum |       Maximum       | Increment | Cycles? | Cache
--------+-------+---------+---------------------+-----------+---------+-------
 bigint |     1 |       1 | 9223372036854775807 |         1 | no      |   100

select c.relname as name, n.nspname as schema, r.rolname as owner
from pg_class as c
     inner join pg_namespace as n on c.relnamespace = n.oid
     inner join pg_roles as r on c.relowner = r.oid
where c.relname ~ 'test_seq';
   name   | schema |  owner
----------+--------+----------
 test_seq | s1     | yugabyte
(1 row)

ALTER SEQUENCE S1.TEST_SEQ SET SCHEMA S2;
SELECT nextval('S1.TEST_SEQ');
ERROR:  relation "s1.test_seq" does not exist
LINE 1: SELECT nextval('S1.TEST_SEQ');
                       ^
SELECT nextval('S2.TEST_SEQ');
 nextval
---------
       2
(1 row)

\d S1.TEST_SEQ;
\d S2.TEST_SEQ;
                            Sequence "s2.test_seq"
  Type  | Start | Minimum |       Maximum       | Increment | Cycles? | Cache
--------+-------+---------+---------------------+-----------+---------+-------
 bigint |     1 |       1 | 9223372036854775807 |         1 | no      |   100

ALTER SEQUENCE S2.TEST_SEQ OWNER TO CURRENT_USER;
ALTER SEQUENCE S2.TEST_SEQ OWNER TO SESSION_USER;
ALTER SEQUENCE S2.TEST_SEQ OWNER TO postgres;
select c.relname as name, n.nspname as schema, r.rolname as owner
from pg_class as c
     inner join pg_namespace as n on c.relnamespace = n.oid
     inner join pg_roles as r on c.relowner = r.oid
where c.relname ~ 'test_seq';
   name   | schema |  owner
----------+--------+----------
 test_seq | s2     | postgres
(1 row)

DROP SEQUENCE S2.TEST_SEQ;
SELECT * FROM S2.TEST_SEQ;
ERROR:  relation "s2.test_seq" does not exist
LINE 1: SELECT * FROM S2.TEST_SEQ;
                      ^
ALTER TABLE S2.TEST_SEQ SET SCHEMA S1;            -- the sequence was deleted
ERROR:  relation "s2.test_seq" does not exist
ALTER TABLE IF EXISTS S2.TEST_SEQ SET SCHEMA S1;  -- OK
NOTICE:  relation "test_seq" does not exist, skipping
-- verify yb_db_admin role can manage schemas like a superuser
CREATE SCHEMA test_ns_schema_other;
CREATE ROLE test_regress_user1;
SET SESSION AUTHORIZATION yb_db_admin;
ALTER SCHEMA test_ns_schema_other RENAME TO test_ns_schema_other_new;
ALTER SCHEMA test_ns_schema_other_new OWNER TO test_regress_user1;
DROP SCHEMA test_ns_schema_other_new;
-- verify that the objects were dropped
SELECT COUNT(*) FROM pg_class WHERE relnamespace =
    (SELECT oid FROM pg_namespace WHERE nspname = 'test_ns_schema_other_new');
 count
-------
     0
(1 row)

CREATE SCHEMA test_ns_schema_yb_db_admin;
ALTER SCHEMA test_ns_schema_yb_db_admin RENAME TO test_ns_schema_yb_db_admin_new;
ALTER SCHEMA test_ns_schema_yb_db_admin_new OWNER TO test_regress_user1;
DROP SCHEMA test_ns_schema_yb_db_admin_new;
-- verify that the objects were dropped
SELECT COUNT(*) FROM pg_class WHERE relnamespace =
    (SELECT oid FROM pg_namespace WHERE nspname = 'test_ns_schema_yb_db_admin_new');
 count
-------
     0
(1 row)
