create table t(k bigint primary key, v text);
create table t1(k bigint primary key, v text);
create table t2(k bigint primary key, v text);
create table lp (a char) partition by list (a);
create table lp_default partition of lp default;
create table lp_ef partition of lp for values in ('e', 'f');
create table lp_ad partition of lp for values in ('a', 'd');
create table lp_bc partition of lp for values in ('b', 'c');
create table lp_null partition of lp for values in (null);
insert into t values (2, 'value_t_2'), (3, 'value_t_3');
insert into t1 values (1, 'value_t1_1'), (2, 'value_t1_2');
insert into t2 values (3, 'value_t2_3'), (4, 'value_t2_4');
set yb_enable_base_scans_cost_model to true;
set yb_enable_parallel_append to false;
set parallel_setup_cost to 0;
set parallel_tuple_cost to 0;
-- simple union
explain (costs off)
select * from t1 union select * from t2;
         QUERY PLAN
----------------------------
 HashAggregate
   Group Key: t1.k, t1.v
   ->  Append
         ->  Seq Scan on t1
         ->  Seq Scan on t2
(5 rows)

select * from t1 union select * from t2;
 k |     v
---+------------
 4 | value_t2_4
 3 | value_t2_3
 1 | value_t1_1
 2 | value_t1_2
(4 rows)

-- simple union all
explain (costs off)
select * from t1 union all select * from t2;
      QUERY PLAN
----------------------
 Append
   ->  Seq Scan on t1
   ->  Seq Scan on t2
(3 rows)

select * from t1 union all select * from t2;
 k |     v
---+------------
 2 | value_t1_2
 1 | value_t1_1
 3 | value_t2_3
 4 | value_t2_4
(4 rows)

-- joins union
explain (costs off)
select * from t, t1 where t.k = t1.k union select * from t, t2 where t.k = t2.k;
               QUERY PLAN
-----------------------------------------
 HashAggregate
   Group Key: t.k, t.v, t1.k, t1.v
   ->  Append
         ->  Hash Join
               Hash Cond: (t.k = t1.k)
               ->  Seq Scan on t
               ->  Hash
                     ->  Seq Scan on t1
         ->  Hash Join
               Hash Cond: (t_1.k = t2.k)
               ->  Seq Scan on t t_1
               ->  Hash
                     ->  Seq Scan on t2
(13 rows)

select * from t, t1 where t.k = t1.k union select * from t, t2 where t.k = t2.k;
 k |     v     | k |     v
---+-----------+---+------------
 3 | value_t_3 | 3 | value_t2_3
 2 | value_t_2 | 2 | value_t1_2
(2 rows)

-- joins union all
explain (costs off)
select * from t, t1 where t.k = t1.k union all select * from t, t2 where t.k = t2.k;
            QUERY PLAN
-----------------------------------
 Append
   ->  Hash Join
         Hash Cond: (t.k = t1.k)
         ->  Seq Scan on t
         ->  Hash
               ->  Seq Scan on t1
   ->  Hash Join
         Hash Cond: (t_1.k = t2.k)
         ->  Seq Scan on t t_1
         ->  Hash
               ->  Seq Scan on t2
(11 rows)

select * from t, t1 where t.k = t1.k union all select * from t, t2 where t.k = t2.k;
 k |     v     | k |     v
---+-----------+---+------------
 2 | value_t_2 | 2 | value_t1_2
 3 | value_t_3 | 3 | value_t2_3
(2 rows)

-- partitioned table
explain (costs off)
select * from lp;
            QUERY PLAN
-----------------------------------
 Append
   ->  Seq Scan on lp_ad lp_1
   ->  Seq Scan on lp_bc lp_2
   ->  Seq Scan on lp_ef lp_3
   ->  Seq Scan on lp_null lp_4
   ->  Seq Scan on lp_default lp_5
(6 rows)

select * from lp;
 a
---
(0 rows)

set yb_enable_parallel_append to true;
-- do not execute those parallel queries, there are known issues with YB PA
explain (costs off)
select * from t1 union select * from t2;
         QUERY PLAN
----------------------------
 HashAggregate
   Group Key: t1.k, t1.v
   ->  Append
         ->  Seq Scan on t1
         ->  Seq Scan on t2
(5 rows)

-- simple union all
explain (costs off)
select * from t1 union all select * from t2;
         QUERY PLAN
----------------------------
 Gather
   Workers Planned: 2
   ->  Parallel Append
         ->  Seq Scan on t1
         ->  Seq Scan on t2
(5 rows)

-- joins union
explain (costs off)
select * from t, t1 where t.k = t1.k union select * from t, t2 where t.k = t2.k;
               QUERY PLAN
-----------------------------------------
 HashAggregate
   Group Key: t.k, t.v, t1.k, t1.v
   ->  Append
         ->  Hash Join
               Hash Cond: (t.k = t1.k)
               ->  Seq Scan on t
               ->  Hash
                     ->  Seq Scan on t1
         ->  Hash Join
               Hash Cond: (t_1.k = t2.k)
               ->  Seq Scan on t t_1
               ->  Hash
                     ->  Seq Scan on t2
(13 rows)

-- joins union all
explain (costs off)
select * from t, t1 where t.k = t1.k union all select * from t, t2 where t.k = t2.k;
               QUERY PLAN
-----------------------------------------
 Gather
   Workers Planned: 2
   ->  Parallel Append
         ->  Hash Join
               Hash Cond: (t.k = t2.k)
               ->  Seq Scan on t
               ->  Hash
                     ->  Seq Scan on t2
         ->  Hash Join
               Hash Cond: (t_1.k = t1.k)
               ->  Seq Scan on t t_1
               ->  Hash
                     ->  Seq Scan on t1
(13 rows)

-- partitioned table
explain (costs off)
select * from lp;
               QUERY PLAN
-----------------------------------------
 Gather
   Workers Planned: 2
   ->  Parallel Append
         ->  Seq Scan on lp_ad lp_1
         ->  Seq Scan on lp_bc lp_2
         ->  Seq Scan on lp_ef lp_3
         ->  Seq Scan on lp_null lp_4
         ->  Seq Scan on lp_default lp_5
(8 rows)

-- union of non-YB relations (#21733)
explain (costs off)
/*+ Set(enable_seqscan OFF) */ select 'l' UNION ALL (SELECT 'g') ORDER BY 1;
         QUERY PLAN
-----------------------------
 Sort
   Sort Key: ('l'::text)
   ->  Gather
         Workers Planned: 2
         ->  Parallel Append
               ->  Result
               ->  Result
(7 rows)
