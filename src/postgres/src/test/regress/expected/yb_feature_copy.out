--
-- YB_FEATURE Testsuite: COPY
--
CREATE TABLE x (
	a int,
	b int,
	c text,
	d text,
	e text
);
COPY x (a, b, c, d, e) from stdin;
COPY x (b, d) from stdin;
COPY x (b, d) from stdin;
COPY x (a, b, c, d, e) from stdin;
SELECT relid::regclass, command, yb_status, type, bytes_processed, bytes_total,
          tuples_processed, tuples_excluded FROM pg_stat_progress_copy;
 relid |  command  | yb_status | type | bytes_processed | bytes_total | tuples_processed | tuples_excluded
-------+-----------+-----------+------+-----------------+-------------+------------------+-----------------
 x     | COPY FROM | SUCCESS   | PIPE |              93 |           0 |                5 |               0
(1 row)

-- non-existent column in column list: should fail
COPY x (xyz) from stdin;
ERROR:  column "xyz" of relation "x" does not exist
-- too many columns in column list: should fail
COPY x (a, b, c, d, e, d, c) from stdin;
ERROR:  column "d" specified more than once
-- missing data: should fail
COPY x from stdin;
ERROR:  invalid input syntax for type integer: ""
CONTEXT:  COPY x, line 1, column a: ""
COPY x from stdin;
ERROR:  missing data for column "e"
CONTEXT:  COPY x, line 1: "2000	230	23	23"
COPY x from stdin;
ERROR:  missing data for column "e"
CONTEXT:  COPY x, line 1: "2001	231	\N	\N"
-- extra data: should fail
COPY x from stdin;
ERROR:  extra data after last expected column
CONTEXT:  COPY x, line 1: "2002	232	40	50	60	70	80"
-- various COPY options: delimiters, NULL string, encoding
COPY x (b, c, d, e) from stdin delimiter ',' null 'x';
COPY x from stdin WITH DELIMITER AS ';' NULL AS '';
COPY x from stdin WITH DELIMITER AS ':' NULL AS E'\\X' ENCODING 'sql_ascii';
-- check results of copy in
SELECT * FROM x ORDER BY a,b,c,d;
   a   | b  |     c      |   d    | e
-------+----+------------+--------+----
  3000 |    | c          |        |
  4000 |    | C          |        |
  4001 |  1 | empty      |        |
  4002 |  2 | null       |        |
  4003 |  3 | Backslash  | \      | \
  4004 |  4 | BackslashX | \X     | \X
  4005 |  5 | N          | N      | N
  4006 |  6 | BackslashN | \N     | \N
  4007 |  7 | XX         | XX     | XX
  4008 |  8 | Delimiter  | :      | :
  9999 |    | \N         | NN     |
 10000 | 21 | 31         | 41     | 51
 10001 | 22 | 32         | 42     | 52
 10002 | 23 | 33         | 43     | 53
 10003 | 24 | 34         | 44     | 54
 10004 | 25 | 35         | 45     | 55
 10005 | 26 | 36         | 46     | 56
       |  1 |            | test_1 |
       |  2 |            | test_2 |
       |  3 |            | test_3 |
       |  4 |            | test_4 |
       |  5 |            | test_5 |
       |    | ,          | \,     | \
       |    | 45         | 80     | 90
       |    | x          | \x     | \x
(25 rows)

-- check copy out
COPY (SELECT * FROM x ORDER BY a,b,c,d) TO stdout;
3000	\N	c	\N	\N
4000	\N	C	\N	\N
4001	1	empty
4002	2	null	\N	\N
4003	3	Backslash	\\	\\
4004	4	BackslashX	\\X	\\X
4005	5	N	N	N
4006	6	BackslashN	\\N	\\N
4007	7	XX	XX	XX
4008	8	Delimiter	:	:
9999	\N	\\N	NN	\N
10000	21	31	41	51
10001	22	32	42	52
10002	23	33	43	53
10003	24	34	44	54
10004	25	35	45	55
10005	26	36	46	56
\N	1	\N	test_1	\N
\N	2	\N	test_2	\N
\N	3	\N	test_3	\N
\N	4	\N	test_4	\N
\N	5	\N	test_5	\N
\N	\N	,	\\,	\\
\N	\N	45	80	90
\N	\N	x	\\x	\\x
COPY (SELECT c,e FROM x ORDER BY a,b,c,d) TO stdout;
c	\N
C	\N
empty
null	\N
Backslash	\\
BackslashX	\\X
N	N
BackslashN	\\N
XX	XX
Delimiter	:
\\N	\N
31	51
32	52
33	53
34	54
35	55
36	56
\N	\N
\N	\N
\N	\N
\N	\N
\N	\N
,	\\
45	90
x	\\x
COPY (SELECT b,e FROM x ORDER BY a,b,c,d) TO stdout WITH NULL 'I''m null';
I'm null	I'm null
I'm null	I'm null
1
2	I'm null
3	\\
4	\\X
5	N
6	\\N
7	XX
8	:
I'm null	I'm null
21	51
22	52
23	53
24	54
25	55
26	56
1	I'm null
2	I'm null
3	I'm null
4	I'm null
5	I'm null
I'm null	\\
I'm null	90
I'm null	\\x
CREATE TABLE y (
	col1 text,
	col2 text
);
INSERT INTO y VALUES ('Jackson, Sam', E'\\h');
INSERT INTO y VALUES ('It is "perfect".',E'\t');
INSERT INTO y VALUES ('', NULL);
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout WITH CSV;
"",
"It is ""perfect"".",
"Jackson, Sam",\h
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout WITH CSV QUOTE '''' DELIMITER '|';
''|
It is "perfect".|
Jackson, Sam|\h
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout WITH CSV FORCE QUOTE col2 ESCAPE E'\\' ENCODING 'sql_ascii';
"",
"It is \"perfect\".","	"
"Jackson, Sam","\\h"
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout WITH CSV FORCE QUOTE *;
"",
"It is ""perfect"".","	"
"Jackson, Sam","\h"
-- Repeat above tests with new 9.0 option syntax
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV);
"",
"It is ""perfect"".",
"Jackson, Sam",\h
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV, QUOTE '''', DELIMITER '|');
''|
It is "perfect".|
Jackson, Sam|\h
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV, FORCE_QUOTE (col2), ESCAPE E'\\');
"",
"It is \"perfect\".","	"
"Jackson, Sam","\\h"
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV, FORCE_QUOTE *);
"",
"It is ""perfect"".","	"
"Jackson, Sam","\h"
\copy (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV)
"",
"It is ""perfect"".",
"Jackson, Sam",\h
\copy (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV, QUOTE '''', DELIMITER '|')
''|
It is "perfect".|
Jackson, Sam|\h
\copy (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV, FORCE_QUOTE (col2), ESCAPE E'\\')
"",
"It is \"perfect\".","	"
"Jackson, Sam","\\h"
\copy (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV, FORCE_QUOTE *)
"",
"It is ""perfect"".","	"
"Jackson, Sam","\h"
--test that we read consecutive LFs properly
CREATE TABLE testnl (a int, b text, c int);
COPY testnl FROM stdin CSV;
-- test end of copy marker
CREATE TABLE testeoc (a text);
COPY testeoc FROM stdin CSV;
-- test handling of nonstandard null marker that violates escaping rules
CREATE TABLE testnull (a int, b text);
INSERT INTO testnull VALUES (1, E'\\0'), (NULL, NULL);
COPY (SELECT * FROM testnull ORDER BY a,b) TO stdout WITH NULL AS E'\\0';
1	\\0
\0	\0
COPY testnull FROM stdin WITH NULL AS E'\\0';
SELECT * FROM testnull ORDER BY a,b;
 a  | b
----+----
  1 | \0
 42 | \0
    |
    |
(4 rows)

-- Test FORCE_NOT_NULL and FORCE_NULL options
CREATE TABLE forcetest (
    a INT NOT NULL,
    b TEXT NOT NULL,
    c TEXT,
    d TEXT,
    e TEXT
);
\pset null NULL
-- should succeed with no effect ("b" remains an empty string, "c" remains NULL)
BEGIN;
COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL(b), FORCE_NULL(c));
COMMIT;
SELECT b, c FROM forcetest WHERE a = 1;
 b |  c
---+------
   | NULL
(1 row)

-- should succeed, FORCE_NULL and FORCE_NOT_NULL can be both specified
BEGIN;
COPY forcetest (a, b, c, d) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL(c,d), FORCE_NULL(c,d));
COMMIT;
SELECT c, d FROM forcetest WHERE a = 2;
 c |  d
---+------
   | NULL
(1 row)

-- should fail with not-null constraint violation
BEGIN;
COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NULL(b), FORCE_NOT_NULL(c));
ERROR:  null value in column "b" of relation "forcetest" violates not-null constraint
DETAIL:  Failing row contains (3, null, , null, null).
CONTEXT:  COPY forcetest, line 1: "3,,"""
ROLLBACK;
-- should fail with "not referenced by COPY" error
BEGIN;
COPY forcetest (d, e) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL(b));
ERROR:  FORCE_NOT_NULL column "b" not referenced by COPY
ROLLBACK;
-- should fail with "not referenced by COPY" error
BEGIN;
COPY forcetest (d, e) FROM STDIN WITH (FORMAT csv, FORCE_NULL(b));
ERROR:  FORCE_NULL column "b" not referenced by COPY
ROLLBACK;
CREATE TABLE t(k INT PRIMARY KEY, v INT);
CREATE UNIQUE INDEX ON t(v);
-- should fail, non unique primary key
COPY t FROM stdin;
ERROR:  duplicate key value violates unique constraint "t_pkey"
SELECT relid::regclass, command, yb_status, type, bytes_processed, bytes_total,
          tuples_processed, tuples_excluded FROM pg_stat_progress_copy;
 relid |  command  | yb_status | type | bytes_processed | bytes_total | tuples_processed | tuples_excluded
-------+-----------+-----------+------+-----------------+-------------+------------------+-----------------
 t     | COPY FROM | ERROR     | PIPE |               0 |           0 |                0 |               0
(1 row)

-- should fail, non unique index
COPY t FROM stdin;
ERROR:  duplicate key value violates unique constraint "t_v_idx"
SELECT relid::regclass, command, yb_status, type, bytes_processed, bytes_total,
          tuples_processed, tuples_excluded FROM pg_stat_progress_copy;
 relid |  command  | yb_status | type | bytes_processed | bytes_total | tuples_processed | tuples_excluded
-------+-----------+-----------+------+-----------------+-------------+------------------+-----------------
 t     | COPY FROM | ERROR     | PIPE |               0 |           0 |                0 |               0
(1 row)

SELECT COUNT(*) FROM t;
 count
-------
     0
(1 row)

-- Test COPY FROM on combination of cases
-- Create trigger functions
create or replace function noticeBefore() returns trigger as $$begin raise notice 'b: %', new.b; return NEW; end$$ language plpgsql;
create or replace function noticeAfter() returns trigger as $$begin raise notice 'a: %', new.b; return NEW; end$$ language plpgsql;
-- Test before and after row insert trigger on partition table
create table q (a int not null, b int) partition by list (a);
create table q1 (b int, a int not null);
create trigger trigBefore_q1 before insert on q1 for each row execute procedure noticeBefore();
create trigger trigAfter_q1 after insert on q1 for each row execute procedure noticeAfter();
alter table q attach partition q1 for values in (1, 2);
copy q from stdin;
NOTICE:  b: 5
NOTICE:  b: 6
NOTICE:  b: 7
NOTICE:  a: 5
NOTICE:  a: 6
NOTICE:  a: 7
-- should fail, no partition exists for value 3
copy q from stdin;
ERROR:  no partition of relation "q" found for row
DETAIL:  Partition key of the failing row contains (a) = (3).
CONTEXT:  COPY q, line 1: "3	0"
select * from q ORDER BY a,b;
 a | b
---+---
 1 | 5
 1 | 7
 2 | 6
(3 rows)

-- Test before and after row insert trigger on multiple partition tables
create table s (a int not null, b int) partition by list (a);
create table s1 (b int, a int not null);
create table s2 (a int not null, b int);
create table s3 (a int not null, b int);
create trigger trigBefore_s1 before insert on s1 for each row execute procedure noticeBefore();
create trigger trigAfter_s2 after insert on s2 for each row execute procedure noticeAfter();
create trigger trigAfter_s3 after insert on s3 for each row execute procedure noticeAfter();
alter table s attach partition s1 for values in (1, 2);
alter table s attach partition s2 for values in (3);
alter table s attach partition s3 for values in (4);
copy s from stdin;
NOTICE:  b: 5
NOTICE:  b: 6
NOTICE:  b: 9
NOTICE:  a: 7
NOTICE:  a: 8
-- should fail, no partition exists for value 6
copy s from stdin;
ERROR:  no partition of relation "s" found for row
DETAIL:  Partition key of the failing row contains (a) = (6).
CONTEXT:  COPY s, line 1: "6	10"
select * from s ORDER BY a,b;
 a | b
---+---
 1 | 5
 2 | 6
 2 | 9
 3 | 7
 4 | 8
(5 rows)

-- Test before and after row insert trigger on nested partition with depth 2 and constraint
create table r (a int check (a > 0), b int) partition by range(a);
create table r1 partition of r for values from (1) to (5) partition by list (b);
create table r2 partition of r1 for values in (3);
create table r3 partition of r1 for values in (4);
create trigger trigAfter_r2 after insert on r2 for each row execute procedure noticeAfter();
create trigger trigAfter_r3 before insert on r3 for each row execute procedure noticeBefore();
copy r from stdin;
NOTICE:  b: 4
NOTICE:  a: 3
NOTICE:  a: 3
-- should fail, 5 is exclusive no invalid partition value
copy r from stdin;
ERROR:  no partition of relation "r" found for row
DETAIL:  Partition key of the failing row contains (a) = (5).
CONTEXT:  COPY r, line 1: "5	3"
select * from r ORDER BY a,b;
 a | b
---+---
 1 | 3
 2 | 4
 4 | 3
(3 rows)

-- Test before and after row insert trigger on nested partition with depth 3 and constraint
create table w (a int check (a > 0), b int) partition by list (a);
create table w1 partition of w for values in (1, 2, 3, 4, 5, 6, 7, 8) partition by list (b);
create table w2 partition of w for values in (9, 10);
create table w3 partition of w1 for values in (1, 2);
create table w4 partition of w1 for values in (4, 5, 6, 7) partition by list (a);
create table w5 partition of w4 for values in (3, 8, 9, 10);
create or replace function before_w1() returns trigger as $$begin raise notice 'b_w1: %', new.a; return NEW; end$$ language plpgsql;
create or replace function after_w2() returns trigger as $$begin raise notice 'a_w2: %', new.a; return NEW; end$$ language plpgsql;
create or replace function before_w3() returns trigger as $$begin raise notice 'b_w3: %', new.b; return NEW; end$$ language plpgsql;
create or replace function before_w4() returns trigger as $$begin raise notice 'b_w4: %', new.b; return NEW; end$$ language plpgsql;
create or replace function after_w5() returns trigger as $$begin raise notice 'a_w5: %', new.a; return NEW; end$$ language plpgsql;
create trigger trigAfter_w2 after insert on w2 for each row execute procedure after_w2();
create trigger trigBefore_w3 before insert on w3 for each row execute procedure before_w3();
create trigger trigAfter_w5 after insert on w5 for each row execute procedure after_w5();
-- prints at each leaf partitions
copy w from stdin;
NOTICE:  b_w3: 2
NOTICE:  a_w5: 8
NOTICE:  a_w2: 9
NOTICE:  a_w5: 3
-- should fail, 5 cannot fall under partition w5 (a should be between 8 to 10)
copy w from stdin;
ERROR:  no partition of relation "w4" found for row
DETAIL:  Partition key of the failing row contains (a) = (2).
CONTEXT:  COPY w, line 1: "2	6"
select * from w ORDER BY a,b;
 a | b
---+---
 3 | 7
 8 | 2
 8 | 6
 9 | 1
(4 rows)

-- Test before row insert trigger with check constraint on partition table
create table p (a int check (a > 0), b int) partition by list (a);
create table p1 partition of p for values in (1);
create trigger trigBefore_p1 before insert on p1 for each row execute procedure noticeBefore();
copy p from stdin;
NOTICE:  b: 5
NOTICE:  b: 6
-- should fail, fails constraint
copy p from stdin;
ERROR:  no partition of relation "p" found for row
DETAIL:  Partition key of the failing row contains (a) = (0).
CONTEXT:  COPY p, line 1: "0	1"
select * from p ORDER BY a,b;
 a | b
---+---
 1 | 5
 1 | 6
(2 rows)

-- Test index and auto generated column on partition table
create table u (a serial, b int) partition by list (a);
create table u1 partition of u for values in (1, 2, 3, 4, 5);
create unique index key on u (a);
copy u from stdin;
copy u (b) from stdin;
-- should fail, a duplicates
copy u from stdin;
ERROR:  duplicate key value violates unique constraint "u1_a_idx"
select * from u ORDER BY a,b;
 a | b
---+---
 1 | 7
 2 | 8
 3 | 5
 4 | 6
(4 rows)

-- Test after row insert trigger with check constraint, index, and auto generated column on partition table
create table v (a int default 1 check (a > 0), b serial) partition by list (a);
create table v1 partition of v for values in (1, 2);
create unique index key2 on v (a, b);
create trigger trigAfter_v1 after insert on v1 for each row execute procedure noticeAfter();
copy v from stdin;
NOTICE:  a: 5
NOTICE:  a: 6
NOTICE:  a: 7
copy v (b) from stdin;
NOTICE:  a: 8
NOTICE:  a: 9
NOTICE:  a: 10
-- should fail, duplicate key (1, 5)
copy v (b) from stdin;
ERROR:  duplicate key value violates unique constraint "v1_a_b_idx"
select * from v ORDER BY a,b;
 a | b
---+----
 1 |  5
 1 |  6
 1 |  7
 1 |  8
 1 |  9
 1 | 10
(6 rows)

-- Test various copy options
create table copy_options (a int primary key, b int);
-- skip
copy copy_options from stdin with (format csv, skip 2);
select * from copy_options order by a;
 a | b
---+---
 3 | 3
 4 | 4
 5 | 5
(3 rows)

-- skip with invalid rows being included
truncate copy_options;
copy copy_options from stdin with (format csv, skip 3);
select * from copy_options order by a;
 a | b
---+---
 4 | 4
 5 | 5
(2 rows)

-- replace
truncate copy_options;
insert into copy_options (a, b) values (1, 0), (2, 1), (3, 2);
select a, b from copy_options order by a;
 a | b
---+---
 1 | 0
 2 | 1
 3 | 2
(3 rows)

copy copy_options from stdin with (format csv, replace);
select * from copy_options order by a;
 a | b
---+---
 1 | 1
 2 | 2
 3 | 3
 4 | 4
 5 | 5
(5 rows)

-- DISABLE_FK_CHECK
create table ref_table(a int primary key);
insert into ref_table(a) values (1), (2), (3);
create table main_table(a int references ref_table, b int);
copy main_table from stdin with (format csv, disable_fk_check);
select * from main_table order by a;
 a | b
---+---
 1 | 1
 2 | 2
 3 | 3
 4 | 4
 5 | 5
(5 rows)

-- FREEZE
truncate copy_options;
copy copy_options from stdin with (format csv, freeze);
NOTICE:  cannot perform COPY FREEZE on a YugaByte table
select * from copy_options order by a;
 a | b
---+---
 1 | 1
 2 | 2
 3 | 3
 4 | 4
 5 | 5
(5 rows)

-- clean up
DROP TABLE forcetest;
DROP TABLE x;
DROP TABLE y;
DROP TABLE testnl;
DROP TABLE testeoc;
DROP TABLE testnull;
DROP TABLE t;
DROP TABLE q;
DROP TABLE s;
DROP TABLE r;
DROP TABLE w;
DROP TABLE p;
DROP TABLE u;
DROP TABLE v;
DROP TABLE copy_options;
DROP TABLE main_table;
DROP TABLE ref_table;
