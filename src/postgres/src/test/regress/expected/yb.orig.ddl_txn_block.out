CREATE TABLE test1 (id int PRIMARY KEY);
-- Test rollback of DDL+DML transaction block.
BEGIN ISOLATION LEVEL REPEATABLE READ;
CREATE TABLE test2 (id int);
INSERT INTO test1 VALUES (2);
ROLLBACK;
-- No rows in test1.
SELECT * FROM test1;
 id 
----
(0 rows)

-- test2 does not exist.
SELECT * FROM test2;
ERROR:  relation "test2" does not exist
LINE 1: SELECT * FROM test2;
                      ^
-- Test commit of DDL+DML transaction block.
BEGIN ISOLATION LEVEL REPEATABLE READ;
CREATE TABLE test2 (id int);
INSERT INTO test1 VALUES (2);
COMMIT;
SELECT * FROM test1;
 id 
----
  2
(1 row)

SELECT * FROM test2;
 id 
----
(0 rows)

-- Test rollback of a block with multiple DDLs
BEGIN ISOLATION LEVEL REPEATABLE READ;
CREATE TABLE test3 (id int);
CREATE TABLE test4 (id int PRIMARY KEY, b int);
ALTER TABLE test1 ADD COLUMN value text;
INSERT INTO test1 VALUES (3, 'text');
ROLLBACK;
SELECT * FROM test3;
ERROR:  relation "test3" does not exist
LINE 1: SELECT * FROM test3;
                      ^
SELECT * FROM test4;
ERROR:  relation "test4" does not exist
LINE 1: SELECT * FROM test4;
                      ^
SELECT * FROM test1;
 id 
----
  2
(1 row)

-- Test commit of a block with multiple DDLs
BEGIN ISOLATION LEVEL REPEATABLE READ;
CREATE TABLE test3 (id int);
CREATE TABLE test4 (id int);
ALTER TABLE test1 ADD COLUMN value text;
INSERT INTO test1 VALUES (3, 'text');
COMMIT;
SELECT * FROM test3;
 id 
----
(0 rows)

SELECT * FROM test4;
 id 
----
(0 rows)

SELECT * FROM test1;
 id | value 
----+-------
  2 | 
  3 | text
(2 rows)

-- Same test as above but the first statement is a DML
BEGIN ISOLATION LEVEL REPEATABLE READ;
INSERT INTO test1 VALUES (5, 'text');
CREATE TABLE test5 (id int);
CREATE TABLE test6 (id int);
ALTER TABLE test1 ADD COLUMN value1 text;
INSERT INTO test1 VALUES (4, 'text', 'text2');
ROLLBACK;
SELECT * FROM test5;
ERROR:  relation "test5" does not exist
LINE 1: SELECT * FROM test5;
                      ^
SELECT * FROM test6;
ERROR:  relation "test6" does not exist
LINE 1: SELECT * FROM test6;
                      ^
SELECT * FROM test1;
 id | value 
----+-------
  2 | 
  3 | text
(2 rows)

BEGIN ISOLATION LEVEL REPEATABLE READ;
INSERT INTO test1 VALUES (5, 'text');
CREATE TABLE test5 (id int);
CREATE TABLE test6 (id int);
ALTER TABLE test1 ADD COLUMN value1 text;
INSERT INTO test1 VALUES (4, 'text', 'text2');
COMMIT;
SELECT * FROM test5;
 id 
----
(0 rows)

SELECT * FROM test6;
 id 
----
(0 rows)

SELECT * FROM test1;
 id | value | value1 
----+-------+--------
  5 | text  | 
  4 | text  | text2
  2 |       | 
  3 | text  | 
(4 rows)

CREATE INDEX ON test1(value);
SELECT value FROM test1 WHERE value='text';
 value 
-------
 text
 text
 text
(3 rows)

-- Test that schema version bump in case of alter table rollback is handled.
CREATE TABLE test7 (a int primary key, b int);
BEGIN ISOLATION LEVEL REPEATABLE READ;
INSERT INTO test7 VALUES (1, 1);
INSERT INTO test7 VALUES (2, 2);
ALTER TABLE test7 ADD COLUMN c int;
INSERT INTO test7 VALUES (3, 3, 3);
ROLLBACK;
BEGIN ISOLATION LEVEL REPEATABLE READ;
INSERT INTO test7 VALUES (1, 1);
COMMIT;
SELECT * FROM test7;
 a | b 
---+---
 1 | 1
(1 row)

SET allow_system_table_mods = on;
BEGIN ISOLATION LEVEL REPEATABLE READ;
-- Truncate system table inside a transaction block.
TRUNCATE pg_extension;
ERROR:  cannot TRUNCATE system relations in a transaction block.
ROLLBACK;
RESET allow_system_table_mods;
SET yb_enable_alter_table_rewrite = off;
BEGIN ISOLATION LEVEL REPEATABLE READ;
-- Truncate user table inside a transaction block with table rewrite disabled.
TRUNCATE test7;
ERROR:  unsafe TRUNCATE cannot be executed in a transaction block.
HINT:  Set yb_enable_alter_table_rewrite to true.
ROLLBACK;
RESET yb_enable_alter_table_rewrite;
-- Rollback CREATE, DROP and CREATE TABLE with same name in a transaction block.
BEGIN ISOLATION LEVEL REPEATABLE READ;
CREATE TABLE test8 (a int primary key, b int);
INSERT INTO test8 VALUES (1, 1);
SELECT * FROM test8;
 a | b 
---+---
 1 | 1
(1 row)

DROP TABLE test8;
CREATE TABLE test8 (c int primary key, d int);
INSERT INTO test8 VALUES (10, 10);
ROLLBACK;
SELECT * FROM test8;
ERROR:  relation "test8" does not exist
LINE 1: SELECT * FROM test8;
                      ^
-- Same test as above but with COMMIT.
BEGIN ISOLATION LEVEL REPEATABLE READ;
CREATE TABLE test8 (a int primary key, b int);
INSERT INTO test8 VALUES (1, 1);
SELECT * FROM test8;
 a | b 
---+---
 1 | 1
(1 row)

DROP TABLE test8;
CREATE TABLE test8 (c int primary key, d int);
INSERT INTO test8 VALUES (10, 10);
COMMIT;
SELECT * FROM test8;
 c  | d  
----+----
 10 | 10
(1 row)

-- Rollback of DROP TABLE.
CREATE TABLE test9 (a int primary key, b int);
INSERT INTO test9 VALUES (1, 1);
BEGIN ISOLATION LEVEL REPEATABLE READ;
INSERT INTO test9 VALUES (2, 2);
SELECT * FROM test9;
 a | b 
---+---
 1 | 1
 2 | 2
(2 rows)

DROP TABLE test9;
ROLLBACK;
SELECT * FROM test9;
 a | b 
---+---
 1 | 1
(1 row)

-- Rollback of CREATE INDEX should work.
CREATE TABLE test10(id INT PRIMARY KEY, val TEXT);
BEGIN ISOLATION LEVEL REPEATABLE READ;
CREATE INDEX test10_idx ON test10(val);
NOTICE:  making create index for table "test10" nonconcurrent
DETAIL:  Create index in transaction block cannot be concurrent.
HINT:  Consider running it outside of a transaction block. See https://github.com/yugabyte/yugabyte-db/issues/6240.
\d+ test10;
                                   Table "public.test10"
 Column |  Type   | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+----------+--------------+-------------
 id     | integer |           | not null |         | plain    |              | 
 val    | text    |           |          |         | extended |              | 
Indexes:
    "test10_pkey" PRIMARY KEY, lsm (id HASH)
    "test10_idx" lsm (val HASH)

ROLLBACK;
\d+ test10;
                                   Table "public.test10"
 Column |  Type   | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+----------+--------------+-------------
 id     | integer |           | not null |         | plain    |              | 
 val    | text    |           |          |         | extended |              | 
Indexes:
    "test10_pkey" PRIMARY KEY, lsm (id HASH)

-- TODO(#3109): CREATE and DROP database are already being tested in various
-- other regress tests. This is being tested here since
-- FLAGS_TEST_yb_ddl_transaction_block_enabled is false for all of them.
-- Remove this once FLAGS_TEST_yb_ddl_transaction_block_enabled is true by
-- default.
create database k1;
drop database k1;
CREATE SEQUENCE regtest_seq;
BEGIN ISOLATION LEVEL REPEATABLE READ;
DROP SEQUENCE regtest_seq;
COMMIT;
CREATE TABLE test11(id INT PRIMARY KEY, val TEXT);
INSERT INTO test11 VALUES (1, 'text');
BEGIN ISOLATION LEVEL REPEATABLE READ;
TRUNCATE test11;
TRUNCATE test11;
SELECT * FROM test11;
 id | val 
----+-----
(0 rows)

ROLLBACK;
SELECT * FROM test11;
 id | val  
----+------
  1 | text
(1 row)

-- Savepoint allowed without any DDL.
CREATE TABLE test12 (a int primary key, b int);
BEGIN ISOLATION LEVEL REPEATABLE READ;
INSERT INTO test12 VALUES (1, 1);
SAVEPOINT test12_sp;
INSERT INTO test12 VALUES (2, 2);
SELECT * FROM test12;
 a | b 
---+---
 1 | 1
 2 | 2
(2 rows)

ROLLBACK TO SAVEPOINT test12_sp;
COMMIT;
SELECT * FROM test12;
 a | b 
---+---
 1 | 1
(1 row)

-- DDL after Savepoint disallowed.
BEGIN ISOLATION LEVEL REPEATABLE READ;
INSERT INTO test12 VALUES (3, 3);
SAVEPOINT test12_sp;
CREATE TABLE test13 (a int primary key, b int);
ERROR:  interleaving SAVEPOINT & DDL in transaction block not supported by YugaByte yet
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/26734. React with thumbs up to raise its priority.
ROLLBACK;
-- Savepoint after DDL disallowed.
BEGIN ISOLATION LEVEL REPEATABLE READ;
CREATE TABLE test13 (a int primary key, b int);
SAVEPOINT test13_sp;
ERROR:  interleaving SAVEPOINT & DDL in transaction block not supported by YugaByte yet
HINT:  See https://github.com/yugabyte/yugabyte-db/issues/26734. React with thumbs up to raise its priority.
ROLLBACK;
