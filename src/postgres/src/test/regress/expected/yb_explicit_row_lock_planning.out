--
-- YB tests for locking
--
CREATE TABLE yb_locks_t (k int PRIMARY KEY);
INSERT INTO yb_locks_t VALUES (1),(2),(3),(4),(5);
CREATE TABLE yb_locks_t2 (k1 int, k2 int, k3 int, v int, PRIMARY KEY(k1, k2, k3));
INSERT INTO yb_locks_t2 VALUES (1,2,3,4),(5,6,7,8);
CREATE TABLE yb_locks_tasc (k int, PRIMARY KEY (k ASC));
INSERT INTO yb_locks_tasc VALUES (1),(2),(3);
SET yb_lock_pk_single_rpc TO ON;
-- Test plain (unlocked case).
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5;
                   QUERY PLAN
------------------------------------------------
 Index Scan using yb_locks_t_pkey on yb_locks_t
   Index Cond: (k = 5)
(2 rows)

SELECT * FROM yb_locks_t WHERE k=5;
 k
---
 5
(1 row)

-- Test single-RPC select+lock (no LockRows node).
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
                             QUERY PLAN
--------------------------------------------------------------------
 Index Scan (Locked FOR UPDATE) using yb_locks_t_pkey on yb_locks_t
   Index Cond: (k = 5)
(2 rows)

SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
 k
---
 5
(1 row)

-- Test other types of locking.
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5 FOR SHARE;
                            QUERY PLAN
-------------------------------------------------------------------
 Index Scan (Locked FOR SHARE) using yb_locks_t_pkey on yb_locks_t
   Index Cond: (k = 5)
(2 rows)

SELECT * FROM yb_locks_t WHERE k=5 FOR SHARE;
 k
---
 5
(1 row)

EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5 FOR NO KEY UPDATE;
                                QUERY PLAN
---------------------------------------------------------------------------
 Index Scan (Locked FOR NO KEY UPDATE) using yb_locks_t_pkey on yb_locks_t
   Index Cond: (k = 5)
(2 rows)

SELECT * FROM yb_locks_t WHERE k=5 FOR NO KEY UPDATE;
 k
---
 5
(1 row)

EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5 FOR KEY SHARE;
                              QUERY PLAN
-----------------------------------------------------------------------
 Index Scan (Locked FOR KEY SHARE) using yb_locks_t_pkey on yb_locks_t
   Index Cond: (k = 5)
(2 rows)

SELECT * FROM yb_locks_t WHERE k=5 FOR KEY SHARE;
 k
---
 5
(1 row)

-- Test LockRows node (more RPCs), and scan is unlocked.
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t FOR UPDATE;
          QUERY PLAN
------------------------------
 LockRows
   ->  Seq Scan on yb_locks_t
(2 rows)

SELECT * FROM yb_locks_t FOR UPDATE;
 k
---
 5
 1
 4
 2
 3
(5 rows)

-- Test with multi-column primary key.
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t2 WHERE k1=1 AND k2=2 AND k3=3 FOR UPDATE;
                              QUERY PLAN
----------------------------------------------------------------------
 Index Scan (Locked FOR UPDATE) using yb_locks_t2_pkey on yb_locks_t2
   Index Cond: ((k1 = 1) AND (k2 = 2) AND (k3 = 3))
(2 rows)

SELECT * FROM yb_locks_t2 WHERE k1=1 AND k2=2 AND k3=3 FOR UPDATE;
 k1 | k2 | k3 | v
----+----+----+---
  1 |  2 |  3 | 4
(1 row)

-- Test with partial column set for primary key (should use LockRows).
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t2 WHERE k1=1 AND k2=2 FOR UPDATE;
                       QUERY PLAN
--------------------------------------------------------
 LockRows
   ->  Index Scan using yb_locks_t2_pkey on yb_locks_t2
         Index Cond: ((k1 = 1) AND (k2 = 2))
(3 rows)

SELECT * FROM yb_locks_t2 WHERE k1=1 AND k2=2 FOR UPDATE;
 k1 | k2 | k3 | v
----+----+----+---
  1 |  2 |  3 | 4
(1 row)

-- Test LockRows node is used for join.
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t2, yb_locks_t WHERE yb_locks_t2.k1 = yb_locks_t.k FOR UPDATE;
                                   QUERY PLAN
---------------------------------------------------------------------------------
 LockRows
   ->  YB Batched Nested Loop Join
         Join Filter: (yb_locks_t2.k1 = yb_locks_t.k)
         ->  Seq Scan on yb_locks_t2
         ->  Index Scan using yb_locks_t_pkey on yb_locks_t
               Index Cond: (k = ANY (ARRAY[yb_locks_t2.k1, $2, $3, ..., $1024]))
(6 rows)

SELECT * FROM yb_locks_t2, yb_locks_t WHERE yb_locks_t2.k1 = yb_locks_t.k FOR UPDATE;
 k1 | k2 | k3 | v | k
----+----+----+---+---
  5 |  6 |  7 | 8 | 5
  1 |  2 |  3 | 4 | 1
(2 rows)

-- Test LockRows node is used with ASC table when YB Sequential Scan is used.
/*+ SeqScan(yb_locks_tasc) */ EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_tasc WHERE k=1 FOR UPDATE;
           QUERY PLAN
---------------------------------
 LockRows
   ->  Seq Scan on yb_locks_tasc
         Storage Filter: (k = 1)
(3 rows)

/*+ SeqScan(yb_locks_tasc) */ SELECT * FROM yb_locks_tasc WHERE k=1 FOR UPDATE;
 k
---
 1
(1 row)

-- In isolation level SERIALIZABLE, all locks are done during scans.
BEGIN ISOLATION LEVEL SERIALIZABLE;
-- Test same locking as for REPEATABLE READ (default isolation).
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
                             QUERY PLAN
--------------------------------------------------------------------
 Index Scan (Locked FOR UPDATE) using yb_locks_t_pkey on yb_locks_t
   Index Cond: (k = 5)
(2 rows)

SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
 k
---
 5
(1 row)

-- Test no LockRows node for sequential scan.
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t FOR UPDATE;
                    QUERY PLAN
--------------------------------------------------
 LockRows (no-op)
   ->  Seq Scan (Locked FOR UPDATE) on yb_locks_t
(2 rows)

SELECT * FROM yb_locks_t FOR UPDATE;
 k
---
 5
 1
 4
 2
 3
(5 rows)

-- Test no LockRows node for join.
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t2, yb_locks_t WHERE yb_locks_t2.k1 = yb_locks_t.k FOR UPDATE;
                                   QUERY PLAN
---------------------------------------------------------------------------------
 LockRows (no-op)
   ->  YB Batched Nested Loop Join
         Join Filter: (yb_locks_t2.k1 = yb_locks_t.k)
         ->  Seq Scan (Locked FOR UPDATE) on yb_locks_t2
         ->  Index Scan (Locked FOR UPDATE) using yb_locks_t_pkey on yb_locks_t
               Index Cond: (k = ANY (ARRAY[yb_locks_t2.k1, $2, $3, ..., $1024]))
(6 rows)

SELECT * FROM yb_locks_t2, yb_locks_t WHERE yb_locks_t2.k1 = yb_locks_t.k FOR UPDATE;
 k1 | k2 | k3 | v | k
----+----+----+---+---
  1 |  2 |  3 | 4 | 1
  5 |  6 |  7 | 8 | 5
(2 rows)

-- Test locking, and no LockRows node, when using an ASC table and YB Sequential Scan.
-- (No WHERE clause.)
/*+ SeqScan(yb_locks_tasc) */ EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_tasc FOR UPDATE;
                     QUERY PLAN
-----------------------------------------------------
 LockRows (no-op)
   ->  Seq Scan (Locked FOR UPDATE) on yb_locks_tasc
(2 rows)

/*+ SeqScan(yb_locks_tasc) */ SELECT * FROM yb_locks_tasc FOR UPDATE;
 k
---
 1
 2
 3
(3 rows)

-- For an ASC table, should lock inline, with no LockRows node.
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_tasc ORDER BY k FOR UPDATE;
                                   QUERY PLAN
--------------------------------------------------------------------------------
 LockRows (no-op)
   ->  Index Scan (Locked FOR UPDATE) using yb_locks_tasc_pkey on yb_locks_tasc
(2 rows)

SELECT * FROM yb_locks_tasc ORDER BY k FOR UPDATE;
 k
---
 1
 2
 3
(3 rows)

COMMIT;
-- Test with single-RPC select+lock turned off.
SET yb_lock_pk_single_rpc TO OFF;
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
                      QUERY PLAN
------------------------------------------------------
 LockRows
   ->  Index Scan using yb_locks_t_pkey on yb_locks_t
         Index Cond: (k = 5)
(3 rows)

SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
 k
---
 5
(1 row)

-- Test that with the yb_lock_pk_single_rpc off, SERIALIZABLE still locks during the scan
-- (no LockRows).
BEGIN ISOLATION LEVEL SERIALIZABLE;
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
                                QUERY PLAN
--------------------------------------------------------------------------
 LockRows (no-op)
   ->  Index Scan (Locked FOR UPDATE) using yb_locks_t_pkey on yb_locks_t
         Index Cond: (k = 5)
(3 rows)

SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
 k
---
 5
(1 row)

COMMIT;
SET yb_lock_pk_single_rpc TO ON;
CREATE INDEX ON yb_locks_t2 (v);
-- Test with an index. We use a LockRows node for an index.
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t2 WHERE v=4 FOR UPDATE;
                       QUERY PLAN
---------------------------------------------------------
 LockRows
   ->  Index Scan using yb_locks_t2_v_idx on yb_locks_t2
         Index Cond: (v = 4)
(3 rows)

SELECT * FROM yb_locks_t2 WHERE v=4 FOR UPDATE;
 k1 | k2 | k3 | v
----+----+----+---
  1 |  2 |  3 | 4
(1 row)

-- Test only the indexed column.
EXPLAIN (COSTS OFF)
SELECT v FROM yb_locks_t2 WHERE v=4 FOR UPDATE;
                       QUERY PLAN
---------------------------------------------------------
 LockRows
   ->  Index Scan using yb_locks_t2_v_idx on yb_locks_t2
         Index Cond: (v = 4)
(3 rows)

SELECT v FROM yb_locks_t2 WHERE v=4 FOR UPDATE;
 v
---
 4
(1 row)

-- Isolation level SERIALIZABLE still locks with the scan though (no LockRows).
BEGIN ISOLATION LEVEL SERIALIZABLE;
EXPLAIN (COSTS OFF)
SELECT * FROM yb_locks_t2 WHERE v=4 FOR UPDATE;
                                 QUERY PLAN
-----------------------------------------------------------------------------
 LockRows (no-op)
   ->  Index Scan (Locked FOR UPDATE) using yb_locks_t2_v_idx on yb_locks_t2
         Index Cond: (v = 4)
(3 rows)

SELECT * FROM yb_locks_t2 WHERE v=4 FOR UPDATE;
 k1 | k2 | k3 | v
----+----+----+---
  1 |  2 |  3 | 4
(1 row)

COMMIT;
-- Test partitions.
CREATE TABLE yb_locks_partition (a char PRIMARY KEY) PARTITION BY LIST (a);
CREATE TABLE yb_locks_partition_default PARTITION OF yb_locks_partition DEFAULT;
CREATE TABLE yb_locks_partition_a PARTITION OF yb_locks_partition FOR VALUES IN ('a');
EXPLAIN (COSTS OFF) SELECT * FROM yb_locks_partition WHERE a = 'a' FOR UPDATE;
                                         QUERY PLAN
---------------------------------------------------------------------------------------------
 LockRows
   ->  Index Scan using yb_locks_partition_a_pkey on yb_locks_partition_a yb_locks_partition
         Index Cond: (a = 'a'::bpchar)
(3 rows)

EXPLAIN (COSTS OFF) SELECT * FROM yb_locks_partition WHERE a = 'b' FOR UPDATE;
                                               QUERY PLAN
---------------------------------------------------------------------------------------------------------
 LockRows
   ->  Index Scan using yb_locks_partition_default_pkey on yb_locks_partition_default yb_locks_partition
         Index Cond: (a = 'b'::bpchar)
(3 rows)

BEGIN ISOLATION LEVEL SERIALIZABLE;
EXPLAIN (COSTS OFF) SELECT * FROM yb_locks_partition WHERE a = 'a' FOR UPDATE;
                                                   QUERY PLAN
-----------------------------------------------------------------------------------------------------------------
 LockRows (no-op)
   ->  Index Scan (Locked FOR UPDATE) using yb_locks_partition_a_pkey on yb_locks_partition_a yb_locks_partition
         Index Cond: (a = 'a'::bpchar)
(3 rows)

COMMIT;
-- Test JSON.
EXPLAIN (COSTS OFF, FORMAT JSON)
SELECT * FROM yb_locks_t WHERE k=5 FOR UPDATE;
               QUERY PLAN
----------------------------------------
 [                                     +
   {                                   +
     "Plan": {                         +
       "Node Type": "Index Scan",      +
       "Parallel Aware": false,        +
       "Async Capable": false,         +
       "Lock Type": "FOR UPDATE",      +
       "Scan Direction": "NoMovement", +
       "Index Name": "yb_locks_t_pkey",+
       "Relation Name": "yb_locks_t",  +
       "Alias": "yb_locks_t",          +
       "Index Cond": "(k = 5)"         +
     }                                 +
   }                                   +
 ]
(1 row)

-- Test that prepared statements made in isolation level RR with a LockRows node do not
-- crash when executed in isolation level SERIALIZABLE.
SET yb_lock_pk_single_rpc TO OFF;
-- Store prepared plans right away.
SET yb_test_planner_custom_plan_threshold to 1;
PREPARE yb_locks_plan_rr (int) AS SELECT * FROM yb_locks_t WHERE k=$1 FOR UPDATE;
EXECUTE yb_locks_plan_rr(1);
 k
---
 1
(1 row)

-- The $1 in the EXPLAIN output tells you it's a stored plan.
EXPLAIN (COSTS OFF)
EXECUTE yb_locks_plan_rr(1);
                      QUERY PLAN
------------------------------------------------------
 LockRows
   ->  Index Scan using yb_locks_t_pkey on yb_locks_t
         Index Cond: (k = $1)
(3 rows)

BEGIN ISOLATION LEVEL SERIALIZABLE;
EXECUTE yb_locks_plan_rr(1);
 k
---
 1
(1 row)

-- The LockRows node has a "no-op" annotation.
EXPLAIN (COSTS OFF)
EXECUTE yb_locks_plan_rr(1);
                                QUERY PLAN
--------------------------------------------------------------------------
 LockRows (no-op)
   ->  Index Scan (Locked FOR UPDATE) using yb_locks_t_pkey on yb_locks_t
         Index Cond: (k = $1)
(3 rows)

-- In JSON mode, the LockRows node has an "Executes" field set to false.
EXPLAIN (COSTS OFF, FORMAT JSON)
EXECUTE yb_locks_plan_rr(1);
                 QUERY PLAN
--------------------------------------------
 [                                         +
   {                                       +
     "Plan": {                             +
       "Node Type": "LockRows",            +
       "Parallel Aware": false,            +
       "Async Capable": false,             +
       "Executes": false,                  +
       "Plans": [                          +
         {                                 +
           "Node Type": "Index Scan",      +
           "Parent Relationship": "Outer", +
           "Parallel Aware": false,        +
           "Async Capable": false,         +
           "Lock Type": "FOR UPDATE",      +
           "Scan Direction": "NoMovement", +
           "Index Name": "yb_locks_t_pkey",+
           "Relation Name": "yb_locks_t",  +
           "Alias": "yb_locks_t",          +
           "Index Cond": "(k = $1)"        +
         }                                 +
       ]                                   +
     }                                     +
   }                                       +
 ]
(1 row)

COMMIT;
-- Test that prepared statements made in isolation level SERIALIZABLE, but for a PK, are
-- able to lock PK when run in RR and RC.
SET yb_lock_pk_single_rpc TO ON;
BEGIN ISOLATION LEVEL SERIALIZABLE;
PREPARE yb_locks_plan_ser (int) AS SELECT * FROM yb_locks_t WHERE k=$1 FOR UPDATE;
EXECUTE yb_locks_plan_ser(1);
 k
---
 1
(1 row)

EXPLAIN (COSTS OFF)
EXECUTE yb_locks_plan_ser(1);
                             QUERY PLAN
--------------------------------------------------------------------
 Index Scan (Locked FOR UPDATE) using yb_locks_t_pkey on yb_locks_t
   Index Cond: (k = $1)
(2 rows)

COMMIT;
EXECUTE yb_locks_plan_ser(1);
 k
---
 1
(1 row)

EXPLAIN (COSTS OFF)
EXECUTE yb_locks_plan_ser(1);
                             QUERY PLAN
--------------------------------------------------------------------
 Index Scan (Locked FOR UPDATE) using yb_locks_t_pkey on yb_locks_t
   Index Cond: (k = $1)
(2 rows)

-- Test that prepared statements made in isolation level SERIALIZABLE, for a non-PK, have
-- a LockRows node that functions in RR and RC.
BEGIN ISOLATION LEVEL SERIALIZABLE;
PREPARE yb_locks_plan_ser_all (int) AS SELECT * FROM yb_locks_t FOR UPDATE;
EXECUTE yb_locks_plan_ser_all(1);
 k
---
 5
 1
 4
 2
 3
(5 rows)

EXPLAIN (COSTS OFF)
EXECUTE yb_locks_plan_ser_all(1);
                    QUERY PLAN
--------------------------------------------------
 LockRows (no-op)
   ->  Seq Scan (Locked FOR UPDATE) on yb_locks_t
(2 rows)

COMMIT;
EXECUTE yb_locks_plan_ser_all(1);
 k
---
 5
 1
 4
 2
 3
(5 rows)

EXPLAIN (COSTS OFF)
EXECUTE yb_locks_plan_ser_all(1);
          QUERY PLAN
------------------------------
 LockRows
   ->  Seq Scan on yb_locks_t
(2 rows)

-- Reset
SET yb_lock_pk_single_rpc TO DEFAULT;
SET yb_test_planner_custom_plan_threshold TO DEFAULT;
DROP TABLE yb_locks_t, yb_locks_t2, yb_locks_tasc, yb_locks_partition;
