-- test yb_hash_code as a function
SELECT yb_hash_code(1,2,3);
 yb_hash_code
--------------
        57262
(1 row)

SELECT yb_hash_code(1,2,'abc'::text);
 yb_hash_code
--------------
        33808
(1 row)

-- test on unsupported primary key types
SELECT yb_hash_code('asdf');
ERROR:  undefined datatype given to yb_hash_code
SELECT yb_hash_code('{"a": {"b":{"c": "foo"}}}'::jsonb);
ERROR:  unsupported datatype given to yb_hash_code
DETAIL:  Only types supported by HASH key columns are allowed.
HINT:  Use explicit casts to ensure input types are as desired.
SELECT yb_hash_code(ARRAY[1,2,3]);
ERROR:  unsupported datatype given to yb_hash_code
DETAIL:  Only types supported by HASH key columns are allowed.
HINT:  Use explicit casts to ensure input types are as desired.
-- test basic filtering on different datatypes with yb_hash_code
CREATE TABLE test_table_int (x INT PRIMARY KEY);
INSERT INTO test_table_int SELECT generate_series(1, 20);
SELECT yb_hash_code(x), x FROM test_table_int;
 yb_hash_code | x
--------------+----
         2675 |  5
         4624 |  1
         7321 | 11
        14321 | 13
        15839 | 16
        16842 | 12
        18581 | 15
        20056 |  6
        21199 |  7
        23904 |  9
        28919 | 17
        29135 | 10
        31730 | 19
        40623 |  4
        41074 | 18
        49348 |  2
        50082 |  8
        52593 | 14
        64672 |  3
        65252 | 20
(20 rows)

DROP TABLE test_table_int;
CREATE TABLE test_table_real (x REAL PRIMARY KEY);
INSERT INTO test_table_real SELECT generate_series(1, 20);
SELECT yb_hash_code(x), x FROM test_table_real;
 yb_hash_code | x
--------------+----
         1379 | 17
         1395 | 14
         1462 |  1
         2447 |  4
        10957 | 13
        12852 |  8
        13407 | 16
        15589 |  7
        15765 | 18
        17903 | 12
        20736 |  6
        24476 | 19
        31190 |  5
        36591 | 20
        38027 |  3
        40495 |  2
        54629 | 10
        60807 | 15
        60956 |  9
        62813 | 11
(20 rows)

DROP TABLE test_table_real;
CREATE TABLE test_table_double (x DOUBLE PRECISION PRIMARY KEY);
INSERT INTO test_table_double SELECT generate_series(1, 20);
SELECT yb_hash_code(x), x FROM test_table_double;
 yb_hash_code | x
--------------+----
         1454 | 19
         4391 |  1
         7352 |  4
        13543 |  6
        14302 | 20
        16387 | 13
        20278 | 12
        22260 |  9
        23819 |  5
        27150 |  3
        28532 | 11
        31074 | 18
        34735 | 15
        35915 | 10
        36000 | 17
        37981 |  8
        42560 |  7
        47639 | 16
        50080 | 14
        57660 |  2
(20 rows)

DROP TABLE test_table_double;
CREATE TABLE test_table_small (x SMALLINT PRIMARY KEY);
INSERT INTO test_table_small SELECT generate_series(1, 20);
SELECT yb_hash_code(x), x FROM test_table_small;
 yb_hash_code | x
--------------+----
         1049 |  4
         2923 | 14
        13059 |  1
        16740 | 13
        18377 | 20
        26637 |  2
        26727 |  7
        27386 | 11
        27610 | 15
        29352 |  3
        30717 |  8
        35517 |  5
        35577 | 16
        48580 |  6
        49544 | 19
        50772 |  9
        51191 | 12
        51845 | 18
        53991 | 10
        63800 | 17
(20 rows)

DROP TABLE test_table_small;
CREATE TABLE test_table_text (x TEXT PRIMARY KEY);
INSERT INTO test_table_text SELECT generate_series(800001, 800020);
SELECT yb_hash_code(x), x FROM test_table_text;
 yb_hash_code |   x
--------------+--------
          887 | 800018
         3842 | 800012
         4509 | 800015
         8102 | 800005
        13531 | 800013
        16739 | 800014
        18864 | 800008
        20355 | 800010
        23039 | 800016
        23917 | 800007
        29019 | 800002
        39633 | 800001
        41202 | 800020
        42996 | 800003
        52091 | 800009
        58508 | 800004
        59776 | 800019
        59778 | 800006
        61648 | 800017
        64428 | 800011
(20 rows)

DROP TABLE test_table_text;
CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');
SELECT yb_hash_code('sad'::mood);
 yb_hash_code
--------------
         6308
(1 row)

SELECT yb_hash_code('happy'::mood);
 yb_hash_code
--------------
         1243
(1 row)

CREATE TABLE test_table_mood (x mood, y INT, PRIMARY KEY((x,y) HASH));
INSERT INTO test_table_mood VALUES ('sad'::mood, 1), ('happy'::mood, 4),
('ok'::mood, 4), ('sad'::mood, 34), ('ok'::mood, 23);
SELECT yb_hash_code(x,y), * FROM test_table_mood;
 yb_hash_code |   x   | y
--------------+-------+----
         7098 | ok    |  4
        19471 | ok    | 23
        43113 | happy |  4
        46345 | sad   |  1
        60656 | sad   | 34
(5 rows)

DROP TABLE test_table_mood;
DROP TYPE mood;
-- test basic pushdown on a table with one primary hash key column
CREATE TABLE test_table_one_primary (x INT PRIMARY KEY, y INT);
INSERT INTO test_table_one_primary SELECT i,i FROM generate_series(1, 10000) i;
SET yb_explain_hide_non_deterministic_fields = true;
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM test_table_one_primary WHERE yb_hash_code(x) = 10427;
                                           QUERY PLAN
------------------------------------------------------------------------------------------------
 Index Scan using test_table_one_primary_pkey on test_table_one_primary (actual rows=1 loops=1)
   Index Cond: (yb_hash_code(x) = 10427)
(2 rows)

SELECT * FROM test_table_one_primary WHERE yb_hash_code(x) = 10427;
  x   |  y
------+------
 3381 | 3381
(1 row)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM test_table_one_primary WHERE yb_hash_code(x) < 512;
                                           QUERY PLAN
-------------------------------------------------------------------------------------------------
 Index Scan using test_table_one_primary_pkey on test_table_one_primary (actual rows=85 loops=1)
   Index Cond: (yb_hash_code(x) < 512)
(2 rows)

SELECT * FROM test_table_one_primary WHERE yb_hash_code(x) < 512 LIMIT 5;
  x   |  y
------+------
  854 |  854
 9643 | 9643
 1862 | 1862
 8965 | 8965
 7947 | 7947
(5 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT x, yb_hash_code(x) FROM test_table_one_primary WHERE x IN (1, 2, 3, 4) AND yb_hash_code(x) < 50000 ORDER BY x;
                                              QUERY PLAN
------------------------------------------------------------------------------------------------------
 Sort (actual rows=3 loops=1)
   Sort Key: x
   Sort Method: quicksort
   ->  Index Scan using test_table_one_primary_pkey on test_table_one_primary (actual rows=3 loops=1)
         Index Cond: ((x = ANY ('{1,2,3,4}'::integer[])) AND (yb_hash_code(x) < 50000))
         Rows Removed by Index Recheck: 1
(6 rows)

SELECT x, yb_hash_code(x) FROM test_table_one_primary WHERE x IN (1, 2, 3, 4) AND yb_hash_code(x) < 50000 ORDER BY x;
 x | yb_hash_code
---+--------------
 1 |         4624
 2 |        49348
 4 |        40623
(3 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT yb_hash_code(x) FROM test_table_one_primary WHERE yb_hash_code(x) <= 20 AND yb_hash_code(x) < 9;
                                           QUERY PLAN
------------------------------------------------------------------------------------------------
 Index Scan using test_table_one_primary_pkey on test_table_one_primary (actual rows=1 loops=1)
   Index Cond: ((yb_hash_code(x) <= 20) AND (yb_hash_code(x) < 9))
(2 rows)

SELECT yb_hash_code(x) FROM test_table_one_primary WHERE yb_hash_code(x) <= 20 AND yb_hash_code(x) < 9;
 yb_hash_code
--------------
            3
(1 row)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT yb_hash_code(x) FROM test_table_one_primary WHERE yb_hash_code(x) <= 20 AND yb_hash_code(x) > 90;
                                           QUERY PLAN
------------------------------------------------------------------------------------------------
 Index Scan using test_table_one_primary_pkey on test_table_one_primary (actual rows=0 loops=1)
   Index Cond: ((yb_hash_code(x) <= 20) AND (yb_hash_code(x) > 90))
(2 rows)

SELECT yb_hash_code(x) FROM test_table_one_primary WHERE yb_hash_code(x) <= 20 AND yb_hash_code(x) > 90;
 yb_hash_code
--------------
(0 rows)

-- this should not be pushed down as (x,y) is not a hash primary key yet
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM test_table_one_primary WHERE yb_hash_code(x, y) < 512;
                         QUERY PLAN
-------------------------------------------------------------
 Seq Scan on test_table_one_primary (actual rows=76 loops=1)
   Filter: (yb_hash_code(x, y) < 512)
   Rows Removed by Filter: 9924
(3 rows)

SELECT * FROM test_table_one_primary WHERE yb_hash_code(x, y) < 512 LIMIT 5;
  x   |  y
------+------
 1862 | 1862
 5530 | 5530
 5796 | 5796
  243 |  243
 9891 | 9891
(5 rows)

-- pushdown on yb_hash_code(x,y) should work after this index
-- on (x,y) hash is created
CREATE INDEX test_secondary ON test_table_one_primary ((x, y) HASH);
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM test_table_one_primary WHERE yb_hash_code(x, y) < 512;
                                       QUERY PLAN
-----------------------------------------------------------------------------------------
 Index Only Scan using test_secondary on test_table_one_primary (actual rows=76 loops=1)
   Index Cond: (yb_hash_code(x, y) < 512)
   Heap Fetches: 0
(3 rows)

SELECT * FROM test_table_one_primary WHERE yb_hash_code(x, y) < 512 LIMIT 5;
  x   |  y
------+------
 2430 | 2430
 8867 | 8867
 7400 | 7400
 3129 | 3129
 8546 | 8546
(5 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM test_table_one_primary WHERE yb_hash_code(x, y) = 10;
                                       QUERY PLAN
----------------------------------------------------------------------------------------
 Index Only Scan using test_secondary on test_table_one_primary (actual rows=2 loops=1)
   Index Cond: (yb_hash_code(x, y) = 10)
   Heap Fetches: 0
(3 rows)

SELECT * FROM test_table_one_primary WHERE yb_hash_code(x, y) = 10;
  x   |  y
------+------
 2430 | 2430
 8867 | 8867
(2 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT yb_hash_code(x, y) FROM test_table_one_primary WHERE yb_hash_code(x, y) <= 20 AND yb_hash_code(x, y) < 11;
                                       QUERY PLAN
----------------------------------------------------------------------------------------
 Index Only Scan using test_secondary on test_table_one_primary (actual rows=2 loops=1)
   Index Cond: ((yb_hash_code(x, y) <= 20) AND (yb_hash_code(x, y) < 11))
   Heap Fetches: 0
(3 rows)

SELECT yb_hash_code(x, y) FROM test_table_one_primary WHERE yb_hash_code(x, y) <= 20 AND yb_hash_code(x, y) < 11;
 yb_hash_code
--------------
           10
           10
(2 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT yb_hash_code(x, y) FROM test_table_one_primary WHERE yb_hash_code(x, y) <= 20 AND yb_hash_code(x, y) > 110;
                                       QUERY PLAN
----------------------------------------------------------------------------------------
 Index Only Scan using test_secondary on test_table_one_primary (actual rows=0 loops=1)
   Index Cond: ((yb_hash_code(x, y) <= 20) AND (yb_hash_code(x, y) > 110))
   Heap Fetches: 0
(3 rows)

SELECT yb_hash_code(x, y) FROM test_table_one_primary WHERE yb_hash_code(x, y) <= 20 AND yb_hash_code(x, y) > 110;
 yb_hash_code
--------------
(0 rows)

-- testing with a qualification on yb_hash_code(x) and x
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM test_table_one_primary WHERE yb_hash_code(x) < 512 AND x < 90;
                                           QUERY PLAN
------------------------------------------------------------------------------------------------
 Index Scan using test_table_one_primary_pkey on test_table_one_primary (actual rows=1 loops=1)
   Index Cond: (yb_hash_code(x) < 512)
   Storage Filter: (x < 90)
(3 rows)

SELECT * FROM test_table_one_primary WHERE yb_hash_code(x) < 512 AND x < 90;
 x  | y
----+----
 81 | 81
(1 row)

-- should not be pushed down as the selectivity of this filter is too high
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM test_table_one_primary WHERE yb_hash_code(x, y) < 60000;
                          QUERY PLAN
---------------------------------------------------------------
 Seq Scan on test_table_one_primary (actual rows=9122 loops=1)
   Filter: (yb_hash_code(x, y) < 60000)
   Rows Removed by Filter: 878
(3 rows)

-- should select the more selective index on x
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM test_table_one_primary WHERE yb_hash_code(x, y) < 60000 AND yb_hash_code(x) > 60000;
                                            QUERY PLAN
--------------------------------------------------------------------------------------------------
 Index Scan using test_table_one_primary_pkey on test_table_one_primary (actual rows=723 loops=1)
   Index Cond: (yb_hash_code(x) > 60000)
   Filter: (yb_hash_code(x, y) < 60000)
   Rows Removed by Filter: 78
(4 rows)

-- this should not be pushed down as the order of (x,y) is not correct
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM test_table_one_primary WHERE yb_hash_code(y,x) < 512;
                         QUERY PLAN
-------------------------------------------------------------
 Seq Scan on test_table_one_primary (actual rows=76 loops=1)
   Filter: (yb_hash_code(y, x) < 512)
   Rows Removed by Filter: 9924
(3 rows)

SELECT * FROM test_table_one_primary WHERE yb_hash_code(y,x) < 512 LIMIT 7;
  x   |  y
------+------
 1862 | 1862
 5530 | 5530
 5796 | 5796
  243 |  243
 9891 | 9891
  629 |  629
 3129 | 3129
(7 rows)

-- should not be pushed down as we don't support pushdown on IN filters yet
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE)  SELECT * FROM test_table_one_primary WHERE yb_hash_code(x, y) IN (1, 200, 326);
                           QUERY PLAN
-----------------------------------------------------------------
 Seq Scan on test_table_one_primary (actual rows=1 loops=1)
   Filter: (yb_hash_code(x, y) = ANY ('{1,200,326}'::integer[]))
   Rows Removed by Filter: 9999
(3 rows)

SELECT * FROM test_table_one_primary WHERE yb_hash_code(x, y) IN (1, 200, 326);
  x   |  y
------+------
 1862 | 1862
(1 row)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE)  SELECT * FROM test_table_one_primary WHERE yb_hash_code(x, y) BETWEEN 4 AND 512;
                                       QUERY PLAN
-----------------------------------------------------------------------------------------
 Index Only Scan using test_secondary on test_table_one_primary (actual rows=76 loops=1)
   Index Cond: ((yb_hash_code(x, y) >= 4) AND (yb_hash_code(x, y) <= 512))
   Heap Fetches: 0
(3 rows)

SELECT * FROM test_table_one_primary WHERE yb_hash_code(x, y) BETWEEN 4 AND 512 LIMIT 5;
  x   |  y
------+------
 2430 | 2430
 8867 | 8867
 7400 | 7400
 3129 | 3129
 8546 | 8546
(5 rows)

DROP TABLE test_table_one_primary;
-- testing pushdown where the hash column is of type text
CREATE TABLE text_table (hr text, ti text, tj text, i int, j int, primary key (hr));
INSERT INTO text_table SELECT i::TEXT, i::TEXT, i::TEXT, i, i FROM generate_series(1,10000) i;
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM text_table WHERE yb_hash_code(hr) = 30;
                               QUERY PLAN
------------------------------------------------------------------------
 Index Scan using text_table_pkey on text_table (actual rows=1 loops=1)
   Index Cond: (yb_hash_code(hr) = 30)
(2 rows)

SELECT * FROM text_table WHERE yb_hash_code(hr) = 30;
  hr  |  ti  |  tj  |  i   |  j
------+------+------+------+------
 8646 | 8646 | 8646 | 8646 | 8646
(1 row)

-- testing pushdown on a secondary index with a text hash column
CREATE INDEX textidx ON text_table (tj);
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM text_table WHERE yb_hash_code(tj) = 63;
                           QUERY PLAN
----------------------------------------------------------------
 Index Scan using textidx on text_table (actual rows=1 loops=1)
   Index Cond: (yb_hash_code(tj) = 63)
(2 rows)

SELECT * FROM text_table WHERE yb_hash_code(tj) = 63;
  hr  |  ti  |  tj  |  i   |  j
------+------+------+------+------
 1363 | 1363 | 1363 | 1363 | 1363
(1 row)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * FROM text_table WHERE yb_hash_code(tj) <= 63;
                           QUERY PLAN
-----------------------------------------------------------------
 Index Scan using textidx on text_table (actual rows=10 loops=1)
   Index Cond: (yb_hash_code(tj) <= 63)
(2 rows)

SELECT * FROM text_table WHERE yb_hash_code(tj) <= 63;
  hr  |  ti  |  tj  |  i   |  j
------+------+------+------+------
 4999 | 4999 | 4999 | 4999 | 4999
 8300 | 8300 | 8300 | 8300 | 8300
 6918 | 6918 | 6918 | 6918 | 6918
 912  | 912  | 912  |  912 |  912
 8646 | 8646 | 8646 | 8646 | 8646
 4946 | 4946 | 4946 | 4946 | 4946
 6920 | 6920 | 6920 | 6920 | 6920
 6785 | 6785 | 6785 | 6785 | 6785
 5659 | 5659 | 5659 | 5659 | 5659
 1363 | 1363 | 1363 | 1363 | 1363
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT tj FROM text_table WHERE yb_hash_code(tj) <= 63;
                              QUERY PLAN
----------------------------------------------------------------------
 Index Only Scan using textidx on text_table (actual rows=10 loops=1)
   Index Cond: (yb_hash_code(tj) <= 63)
   Heap Fetches: 0
(3 rows)

SELECT tj FROM text_table WHERE yb_hash_code(tj) <= 63;
  tj
------
 4999
 8300
 6918
 912
 8646
 4946
 6920
 6785
 5659
 1363
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT hr FROM text_table WHERE yb_hash_code(tj) < 63;
                           QUERY PLAN
----------------------------------------------------------------
 Index Scan using textidx on text_table (actual rows=9 loops=1)
   Index Cond: (yb_hash_code(tj) < 63)
(2 rows)

SELECT hr FROM text_table WHERE yb_hash_code(tj) < 63;
  hr
------
 4999
 8300
 6918
 912
 8646
 4946
 6920
 6785
 5659
(9 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT tj FROM text_table WHERE 63 >= yb_hash_code(tj);
                              QUERY PLAN
----------------------------------------------------------------------
 Index Only Scan using textidx on text_table (actual rows=10 loops=1)
   Index Cond: (yb_hash_code(tj) <= 63)
   Heap Fetches: 0
(3 rows)

SELECT tj FROM text_table WHERE 63 >= yb_hash_code(tj);
  tj
------
 4999
 8300
 6918
 912
 8646
 4946
 6920
 6785
 5659
 1363
(10 rows)

DROP TABLE text_table;
-- testing on a table with multiple hash key columns on
-- multiple types
CREATE TABLE test_table_multi_col_key(h1 BIGINT, h2 FLOAT, h3 TEXT, r1 TIMESTAMPTZ, r2 DOUBLE PRECISION, v1 INT, v2  DATE, v3 BOOLEAN, PRIMARY KEY ((h1, h2, h3) HASH, r1, r2));
INSERT INTO test_table_multi_col_key SELECT i::BIGINT, i::FLOAT, i::TEXT, '2018-12-18 04:59:54-08'::TIMESTAMPTZ, i::DOUBLE PRECISION, i::INT, '2016-06-02'::DATE,(i%2)::BOOLEAN FROM generate_series(1, 10000) i;
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3) < 60;
                                             QUERY PLAN
----------------------------------------------------------------------------------------------------
 Index Scan using test_table_multi_col_key_pkey on test_table_multi_col_key (actual rows=8 loops=1)
   Index Cond: (yb_hash_code(h1, h2, h3) < 60)
(2 rows)

SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3) < 60;
  h1  |  h2  |  h3  |              r1              |  r2  |  v1  |     v2     | v3
------+------+------+------------------------------+------+------+------------+----
 5258 | 5258 | 5258 | Tue Dec 18 04:59:54 2018 PST | 5258 | 5258 | 06-02-2016 | f
 5214 | 5214 | 5214 | Tue Dec 18 04:59:54 2018 PST | 5214 | 5214 | 06-02-2016 | f
 8274 | 8274 | 8274 | Tue Dec 18 04:59:54 2018 PST | 8274 | 8274 | 06-02-2016 | f
  651 |  651 | 651  | Tue Dec 18 04:59:54 2018 PST |  651 |  651 | 06-02-2016 | t
  314 |  314 | 314  | Tue Dec 18 04:59:54 2018 PST |  314 |  314 | 06-02-2016 | f
 1261 | 1261 | 1261 | Tue Dec 18 04:59:54 2018 PST | 1261 | 1261 | 06-02-2016 | t
 4204 | 4204 | 4204 | Tue Dec 18 04:59:54 2018 PST | 4204 | 4204 | 06-02-2016 | f
 2215 | 2215 | 2215 | Tue Dec 18 04:59:54 2018 PST | 2215 | 2215 | 06-02-2016 | t
(8 rows)

-- limit and order by
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3) < 60 LIMIT 3;
                                                QUERY PLAN
----------------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Index Scan using test_table_multi_col_key_pkey on test_table_multi_col_key (actual rows=3 loops=1)
         Index Cond: (yb_hash_code(h1, h2, h3) < 60)
(3 rows)

SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3) < 60 LIMIT 3;
  h1  |  h2  |  h3  |              r1              |  r2  |  v1  |     v2     | v3
------+------+------+------------------------------+------+------+------------+----
 5258 | 5258 | 5258 | Tue Dec 18 04:59:54 2018 PST | 5258 | 5258 | 06-02-2016 | f
 5214 | 5214 | 5214 | Tue Dec 18 04:59:54 2018 PST | 5214 | 5214 | 06-02-2016 | f
 8274 | 8274 | 8274 | Tue Dec 18 04:59:54 2018 PST | 8274 | 8274 | 06-02-2016 | f
(3 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3) < 60 ORDER BY h1;
                                                QUERY PLAN
----------------------------------------------------------------------------------------------------------
 Sort (actual rows=8 loops=1)
   Sort Key: h1
   Sort Method: quicksort
   ->  Index Scan using test_table_multi_col_key_pkey on test_table_multi_col_key (actual rows=8 loops=1)
         Index Cond: (yb_hash_code(h1, h2, h3) < 60)
(5 rows)

SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3) < 60 ORDER BY h1;
  h1  |  h2  |  h3  |              r1              |  r2  |  v1  |     v2     | v3
------+------+------+------------------------------+------+------+------------+----
  314 |  314 | 314  | Tue Dec 18 04:59:54 2018 PST |  314 |  314 | 06-02-2016 | f
  651 |  651 | 651  | Tue Dec 18 04:59:54 2018 PST |  651 |  651 | 06-02-2016 | t
 1261 | 1261 | 1261 | Tue Dec 18 04:59:54 2018 PST | 1261 | 1261 | 06-02-2016 | t
 2215 | 2215 | 2215 | Tue Dec 18 04:59:54 2018 PST | 2215 | 2215 | 06-02-2016 | t
 4204 | 4204 | 4204 | Tue Dec 18 04:59:54 2018 PST | 4204 | 4204 | 06-02-2016 | f
 5214 | 5214 | 5214 | Tue Dec 18 04:59:54 2018 PST | 5214 | 5214 | 06-02-2016 | f
 5258 | 5258 | 5258 | Tue Dec 18 04:59:54 2018 PST | 5258 | 5258 | 06-02-2016 | f
 8274 | 8274 | 8274 | Tue Dec 18 04:59:54 2018 PST | 8274 | 8274 | 06-02-2016 | f
(8 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3) < 60 ORDER BY h1 LIMIT 3;
                                                   QUERY PLAN
----------------------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Sort (actual rows=3 loops=1)
         Sort Key: h1
         Sort Method: top-N heapsort
         ->  Index Scan using test_table_multi_col_key_pkey on test_table_multi_col_key (actual rows=8 loops=1)
               Index Cond: (yb_hash_code(h1, h2, h3) < 60)
(6 rows)

SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3) < 60 ORDER BY h1 LIMIT 3;
  h1  |  h2  |  h3  |              r1              |  r2  |  v1  |     v2     | v3
------+------+------+------------------------------+------+------+------------+----
  314 |  314 | 314  | Tue Dec 18 04:59:54 2018 PST |  314 |  314 | 06-02-2016 | f
  651 |  651 | 651  | Tue Dec 18 04:59:54 2018 PST |  651 |  651 | 06-02-2016 | t
 1261 | 1261 | 1261 | Tue Dec 18 04:59:54 2018 PST | 1261 | 1261 | 06-02-2016 | t
(3 rows)

-- create an index with the same set of primary keys as
-- the primary index
CREATE INDEX multi_key_index_1 ON test_table_multi_col_key((h1,h2,h3) HASH, r1 ASC, r2 ASC);
-- create other indexes on other columsn that are not
-- hashed in the primary index
CREATE INDEX multi_key_index_2 ON test_table_multi_col_key((r1, r2, v1) HASH, v3, v2);
CREATE INDEX multi_key_index_3 ON test_table_multi_col_key((r1, r2, v2, v3) HASH, v1);
-- index only scan on multi_key_index
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT h1 from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3) < 60;
                                         QUERY PLAN
---------------------------------------------------------------------------------------------
 Index Only Scan using multi_key_index_1 on test_table_multi_col_key (actual rows=8 loops=1)
   Index Cond: (yb_hash_code(h1, h2, h3) < 60)
   Heap Fetches: 0
(3 rows)

SELECT h1 from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3) < 60;
  h1
------
 5258
 5214
 8274
  651
  314
 1261
 4204
 2215
(8 rows)

-- index scan on primary key index
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3) < 60;
                                             QUERY PLAN
----------------------------------------------------------------------------------------------------
 Index Scan using test_table_multi_col_key_pkey on test_table_multi_col_key (actual rows=8 loops=1)
   Index Cond: (yb_hash_code(h1, h2, h3) < 60)
(2 rows)

SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3) < 60;
  h1  |  h2  |  h3  |              r1              |  r2  |  v1  |     v2     | v3
------+------+------+------------------------------+------+------+------------+----
 5258 | 5258 | 5258 | Tue Dec 18 04:59:54 2018 PST | 5258 | 5258 | 06-02-2016 | f
 5214 | 5214 | 5214 | Tue Dec 18 04:59:54 2018 PST | 5214 | 5214 | 06-02-2016 | f
 8274 | 8274 | 8274 | Tue Dec 18 04:59:54 2018 PST | 8274 | 8274 | 06-02-2016 | f
  651 |  651 | 651  | Tue Dec 18 04:59:54 2018 PST |  651 |  651 | 06-02-2016 | t
  314 |  314 | 314  | Tue Dec 18 04:59:54 2018 PST |  314 |  314 | 06-02-2016 | f
 1261 | 1261 | 1261 | Tue Dec 18 04:59:54 2018 PST | 1261 | 1261 | 06-02-2016 | t
 4204 | 4204 | 4204 | Tue Dec 18 04:59:54 2018 PST | 4204 | 4204 | 06-02-2016 | f
 2215 | 2215 | 2215 | Tue Dec 18 04:59:54 2018 PST | 2215 | 2215 | 06-02-2016 | t
(8 rows)

-- sequential scan as the selectivity of this filter is
-- high
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3) < 60000 LIMIT 10;
                             QUERY PLAN
---------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Seq Scan on test_table_multi_col_key (actual rows=10 loops=1)
         Filter: (yb_hash_code(h1, h2, h3) < 60000)
(3 rows)

SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3) < 60000 LIMIT 10;
  h1  |  h2  |  h3  |              r1              |  r2  |  v1  |     v2     | v3
------+------+------+------------------------------+------+------+------------+----
 5258 | 5258 | 5258 | Tue Dec 18 04:59:54 2018 PST | 5258 | 5258 | 06-02-2016 | f
 5214 | 5214 | 5214 | Tue Dec 18 04:59:54 2018 PST | 5214 | 5214 | 06-02-2016 | f
 8274 | 8274 | 8274 | Tue Dec 18 04:59:54 2018 PST | 8274 | 8274 | 06-02-2016 | f
  651 |  651 | 651  | Tue Dec 18 04:59:54 2018 PST |  651 |  651 | 06-02-2016 | t
  314 |  314 | 314  | Tue Dec 18 04:59:54 2018 PST |  314 |  314 | 06-02-2016 | f
 1261 | 1261 | 1261 | Tue Dec 18 04:59:54 2018 PST | 1261 | 1261 | 06-02-2016 | t
 4204 | 4204 | 4204 | Tue Dec 18 04:59:54 2018 PST | 4204 | 4204 | 06-02-2016 | f
 2215 | 2215 | 2215 | Tue Dec 18 04:59:54 2018 PST | 2215 | 2215 | 06-02-2016 | t
 5783 | 5783 | 5783 | Tue Dec 18 04:59:54 2018 PST | 5783 | 5783 | 06-02-2016 | t
 6291 | 6291 | 6291 | Tue Dec 18 04:59:54 2018 PST | 6291 | 6291 | 06-02-2016 | t
(10 rows)

-- testing pushdown where the input to the yb_hash_code
-- does not match any index hash key
-- sequential scan as no index has (h1,h2,h3,v1) as the
-- hash key
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3,v1) < 60 LIMIT 10;
                             QUERY PLAN
---------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Seq Scan on test_table_multi_col_key (actual rows=10 loops=1)
         Filter: (yb_hash_code(h1, h2, h3, v1) < 60)
         Rows Removed by Filter: 6445
(4 rows)

SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h2,h3,v1) < 60 LIMIT 10;
  h1  |  h2  |  h3  |              r1              |  r2  |  v1  |     v2     | v3
------+------+------+------------------------------+------+------+------------+----
 6966 | 6966 | 6966 | Tue Dec 18 04:59:54 2018 PST | 6966 | 6966 | 06-02-2016 | f
 9179 | 9179 | 9179 | Tue Dec 18 04:59:54 2018 PST | 9179 | 9179 | 06-02-2016 | t
 2727 | 2727 | 2727 | Tue Dec 18 04:59:54 2018 PST | 2727 | 2727 | 06-02-2016 | t
 1338 | 1338 | 1338 | Tue Dec 18 04:59:54 2018 PST | 1338 | 1338 | 06-02-2016 | f
 6686 | 6686 | 6686 | Tue Dec 18 04:59:54 2018 PST | 6686 | 6686 | 06-02-2016 | f
 4448 | 4448 | 4448 | Tue Dec 18 04:59:54 2018 PST | 4448 | 4448 | 06-02-2016 | f
 7669 | 7669 | 7669 | Tue Dec 18 04:59:54 2018 PST | 7669 | 7669 | 06-02-2016 | t
 7275 | 7275 | 7275 | Tue Dec 18 04:59:54 2018 PST | 7275 | 7275 | 06-02-2016 | t
 9145 | 9145 | 9145 | Tue Dec 18 04:59:54 2018 PST | 9145 | 9145 | 06-02-2016 | t
 6927 | 6927 | 6927 | Tue Dec 18 04:59:54 2018 PST | 6927 | 6927 | 06-02-2016 | t
(10 rows)

-- sequential scan as no index has (h1,h3,h2) as the
-- hash key
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h3,h2) < 60 LIMIT 10;
                             QUERY PLAN
---------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Seq Scan on test_table_multi_col_key (actual rows=10 loops=1)
         Filter: (yb_hash_code(h1, h3, h2) < 60)
         Rows Removed by Filter: 8628
(4 rows)

SELECT * from test_table_multi_col_key WHERE yb_hash_code(h1,h3,h2) < 60 LIMIT 10;
  h1  |  h2  |  h3  |              r1              |  r2  |  v1  |     v2     | v3
------+------+------+------------------------------+------+------+------------+----
 1076 | 1076 | 1076 | Tue Dec 18 04:59:54 2018 PST | 1076 | 1076 | 06-02-2016 | f
 5545 | 5545 | 5545 | Tue Dec 18 04:59:54 2018 PST | 5545 | 5545 | 06-02-2016 | t
 6373 | 6373 | 6373 | Tue Dec 18 04:59:54 2018 PST | 6373 | 6373 | 06-02-2016 | t
 3834 | 3834 | 3834 | Tue Dec 18 04:59:54 2018 PST | 3834 | 3834 | 06-02-2016 | f
  288 |  288 | 288  | Tue Dec 18 04:59:54 2018 PST |  288 |  288 | 06-02-2016 | f
 7820 | 7820 | 7820 | Tue Dec 18 04:59:54 2018 PST | 7820 | 7820 | 06-02-2016 | f
 4065 | 4065 | 4065 | Tue Dec 18 04:59:54 2018 PST | 4065 | 4065 | 06-02-2016 | t
  385 |  385 | 385  | Tue Dec 18 04:59:54 2018 PST |  385 |  385 | 06-02-2016 | t
 9903 | 9903 | 9903 | Tue Dec 18 04:59:54 2018 PST | 9903 | 9903 | 06-02-2016 | t
  563 |  563 | 563  | Tue Dec 18 04:59:54 2018 PST |  563 |  563 | 06-02-2016 | t
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * from test_table_multi_col_key WHERE yb_hash_code(r1,v3,v2,r2) < 60 LIMIT 10;
                             QUERY PLAN
---------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Seq Scan on test_table_multi_col_key (actual rows=10 loops=1)
         Filter: (yb_hash_code(r1, v3, v2, r2) < 60)
         Rows Removed by Filter: 8001
(4 rows)

SELECT * from test_table_multi_col_key WHERE yb_hash_code(r1,v3,v2,r2) < 60 LIMIT 10;
  h1  |  h2  |  h3  |              r1              |  r2  |  v1  |     v2     | v3
------+------+------+------------------------------+------+------+------------+----
 4847 | 4847 | 4847 | Tue Dec 18 04:59:54 2018 PST | 4847 | 4847 | 06-02-2016 | t
 7474 | 7474 | 7474 | Tue Dec 18 04:59:54 2018 PST | 7474 | 7474 | 06-02-2016 | f
 1627 | 1627 | 1627 | Tue Dec 18 04:59:54 2018 PST | 1627 | 1627 | 06-02-2016 | t
 6694 | 6694 | 6694 | Tue Dec 18 04:59:54 2018 PST | 6694 | 6694 | 06-02-2016 | f
 5413 | 5413 | 5413 | Tue Dec 18 04:59:54 2018 PST | 5413 | 5413 | 06-02-2016 | t
  923 |  923 | 923  | Tue Dec 18 04:59:54 2018 PST |  923 |  923 | 06-02-2016 | t
 7416 | 7416 | 7416 | Tue Dec 18 04:59:54 2018 PST | 7416 | 7416 | 06-02-2016 | f
 4545 | 4545 | 4545 | Tue Dec 18 04:59:54 2018 PST | 4545 | 4545 | 06-02-2016 | t
 3851 | 3851 | 3851 | Tue Dec 18 04:59:54 2018 PST | 3851 | 3851 | 06-02-2016 | t
 9463 | 9463 | 9463 | Tue Dec 18 04:59:54 2018 PST | 9463 | 9463 | 06-02-2016 | t
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * from test_table_multi_col_key WHERE yb_hash_code(r2,r1,v1) < 60 LIMIT 10;
                             QUERY PLAN
---------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Seq Scan on test_table_multi_col_key (actual rows=10 loops=1)
         Filter: (yb_hash_code(r2, r1, v1) < 60)
         Rows Removed by Filter: 8034
(4 rows)

SELECT * from test_table_multi_col_key WHERE yb_hash_code(r2,r1,v1) < 60 LIMIT 10;
  h1  |  h2  |  h3  |              r1              |  r2  |  v1  |     v2     | v3
------+------+------+------------------------------+------+------+------------+----
 8830 | 8830 | 8830 | Tue Dec 18 04:59:54 2018 PST | 8830 | 8830 | 06-02-2016 | f
 4254 | 4254 | 4254 | Tue Dec 18 04:59:54 2018 PST | 4254 | 4254 | 06-02-2016 | f
 1269 | 1269 | 1269 | Tue Dec 18 04:59:54 2018 PST | 1269 | 1269 | 06-02-2016 | t
 4669 | 4669 | 4669 | Tue Dec 18 04:59:54 2018 PST | 4669 | 4669 | 06-02-2016 | t
 5325 | 5325 | 5325 | Tue Dec 18 04:59:54 2018 PST | 5325 | 5325 | 06-02-2016 | t
 2041 | 2041 | 2041 | Tue Dec 18 04:59:54 2018 PST | 2041 | 2041 | 06-02-2016 | t
 6305 | 6305 | 6305 | Tue Dec 18 04:59:54 2018 PST | 6305 | 6305 | 06-02-2016 | t
 8750 | 8750 | 8750 | Tue Dec 18 04:59:54 2018 PST | 8750 | 8750 | 06-02-2016 | f
 1372 | 1372 | 1372 | Tue Dec 18 04:59:54 2018 PST | 1372 | 1372 | 06-02-2016 | f
 8633 | 8633 | 8633 | Tue Dec 18 04:59:54 2018 PST | 8633 | 8633 | 06-02-2016 | t
(10 rows)

-- pushdown for multi_key_index_2 and multi_key_index_3
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * from test_table_multi_col_key WHERE yb_hash_code(r1,r2,v1) < 60 LIMIT 10;
                                          QUERY PLAN
-----------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Index Scan using multi_key_index_2 on test_table_multi_col_key (actual rows=10 loops=1)
         Index Cond: (yb_hash_code(r1, r2, v1) < 60)
(3 rows)

SELECT * from test_table_multi_col_key WHERE yb_hash_code(r1,r2,v1) < 60 LIMIT 10;
  h1  |  h2  |  h3  |              r1              |  r2  |  v1  |     v2     | v3
------+------+------+------------------------------+------+------+------------+----
 5205 | 5205 | 5205 | Tue Dec 18 04:59:54 2018 PST | 5205 | 5205 | 06-02-2016 | t
 2756 | 2756 | 2756 | Tue Dec 18 04:59:54 2018 PST | 2756 | 2756 | 06-02-2016 | f
 3550 | 3550 | 3550 | Tue Dec 18 04:59:54 2018 PST | 3550 | 3550 | 06-02-2016 | f
 3102 | 3102 | 3102 | Tue Dec 18 04:59:54 2018 PST | 3102 | 3102 | 06-02-2016 | f
 5083 | 5083 | 5083 | Tue Dec 18 04:59:54 2018 PST | 5083 | 5083 | 06-02-2016 | t
 1540 | 1540 | 1540 | Tue Dec 18 04:59:54 2018 PST | 1540 | 1540 | 06-02-2016 | f
 5763 | 5763 | 5763 | Tue Dec 18 04:59:54 2018 PST | 5763 | 5763 | 06-02-2016 | t
 8479 | 8479 | 8479 | Tue Dec 18 04:59:54 2018 PST | 8479 | 8479 | 06-02-2016 | t
 5021 | 5021 | 5021 | Tue Dec 18 04:59:54 2018 PST | 5021 | 5021 | 06-02-2016 | t
 6968 | 6968 | 6968 | Tue Dec 18 04:59:54 2018 PST | 6968 | 6968 | 06-02-2016 | f
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * from test_table_multi_col_key WHERE yb_hash_code(r1,r2,v2,v3) < 60 LIMIT 10;
                                          QUERY PLAN
-----------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Index Scan using multi_key_index_3 on test_table_multi_col_key (actual rows=10 loops=1)
         Index Cond: (yb_hash_code(r1, r2, v2, v3) < 60)
(3 rows)

SELECT * from test_table_multi_col_key WHERE yb_hash_code(r1,r2,v2,v3) < 60 LIMIT 10;
  h1  |  h2  |  h3  |              r1              |  r2  |  v1  |     v2     | v3
------+------+------+------------------------------+------+------+------------+----
 5872 | 5872 | 5872 | Tue Dec 18 04:59:54 2018 PST | 5872 | 5872 | 06-02-2016 | f
 9030 | 9030 | 9030 | Tue Dec 18 04:59:54 2018 PST | 9030 | 9030 | 06-02-2016 | f
 4104 | 4104 | 4104 | Tue Dec 18 04:59:54 2018 PST | 4104 | 4104 | 06-02-2016 | f
 3315 | 3315 | 3315 | Tue Dec 18 04:59:54 2018 PST | 3315 | 3315 | 06-02-2016 | t
  925 |  925 | 925  | Tue Dec 18 04:59:54 2018 PST |  925 |  925 | 06-02-2016 | t
 6018 | 6018 | 6018 | Tue Dec 18 04:59:54 2018 PST | 6018 | 6018 | 06-02-2016 | f
    1 |    1 | 1    | Tue Dec 18 04:59:54 2018 PST |    1 |    1 | 06-02-2016 | t
 5975 | 5975 | 5975 | Tue Dec 18 04:59:54 2018 PST | 5975 | 5975 | 06-02-2016 | t
 6158 | 6158 | 6158 | Tue Dec 18 04:59:54 2018 PST | 6158 | 6158 | 06-02-2016 | f
 9834 | 9834 | 9834 | Tue Dec 18 04:59:54 2018 PST | 9834 | 9834 | 06-02-2016 | f
(10 rows)

-- cost model tests to make sure that pushdown occurs on the
-- most selective yb_hash_code filter
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * from test_table_multi_col_key WHERE yb_hash_code(r1,r2,v2,v3) < 600 AND yb_hash_code(h1,h2,h3) < 65500 AND yb_hash_code(r1, r2, v1) > 5500;
                                       QUERY PLAN
-----------------------------------------------------------------------------------------
 Index Scan using multi_key_index_3 on test_table_multi_col_key (actual rows=88 loops=1)
   Index Cond: (yb_hash_code(r1, r2, v2, v3) < 600)
   Filter: ((yb_hash_code(h1, h2, h3) < 65500) AND (yb_hash_code(r1, r2, v1) > 5500))
   Rows Removed by Filter: 5
(4 rows)

SELECT * from test_table_multi_col_key WHERE yb_hash_code(r1,r2,v2,v3) < 600 AND yb_hash_code(h1,h2,h3) < 65500 AND yb_hash_code(r1, r2, v1) > 5500 LIMIT 10;
  h1  |  h2  |  h3  |              r1              |  r2  |  v1  |     v2     | v3
------+------+------+------------------------------+------+------+------------+----
 5872 | 5872 | 5872 | Tue Dec 18 04:59:54 2018 PST | 5872 | 5872 | 06-02-2016 | f
 1736 | 1736 | 1736 | Tue Dec 18 04:59:54 2018 PST | 1736 | 1736 | 06-02-2016 | f
 7154 | 7154 | 7154 | Tue Dec 18 04:59:54 2018 PST | 7154 | 7154 | 06-02-2016 | f
 9802 | 9802 | 9802 | Tue Dec 18 04:59:54 2018 PST | 9802 | 9802 | 06-02-2016 | f
 1092 | 1092 | 1092 | Tue Dec 18 04:59:54 2018 PST | 1092 | 1092 | 06-02-2016 | f
 4550 | 4550 | 4550 | Tue Dec 18 04:59:54 2018 PST | 4550 | 4550 | 06-02-2016 | f
 5287 | 5287 | 5287 | Tue Dec 18 04:59:54 2018 PST | 5287 | 5287 | 06-02-2016 | t
 5709 | 5709 | 5709 | Tue Dec 18 04:59:54 2018 PST | 5709 | 5709 | 06-02-2016 | t
 9468 | 9468 | 9468 | Tue Dec 18 04:59:54 2018 PST | 9468 | 9468 | 06-02-2016 | f
 2938 | 2938 | 2938 | Tue Dec 18 04:59:54 2018 PST | 2938 | 2938 | 06-02-2016 | f
(10 rows)

EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * from test_table_multi_col_key WHERE yb_hash_code(r1,r2,v2,v3) < 600 AND yb_hash_code(h1,h2,h3) > 65500 AND yb_hash_code(r1, r2, v1) > 5500;
                                             QUERY PLAN
----------------------------------------------------------------------------------------------------
 Index Scan using test_table_multi_col_key_pkey on test_table_multi_col_key (actual rows=1 loops=1)
   Index Cond: (yb_hash_code(h1, h2, h3) > 65500)
   Filter: ((yb_hash_code(r1, r2, v2, v3) < 600) AND (yb_hash_code(r1, r2, v1) > 5500))
   Rows Removed by Filter: 4
(4 rows)

SELECT * from test_table_multi_col_key WHERE yb_hash_code(r1,r2,v2,v3) < 600 AND yb_hash_code(h1,h2,h3) > 65500 AND yb_hash_code(r1, r2, v1) > 5500;
  h1  |  h2  |  h3  |              r1              |  r2  |  v1  |     v2     | v3
------+------+------+------------------------------+------+------+------------+----
 6351 | 6351 | 6351 | Tue Dec 18 04:59:54 2018 PST | 6351 | 6351 | 06-02-2016 | t
(1 row)

-- all given filters here have very high selectivity so this
-- should be a sequential scan
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT * from test_table_multi_col_key WHERE yb_hash_code(r1,r2,v2,v3) > 600 AND yb_hash_code(h1,h2,h3) < 65500 AND yb_hash_code(r1, r2, v1) > 5500;
                                                          QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on test_table_multi_col_key (actual rows=9044 loops=1)
   Filter: ((yb_hash_code(r1, r2, v2, v3) > 600) AND (yb_hash_code(h1, h2, h3) < 65500) AND (yb_hash_code(r1, r2, v1) > 5500))
   Rows Removed by Filter: 956
(3 rows)

SELECT * from test_table_multi_col_key WHERE yb_hash_code(r1,r2,v2,v3) > 600 AND yb_hash_code(h1,h2,h3) < 65500 AND yb_hash_code(r1, r2, v1) > 5500 LIMIT 10;
  h1  |  h2  |  h3  |              r1              |  r2  |  v1  |     v2     | v3
------+------+------+------------------------------+------+------+------------+----
 5258 | 5258 | 5258 | Tue Dec 18 04:59:54 2018 PST | 5258 | 5258 | 06-02-2016 | f
 5214 | 5214 | 5214 | Tue Dec 18 04:59:54 2018 PST | 5214 | 5214 | 06-02-2016 | f
 8274 | 8274 | 8274 | Tue Dec 18 04:59:54 2018 PST | 8274 | 8274 | 06-02-2016 | f
  651 |  651 | 651  | Tue Dec 18 04:59:54 2018 PST |  651 |  651 | 06-02-2016 | t
  314 |  314 | 314  | Tue Dec 18 04:59:54 2018 PST |  314 |  314 | 06-02-2016 | f
 1261 | 1261 | 1261 | Tue Dec 18 04:59:54 2018 PST | 1261 | 1261 | 06-02-2016 | t
 4204 | 4204 | 4204 | Tue Dec 18 04:59:54 2018 PST | 4204 | 4204 | 06-02-2016 | f
 2215 | 2215 | 2215 | Tue Dec 18 04:59:54 2018 PST | 2215 | 2215 | 06-02-2016 | t
 5783 | 5783 | 5783 | Tue Dec 18 04:59:54 2018 PST | 5783 | 5783 | 06-02-2016 | t
 6291 | 6291 | 6291 | Tue Dec 18 04:59:54 2018 PST | 6291 | 6291 | 06-02-2016 | t
(10 rows)

DROP TABLE test_table_multi_col_key;
-- test recheck of index only scan with yb_hash_code
CREATE TABLE test_index_only_scan_recheck(k INT PRIMARY KEY, v1 INT, v2 INT, v3 INT, v4 INT);
CREATE INDEX ON test_index_only_scan_recheck(v4) INCLUDE (v1);
INSERT INTO test_index_only_scan_recheck SELECT s, s, s, s, s FROM generate_series(1, 100) AS s;
EXPLAIN (COSTS OFF, TIMING OFF, SUMMARY OFF, ANALYZE) SELECT v1, yb_hash_code(v4) FROM test_index_only_scan_recheck WHERE v4 IN (1, 2, 3) AND yb_hash_code(v4) < 50000;
                                                      QUERY PLAN
----------------------------------------------------------------------------------------------------------------------
 Index Only Scan using test_index_only_scan_recheck_v4_v1_idx on test_index_only_scan_recheck (actual rows=2 loops=1)
   Index Cond: ((v4 = ANY ('{1,2,3}'::integer[])) AND (yb_hash_code(v4) < 50000))
   Rows Removed by Index Recheck: 1
   Heap Fetches: 0
(4 rows)

SELECT v1, yb_hash_code(v4) FROM test_index_only_scan_recheck WHERE v4 IN (1, 2, 3) AND yb_hash_code(v4) < 50000;
 v1 | yb_hash_code
----+--------------
  1 |         4624
  2 |        49348
(2 rows)

DROP TABLE test_index_only_scan_recheck;
-- Issue #17043
CREATE TABLE t as select x, x as y from generate_series(1, 10) x;
CREATE INDEX t_x_hash_y_asc_idx ON t (x HASH, y ASC);
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF) SELECT yb_hash_code(x), y FROM t WHERE yb_hash_code(x) = 2675 AND y IN (5, 6);
                                 QUERY PLAN
-----------------------------------------------------------------------------
 Index Only Scan using t_x_hash_y_asc_idx on t (actual rows=1 loops=1)
   Index Cond: ((yb_hash_code(x) = 2675) AND (y = ANY ('{5,6}'::integer[])))
   Heap Fetches: 0
(3 rows)

SELECT yb_hash_code(x), y FROM t WHERE yb_hash_code(x) = 2675 AND y IN (5, 6);
 yb_hash_code | y
--------------+---
         2675 | 5
(1 row)

DROP TABLE t;
-- Issue #18360 (yb_hash_code compared to constant out of the range [0..65535])
CREATE TABLE tt (i int, j int);
CREATE INDEX ON tt (i, j);
INSERT INTO tt VALUES (1, 2);
-- Negative values
EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) > -1;
                   QUERY PLAN
-------------------------------------------------
 Index Scan using tt_i_j_idx on tt
   Index Cond: (yb_hash_code(i) > '-1'::integer)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) > -1;
 i | j
---+---
 1 | 2
(1 row)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) >= -2;
                    QUERY PLAN
--------------------------------------------------
 Index Scan using tt_i_j_idx on tt
   Index Cond: (yb_hash_code(i) >= '-2'::integer)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) >= -2;
 i | j
---+---
 1 | 2
(1 row)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) = -3;
                   QUERY PLAN
-------------------------------------------------
 Index Scan using tt_i_j_idx on tt
   Index Cond: (yb_hash_code(i) = '-3'::integer)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) = -3;
 i | j
---+---
(0 rows)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) < -4;
                   QUERY PLAN
-------------------------------------------------
 Index Scan using tt_i_j_idx on tt
   Index Cond: (yb_hash_code(i) < '-4'::integer)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) < -4;
 i | j
---+---
(0 rows)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) <= -5;
                    QUERY PLAN
--------------------------------------------------
 Index Scan using tt_i_j_idx on tt
   Index Cond: (yb_hash_code(i) <= '-5'::integer)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) <= -5;
 i | j
---+---
(0 rows)

-- Higher than upper bound values
EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) > 65536;
               QUERY PLAN
-----------------------------------------
 Index Scan using tt_i_j_idx on tt
   Index Cond: (yb_hash_code(i) > 65536)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) > 65536;
 i | j
---+---
(0 rows)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) >= 65537;
                QUERY PLAN
------------------------------------------
 Index Scan using tt_i_j_idx on tt
   Index Cond: (yb_hash_code(i) >= 65537)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) >= 65537;
 i | j
---+---
(0 rows)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) = 65538;
               QUERY PLAN
-----------------------------------------
 Index Scan using tt_i_j_idx on tt
   Index Cond: (yb_hash_code(i) = 65538)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) = 65538;
 i | j
---+---
(0 rows)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) < 65539;
               QUERY PLAN
-----------------------------------------
 Index Scan using tt_i_j_idx on tt
   Index Cond: (yb_hash_code(i) < 65539)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) < 65539;
 i | j
---+---
 1 | 2
(1 row)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) <= 65540;
                QUERY PLAN
------------------------------------------
 Index Scan using tt_i_j_idx on tt
   Index Cond: (yb_hash_code(i) <= 65540)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) <= 65540;
 i | j
---+---
 1 | 2
(1 row)

-- Values other than int4
EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) > -2147483649;
                       QUERY PLAN
---------------------------------------------------------
 Index Scan using tt_i_j_idx on tt
   Index Cond: (yb_hash_code(i) > '-2147483649'::bigint)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) > -2147483649;
 i | j
---+---
 1 | 2
(1 row)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) >= -2147483650;
                        QUERY PLAN
----------------------------------------------------------
 Index Scan using tt_i_j_idx on tt
   Index Cond: (yb_hash_code(i) >= '-2147483650'::bigint)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) >= -2147483650;
 i | j
---+---
 1 | 2
(1 row)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) = -2147483651;
                       QUERY PLAN
---------------------------------------------------------
 Index Scan using tt_i_j_idx on tt
   Index Cond: (yb_hash_code(i) = '-2147483651'::bigint)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) = -2147483651;
 i | j
---+---
(0 rows)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) < -2147483652;
                       QUERY PLAN
---------------------------------------------------------
 Index Scan using tt_i_j_idx on tt
   Index Cond: (yb_hash_code(i) < '-2147483652'::bigint)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) < -2147483652;
 i | j
---+---
(0 rows)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) <= -2147483653;
                        QUERY PLAN
----------------------------------------------------------
 Index Scan using tt_i_j_idx on tt
   Index Cond: (yb_hash_code(i) <= '-2147483653'::bigint)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) <= -2147483653;
 i | j
---+---
(0 rows)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) > 9223372036854775808;
                               QUERY PLAN
-------------------------------------------------------------------------
 Seq Scan on tt
   Filter: ((yb_hash_code(i))::numeric > '9223372036854775808'::numeric)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) > 9223372036854775808;
 i | j
---+---
(0 rows)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) >= 9223372036854775809;
                                QUERY PLAN
--------------------------------------------------------------------------
 Seq Scan on tt
   Filter: ((yb_hash_code(i))::numeric >= '9223372036854775809'::numeric)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) >= 9223372036854775809;
 i | j
---+---
(0 rows)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) = 9223372036854775810;
                               QUERY PLAN
-------------------------------------------------------------------------
 Seq Scan on tt
   Filter: ((yb_hash_code(i))::numeric = '9223372036854775810'::numeric)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) = 9223372036854775810;
 i | j
---+---
(0 rows)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) < 9223372036854775811;
                               QUERY PLAN
-------------------------------------------------------------------------
 Seq Scan on tt
   Filter: ((yb_hash_code(i))::numeric < '9223372036854775811'::numeric)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) < 9223372036854775811;
 i | j
---+---
 1 | 2
(1 row)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) <= 9223372036854775812;
                                QUERY PLAN
--------------------------------------------------------------------------
 Seq Scan on tt
   Filter: ((yb_hash_code(i))::numeric <= '9223372036854775812'::numeric)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) <= 9223372036854775812;
 i | j
---+---
 1 | 2
(1 row)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) > -0.01;
                        QUERY PLAN
-----------------------------------------------------------
 Seq Scan on tt
   Filter: ((yb_hash_code(i))::numeric > '-0.01'::numeric)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) > -0.01;
 i | j
---+---
 1 | 2
(1 row)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) >= 123456.78;
                     QUERY PLAN
-----------------------------------------------------
 Seq Scan on tt
   Filter: ((yb_hash_code(i))::numeric >= 123456.78)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) >= 123456.78;
 i | j
---+---
(0 rows)

EXPLAIN (COSTS OFF) /*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) = 3.14;
                  QUERY PLAN
-----------------------------------------------
 Seq Scan on tt
   Filter: ((yb_hash_code(i))::numeric = 3.14)
(2 rows)

/*+IndexScan(tt)*/ SELECT * FROM tt WHERE yb_hash_code(i) = 3.14;
 i | j
---+---
(0 rows)

DROP TABLE tt;
-- GH18347 : yb_hash_code() in row constructor in predicate with an inequality fails
set client_min_messages = warning;
drop table if exists GH18347;
reset client_min_messages;
CREATE TABLE GH18347 (i int, j int);
CREATE INDEX ON GH18347 (i, j);
INSERT INTO GH18347 VALUES(0, 0);
INSERT INTO GH18347 VALUES(0, 1);
INSERT INTO GH18347 VALUES(0, 2);
INSERT INTO GH18347 VALUES(0, 3);
INSERT INTO GH18347 VALUES(1, 0);
INSERT INTO GH18347 VALUES(1, 1);
INSERT INTO GH18347 VALUES(2, 2);
INSERT INTO GH18347 VALUES(3, 3);
INSERT INTO GH18347 VALUES(2147483647, 0);
INSERT INTO GH18347 VALUES(2147483647, 1);
INSERT INTO GH18347 VALUES(2147483647, 2);
INSERT INTO GH18347 VALUES(2147483647, 3);
INSERT INTO GH18347 VALUES(-2147483648, 0);
INSERT INTO GH18347 VALUES(-2147483648, 1);
INSERT INTO GH18347 VALUES(-2147483648, 2);
INSERT INTO GH18347 VALUES(-2147483648, 3);
-- Failing query pattern.
EXPLAIN (COSTS OFF) /*+IndexScan(GH18347)*/ SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(1) hash_code_1 FROM GH18347 WHERE row(j, yb_hash_code(i)) > row(1, yb_hash_code(1)) ORDER BY 1, 2;
                        QUERY PLAN
----------------------------------------------------------
 Sort
   Sort Key: i, j
   ->  Seq Scan on gh18347
         Filter: (ROW(j, yb_hash_code(i)) > ROW(1, 4624))
(4 rows)

/*+IndexScan(GH18347)*/ SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(1) hash_code_1 FROM GH18347 WHERE row(j, yb_hash_code(i)) > row(1, yb_hash_code(1)) ORDER BY 1, 2;
      i      | j | hash_code_i | hash_code_j | hash_code_1
-------------+---+-------------+-------------+-------------
 -2147483648 | 2 |        4001 |       49348 |        4624
 -2147483648 | 3 |        4001 |       64672 |        4624
           0 | 1 |       47650 |        4624 |        4624
           0 | 2 |       47650 |       49348 |        4624
           0 | 3 |       47650 |       64672 |        4624
           2 | 2 |       49348 |       49348 |        4624
           3 | 3 |       64672 |       64672 |        4624
  2147483647 | 1 |       40388 |        4624 |        4624
  2147483647 | 2 |       40388 |       49348 |        4624
  2147483647 | 3 |       40388 |       64672 |        4624
(10 rows)

-- Verify sequential and index scans give the same answer.
EXPLAIN (COSTS OFF) /*+IndexScan(GH18347) SeqScan(GH18347_1) */
with cte as (SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(1) hash_code_1 FROM GH18347 WHERE row(j, yb_hash_code(i)) > row(1, yb_hash_code(1)) ORDER BY 1, 2),
     cte1 as (SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(1) hash_code_1 FROM GH18347 GH18347_1 WHERE row(j, yb_hash_code(i)) > row(1, yb_hash_code(1)) ORDER BY 1, 2)
SELECT * FROM cte EXCEPT ALL SELECT * FROM cte1
UNION ALL
SELECT * FROM cte1 EXCEPT ALL SELECT * FROM cte;
                               QUERY PLAN
-------------------------------------------------------------------------
 HashSetOp Except All
   CTE cte
     ->  Sort
           Sort Key: gh18347.i, gh18347.j
           ->  Seq Scan on gh18347
                 Filter: (ROW(j, yb_hash_code(i)) > ROW(1, 4624))
   CTE cte1
     ->  Sort
           Sort Key: gh18347_1.i, gh18347_1.j
           ->  Seq Scan on gh18347 gh18347_1
                 Filter: (ROW(j, yb_hash_code(i)) > ROW(1, 4624))
   ->  Append
         ->  Result
               ->  Append
                     ->  Result
                           ->  HashSetOp Except All
                                 ->  Append
                                       ->  Subquery Scan on "*SELECT* 1"
                                             ->  CTE Scan on cte
                                       ->  Subquery Scan on "*SELECT* 2"
                                             ->  CTE Scan on cte1
                     ->  CTE Scan on cte1 cte1_1
         ->  Subquery Scan on "*SELECT* 4"
               ->  CTE Scan on cte cte_1
(24 rows)

/*+IndexScan(GH18347) SeqScan(GH18347_1) */
with cte as (SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(1) hash_code_1 FROM GH18347 WHERE row(j, yb_hash_code(i)) > row(1, yb_hash_code(1)) ORDER BY 1, 2),
     cte1 as (SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(1) hash_code_1 FROM GH18347 GH18347_1 WHERE row(j, yb_hash_code(i)) > row(1, yb_hash_code(1)) ORDER BY 1, 2)
SELECT * FROM cte EXCEPT ALL SELECT * FROM cte1
UNION ALL
SELECT * FROM cte1 EXCEPT ALL SELECT * FROM cte;
 i | j | hash_code_i | hash_code_j | hash_code_1
---+---+-------------+-------------+-------------
(0 rows)

-- Try variation.
EXPLAIN (COSTS OFF) /*+IndexScan(GH18347)*/ SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(2) hash_code_2 FROM GH18347 WHERE row(j, yb_hash_code(i)) < row(1, yb_hash_code(2)) ORDER BY 1, 2;
                        QUERY PLAN
-----------------------------------------------------------
 Sort
   Sort Key: i, j
   ->  Seq Scan on gh18347
         Filter: (ROW(j, yb_hash_code(i)) < ROW(1, 49348))
(4 rows)

/*+IndexScan(GH18347)*/ SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(2) hash_code_2 FROM GH18347 WHERE row(j, yb_hash_code(i)) < row(1, yb_hash_code(2)) ORDER BY 1, 2;
      i      | j | hash_code_i | hash_code_j | hash_code_2
-------------+---+-------------+-------------+-------------
 -2147483648 | 0 |        4001 |       47650 |       49348
 -2147483648 | 1 |        4001 |        4624 |       49348
           0 | 0 |       47650 |       47650 |       49348
           0 | 1 |       47650 |        4624 |       49348
           1 | 0 |        4624 |       47650 |       49348
           1 | 1 |        4624 |        4624 |       49348
  2147483647 | 0 |       40388 |       47650 |       49348
  2147483647 | 1 |       40388 |        4624 |       49348
(8 rows)

-- Verify sequential and index scans give the same answer.
EXPLAIN (COSTS OFF) /*+IndexScan(GH18347) SeqScan(GH18347_1) */
with cte as (SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(2) hash_code_2 FROM GH18347 WHERE row(j, yb_hash_code(i)) < row(1, yb_hash_code(2)) ORDER BY 1, 2),
     cte1 as (SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(2) hash_code_2 FROM GH18347 GH18347_1 WHERE row(j, yb_hash_code(i)) < row(1, yb_hash_code(2)) ORDER BY 1, 2)
SELECT * FROM cte EXCEPT ALL SELECT * FROM cte1
UNION ALL
SELECT * FROM cte1 EXCEPT ALL SELECT * FROM cte;
                               QUERY PLAN
-------------------------------------------------------------------------
 HashSetOp Except All
   CTE cte
     ->  Sort
           Sort Key: gh18347.i, gh18347.j
           ->  Seq Scan on gh18347
                 Filter: (ROW(j, yb_hash_code(i)) < ROW(1, 49348))
   CTE cte1
     ->  Sort
           Sort Key: gh18347_1.i, gh18347_1.j
           ->  Seq Scan on gh18347 gh18347_1
                 Filter: (ROW(j, yb_hash_code(i)) < ROW(1, 49348))
   ->  Append
         ->  Result
               ->  Append
                     ->  Result
                           ->  HashSetOp Except All
                                 ->  Append
                                       ->  Subquery Scan on "*SELECT* 1"
                                             ->  CTE Scan on cte
                                       ->  Subquery Scan on "*SELECT* 2"
                                             ->  CTE Scan on cte1
                     ->  CTE Scan on cte1 cte1_1
         ->  Subquery Scan on "*SELECT* 4"
               ->  CTE Scan on cte cte_1
(24 rows)

/*+IndexScan(GH18347) SeqScan(GH18347_1) */
with cte as (SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(2) hash_code_2 FROM GH18347 WHERE row(j, yb_hash_code(i)) < row(1, yb_hash_code(2)) ORDER BY 1, 2),
     cte1 as (SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(2) hash_code_2 FROM GH18347 GH18347_1 WHERE row(j, yb_hash_code(i)) < row(1, yb_hash_code(2)) ORDER BY 1, 2)
SELECT * FROM cte EXCEPT ALL SELECT * FROM cte1
UNION ALL
SELECT * FROM cte1 EXCEPT ALL SELECT * FROM cte;
 i | j | hash_code_i | hash_code_j | hash_code_2
---+---+-------------+-------------+-------------
(0 rows)

-- Try a 1 element IN with row constructor. Should get an index scan since this turns into an equality.
EXPLAIN (COSTS OFF) /*+IndexScan(GH18347)*/ SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(2) hash_code_2 FROM GH18347 WHERE row(j, yb_hash_code(i)) IN (row(1, yb_hash_code(1))) ORDER BY 1, 2;
                         QUERY PLAN
------------------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Only Scan using gh18347_i_j_idx on gh18347
         Index Cond: ((yb_hash_code(i) = 4624) AND (j = 1))
(4 rows)

/*+IndexScan(GH18347)*/ SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(2) hash_code_2 FROM GH18347 WHERE row(j, yb_hash_code(i)) IN (row(1, yb_hash_code(1))) ORDER BY 1, 2;
 i | j | hash_code_i | hash_code_j | hash_code_2
---+---+-------------+-------------+-------------
 1 | 1 |        4624 |        4624 |       49348
(1 row)

-- Verify sequential and index scans give the same answer.
EXPLAIN (COSTS OFF) /*+IndexScan(GH18347) SeqScan(GH18347_1) */
with cte as (SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(2) hash_code_2 FROM GH18347 WHERE row(j, yb_hash_code(i)) IN (row(1, yb_hash_code(1))) ORDER BY 1, 2),
     cte1 as (SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(2) hash_code_2 FROM GH18347 GH18347_1 WHERE row(j, yb_hash_code(i)) IN (row(1, yb_hash_code(1))) ORDER BY 1, 2)
SELECT * FROM cte EXCEPT ALL SELECT * FROM cte1
UNION ALL
SELECT * FROM cte1 EXCEPT ALL SELECT * FROM cte;
                                QUERY PLAN
--------------------------------------------------------------------------
 HashSetOp Except All
   CTE cte
     ->  Sort
           Sort Key: gh18347.i
           ->  Index Only Scan using gh18347_i_j_idx on gh18347
                 Index Cond: ((yb_hash_code(i) = 4624) AND (j = 1))
   CTE cte1
     ->  Sort
           Sort Key: gh18347_1.i
           ->  Index Only Scan using gh18347_i_j_idx on gh18347 gh18347_1
                 Index Cond: ((yb_hash_code(i) = 4624) AND (j = 1))
   ->  Append
         ->  Result
               ->  Append
                     ->  Result
                           ->  HashSetOp Except All
                                 ->  Append
                                       ->  Subquery Scan on "*SELECT* 1"
                                             ->  CTE Scan on cte
                                       ->  Subquery Scan on "*SELECT* 2"
                                             ->  CTE Scan on cte1
                     ->  CTE Scan on cte1 cte1_1
         ->  Subquery Scan on "*SELECT* 4"
               ->  CTE Scan on cte cte_1
(24 rows)

/*+IndexScan(GH18347) SeqScan(GH18347_1) */
with cte as (SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(2) hash_code_2 FROM GH18347 WHERE row(j, yb_hash_code(i)) IN (row(1, yb_hash_code(1))) ORDER BY 1, 2),
     cte1 as (SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(2) hash_code_2 FROM GH18347 GH18347_1 WHERE row(j, yb_hash_code(i)) IN (row(1, yb_hash_code(1))) ORDER BY 1, 2)
SELECT * FROM cte EXCEPT ALL SELECT * FROM cte1
union all
SELECT * FROM cte1 EXCEPT ALL SELECT * FROM cte;
 i | j | hash_code_i | hash_code_j | hash_code_2
---+---+-------------+-------------+-------------
(0 rows)

-- Try an IN with yb_hash_code(). Cannot do an index scan since the query execution code does not support this
-- so plan will have a sequantial scan. (This was hitting an assert before this issue was fixed.)
EXPLAIN (COSTS OFF) /*+IndexScan(GH18347)*/ SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(1) hash_code_1, yb_hash_code(2) hash_code_2 FROM GH18347 WHERE yb_hash_code(i) IN (yb_hash_code(1), yb_hash_code(2)) ORDER BY 1, 2;
                             QUERY PLAN
---------------------------------------------------------------------
 Sort
   Sort Key: i, j
   ->  Seq Scan on gh18347
         Filter: (yb_hash_code(i) = ANY ('{4624,49348}'::integer[]))
(4 rows)

/*+IndexScan(GH18347)*/ SELECT i, j, yb_hash_code(i) hash_code_i, yb_hash_code(j) hash_code_j, yb_hash_code(1) hash_code_1, yb_hash_code(2) hash_code_2 FROM GH18347 WHERE yb_hash_code(i) IN (yb_hash_code(1), yb_hash_code(2)) ORDER BY 1, 2;
 i | j | hash_code_i | hash_code_j | hash_code_1 | hash_code_2
---+---+-------------+-------------+-------------+-------------
 1 | 0 |        4624 |       47650 |        4624 |       49348
 1 | 1 |        4624 |        4624 |        4624 |       49348
 2 | 2 |       49348 |       49348 |        4624 |       49348
(3 rows)

drop table GH18347;
