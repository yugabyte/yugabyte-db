--
-- Yugabyte-owned test for ybgin access method.
--
-- Always choose index scan.
SET enable_seqscan = off;
SET enable_bitmapscan = on;
SET yb_test_ybgin_disable_cost_factor = 0.5;
--
-- Create non-temp table which uses Yugabyte storage.
--
CREATE TABLE vectors (i serial PRIMARY KEY, v tsvector);
CREATE TABLE arrays (i serial PRIMARY KEY, a int[]);
CREATE TABLE jsonbs (i serial PRIMARY KEY, j jsonb);
CREATE TABLE multi (v tsvector, a1 text[], a2 float[], j1 jsonb, j2 jsonb);
CREATE TABLE expression (v tsvector, a text[], j jsonb);
CREATE TABLE partial (v tsvector, a text[], j jsonb);
--
-- tsvector
--
INSERT INTO vectors (v) VALUES
    (to_tsvector('simple', 'a bb ccc')),
    (to_tsvector('simple', 'bb a e i o u')),
    (to_tsvector('simple', 'ccd'));
CREATE INDEX ON vectors USING ybgin (v); -- test ambuild
INSERT INTO vectors (v) VALUES
    (to_tsvector('simple', 'a a a a a a')),
    (to_tsvector('simple', 'cc')); -- test aminsert
-- test amgetbitmap
EXPLAIN (costs off) SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'a') ORDER BY i;
                   QUERY PLAN
-------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using vectors_v_idx on vectors
         Index Cond: (v @@ '''a'''::tsquery)
(4 rows)

SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'a') ORDER BY i;
 i |                  v
---+--------------------------------------
 1 | 'a':1 'bb':2 'ccc':3
 2 | 'a':2 'bb':1 'e':3 'i':4 'o':5 'u':6
 4 | 'a':1,2,3,4,5,6
(3 rows)

EXPLAIN (costs off) SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'a & e') ORDER BY i;
                     QUERY PLAN
-----------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using vectors_v_idx on vectors
         Index Cond: (v @@ '''a'' & ''e'''::tsquery)
(4 rows)

SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'a & e') ORDER BY i;
 i |                  v
---+--------------------------------------
 2 | 'a':2 'bb':1 'e':3 'i':4 'o':5 'u':6
(1 row)

EXPLAIN (costs off) SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'bb | cc') ORDER BY i;
                      QUERY PLAN
-------------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using vectors_v_idx on vectors
         Index Cond: (v @@ '''bb'' | ''cc'''::tsquery)
(4 rows)

SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'bb | cc') ORDER BY i;
ERROR:  unsupported ybgin index scan
DETAIL:  ybgin index method cannot use more than one required scan entry: got 2.
EXPLAIN (costs off) SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'bb & !ccc') ORDER BY i;
                       QUERY PLAN
---------------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using vectors_v_idx on vectors
         Index Cond: (v @@ '''bb'' & !''ccc'''::tsquery)
(4 rows)

SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'bb & !ccc') ORDER BY i;
ERROR:  unsupported ybgin index scan
DETAIL:  ybgin index method cannot use more than one required scan entry: got 2.
EXPLAIN (costs off) SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'cc:*') ORDER BY i;
                   QUERY PLAN
-------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using vectors_v_idx on vectors
         Index Cond: (v @@ '''cc'':*'::tsquery)
(4 rows)

SELECT * FROM vectors WHERE v @@ to_tsquery('simple', 'cc:*') ORDER BY i;
 i |          v
---+----------------------
 1 | 'a':1 'bb':2 'ccc':3
 3 | 'ccd':1
 5 | 'cc':1
(3 rows)

EXPLAIN (costs off) SELECT count(*) FROM vectors WHERE v @@ to_tsquery('simple', 'a');
                   QUERY PLAN
-------------------------------------------------
 Aggregate
   ->  Index Scan using vectors_v_idx on vectors
         Index Cond: (v @@ '''a'''::tsquery)
(3 rows)

SELECT count(*) FROM vectors WHERE v @@ to_tsquery('simple', 'a');
 count
-------
     3
(1 row)

--
-- array
--
INSERT INTO arrays (a) VALUES
    ('{1, 3, 5}'),
    (ARRAY[2, 3, 5]),
    ('{7, 1, 6, 4}');
CREATE INDEX ON arrays USING ybgin (a); -- test ambuild
INSERT INTO arrays (a) VALUES
    ('{3}'),
    ('{3, 3, 3}'),
    ('{10, 20, 30}'); -- test aminsert
-- test amgetbitmap
EXPLAIN (costs off) SELECT * FROM arrays WHERE a && '{1, 100, 3}' ORDER BY i;
                    QUERY PLAN
---------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using arrays_a_idx on arrays
         Index Cond: (a && '{1,100,3}'::integer[])
(4 rows)

SELECT * FROM arrays WHERE a && '{1, 100, 3}' ORDER BY i;
ERROR:  unsupported ybgin index scan
DETAIL:  ybgin index method cannot use more than one required scan entry: got 3.
EXPLAIN (costs off) SELECT * FROM arrays WHERE a @> '{5, 3}' ORDER BY i;
                  QUERY PLAN
-----------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using arrays_a_idx on arrays
         Index Cond: (a @> '{5,3}'::integer[])
(4 rows)

SELECT * FROM arrays WHERE a @> '{5, 3}' ORDER BY i;
 i |    a
---+---------
 1 | {1,3,5}
 2 | {2,3,5}
(2 rows)

EXPLAIN (costs off) SELECT * FROM arrays WHERE a <@ '{5, 4, 3, 2}' ORDER BY i;
                    QUERY PLAN
---------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using arrays_a_idx on arrays
         Index Cond: (a <@ '{5,4,3,2}'::integer[])
(4 rows)

SELECT * FROM arrays WHERE a <@ '{5, 4, 3, 2}' ORDER BY i;
ERROR:  unsupported ybgin index scan
DETAIL:  ybgin index method does not support non-default search mode: include-empty.
EXPLAIN (costs off) SELECT * FROM arrays WHERE a = '{3}' ORDER BY i;
                  QUERY PLAN
-----------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using arrays_a_idx on arrays
         Index Cond: (a = '{3}'::integer[])
(4 rows)

SELECT * FROM arrays WHERE a = '{3}' ORDER BY i;
 i |  a
---+-----
 4 | {3}
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM arrays WHERE a = '{3}';
                  QUERY PLAN
-----------------------------------------------
 Aggregate
   ->  Index Scan using arrays_a_idx on arrays
         Index Cond: (a = '{3}'::integer[])
(3 rows)

SELECT count(*) FROM arrays WHERE a = '{3}';
 count
-------
     1
(1 row)

--
-- jsonb
--
INSERT INTO jsonbs (j) VALUES
    ('{"aaa":[1,2.00,3]}'),
    ('{"ggg":"aaa"}'),
    ('["bbb", "aaa"]');
CREATE INDEX ON jsonbs USING ybgin (j); -- test ambuild
INSERT INTO jsonbs (j) VALUES
    ('"aaa"'),
    ('3.0'),
    ('{"aaa":{"bbb":[2,4], "ccc":{"ddd":6}}, "eee":8}'); -- test aminsert
-- test amgetbitmap
EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j ? 'aaa' ORDER BY i;
                  QUERY PLAN
-----------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using jsonbs_j_idx on jsonbs
         Index Cond: (j ? 'aaa'::text)
(4 rows)

SELECT * FROM jsonbs WHERE j ? 'aaa' ORDER BY i;
 i |                           j
---+-------------------------------------------------------
 1 | {"aaa": [1, 2.00, 3]}
 3 | ["bbb", "aaa"]
 4 | "aaa"
 6 | {"aaa": {"bbb": [2, 4], "ccc": {"ddd": 6}}, "eee": 8}
(4 rows)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j ?| '{"ggg", "eee"}' ORDER BY i;
                   QUERY PLAN
------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using jsonbs_j_idx on jsonbs
         Index Cond: (j ?| '{ggg,eee}'::text[])
(4 rows)

SELECT * FROM jsonbs WHERE j ?| '{"ggg", "eee"}' ORDER BY i;
ERROR:  unsupported ybgin index scan
DETAIL:  ybgin index method cannot use more than one required scan entry: got 2.
EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j ?& '{"aaa", "eee"}' ORDER BY i;
                   QUERY PLAN
------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using jsonbs_j_idx on jsonbs
         Index Cond: (j ?& '{aaa,eee}'::text[])
(4 rows)

SELECT * FROM jsonbs WHERE j ?& '{"aaa", "eee"}' ORDER BY i;
 i |                           j
---+-------------------------------------------------------
 6 | {"aaa": {"bbb": [2, 4], "ccc": {"ddd": 6}}, "eee": 8}
(1 row)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j @> '{"bbb":[4]}' ORDER BY i;
                    QUERY PLAN
--------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using jsonbs_j_idx on jsonbs
         Index Cond: (j @> '{"bbb": [4]}'::jsonb)
(4 rows)

SELECT * FROM jsonbs WHERE j @> '{"bbb":[4]}' ORDER BY i;
 i | j
---+---
(0 rows)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j @> '{"aaa":{"bbb":[4]}}' ORDER BY i;
                        QUERY PLAN
-----------------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using jsonbs_j_idx on jsonbs
         Index Cond: (j @> '{"aaa": {"bbb": [4]}}'::jsonb)
(4 rows)

SELECT * FROM jsonbs WHERE j @> '{"aaa":{"bbb":[4]}}' ORDER BY i;
 i |                           j
---+-------------------------------------------------------
 6 | {"aaa": {"bbb": [2, 4], "ccc": {"ddd": 6}}, "eee": 8}
(1 row)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j @? '$.aaa[*] ? (@ == 2)' ORDER BY i;
                         QUERY PLAN
------------------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using jsonbs_j_idx on jsonbs
         Index Cond: (j @? '$."aaa"[*]?(@ == 2)'::jsonpath)
(4 rows)

SELECT * FROM jsonbs WHERE j @? '$.aaa[*] ? (@ == 2)' ORDER BY i;
 i |           j
---+-----------------------
 1 | {"aaa": [1, 2.00, 3]}
(1 row)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j @@ '$.ggg starts with "aa"' ORDER BY i;
                            QUERY PLAN
-------------------------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using jsonbs_j_idx on jsonbs
         Index Cond: (j @@ '($."ggg" starts with "aa")'::jsonpath)
(4 rows)

SELECT * FROM jsonbs WHERE j @@ '$.ggg starts with "aa"' ORDER BY i;
ERROR:  unsupported ybgin index scan
DETAIL:  ybgin index method does not support non-default search mode: all.
EXPLAIN (costs off) SELECT count(*) FROM jsonbs WHERE j ? 'aaa';
                  QUERY PLAN
-----------------------------------------------
 Aggregate
   ->  Index Scan using jsonbs_j_idx on jsonbs
         Index Cond: (j ? 'aaa'::text)
(3 rows)

SELECT count(*) FROM jsonbs WHERE j ? 'aaa';
 count
-------
     4
(1 row)

--
-- jsonb_path
--
DROP INDEX jsonbs_j_idx;
CREATE INDEX ON jsonbs USING ybgin (j jsonb_path_ops); -- test ambuild
INSERT INTO jsonbs (j) VALUES
    ('{"aaa":{"bbb":[2], "ccc":{"ddd":6}}, "eee":[]}'); -- test aminsert
EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j ? 'aaa' ORDER BY i;
                QUERY PLAN
-------------------------------------------
 Sort
   Sort Key: i
   ->  Seq Scan on jsonbs
         Storage Filter: (j ? 'aaa'::text)
(4 rows)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j ?| '{"ggg", "eee"}' ORDER BY i;
                     QUERY PLAN
----------------------------------------------------
 Sort
   Sort Key: i
   ->  Seq Scan on jsonbs
         Storage Filter: (j ?| '{ggg,eee}'::text[])
(4 rows)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j ?& '{"aaa", "eee"}' ORDER BY i;
                     QUERY PLAN
----------------------------------------------------
 Sort
   Sort Key: i
   ->  Seq Scan on jsonbs
         Storage Filter: (j ?& '{aaa,eee}'::text[])
(4 rows)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j @> '{"aaa":{"bbb":[4]}}' ORDER BY i;
                        QUERY PLAN
-----------------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using jsonbs_j_idx on jsonbs
         Index Cond: (j @> '{"aaa": {"bbb": [4]}}'::jsonb)
(4 rows)

SELECT * FROM jsonbs WHERE j @> '{"aaa":{"bbb":[4]}}' ORDER BY i;
 i |                           j
---+-------------------------------------------------------
 6 | {"aaa": {"bbb": [2, 4], "ccc": {"ddd": 6}}, "eee": 8}
(1 row)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j @? '$.aaa[*] ? (@ == 2)' ORDER BY i;
                         QUERY PLAN
------------------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using jsonbs_j_idx on jsonbs
         Index Cond: (j @? '$."aaa"[*]?(@ == 2)'::jsonpath)
(4 rows)

SELECT * FROM jsonbs WHERE j @? '$.aaa[*] ? (@ == 2)' ORDER BY i;
 i |           j
---+-----------------------
 1 | {"aaa": [1, 2.00, 3]}
(1 row)

EXPLAIN (costs off) SELECT * FROM jsonbs WHERE j @@ '$.ggg starts with "aa"' ORDER BY i;
                            QUERY PLAN
-------------------------------------------------------------------
 Sort
   Sort Key: i
   ->  Index Scan using jsonbs_j_idx on jsonbs
         Index Cond: (j @@ '($."ggg" starts with "aa")'::jsonpath)
(4 rows)

SELECT * FROM jsonbs WHERE j @@ '$.ggg starts with "aa"' ORDER BY i;
ERROR:  unsupported ybgin index scan
DETAIL:  ybgin index method does not support non-default search mode: all.
--
-- Multicolumn
--
INSERT INTO multi VALUES
    (to_tsvector('simple', 'a b'), ARRAY['c', 'd'], ARRAY[5.0, 6.1], '{"f":3}',
     '{"r":[3,6.5]}'),
    (to_tsvector('simple', '0'), ARRAY['0'], ARRAY[0], '0', '0');
CREATE INDEX ON multi USING ybgin (v, a1); -- test ambuild
ERROR:  access method "ybgin" does not support multicolumn indexes
CREATE INDEX ON multi USING ybgin (a2, a2); -- test ambuild
ERROR:  access method "ybgin" does not support multicolumn indexes
CREATE INDEX ON multi USING ybgin (j1 jsonb_ops, j2 jsonb_path_ops); -- test ambuild
ERROR:  access method "ybgin" does not support multicolumn indexes
--
-- Expression index
--
INSERT INTO expression VALUES
    (to_tsvector('simple', 'a b c'), ARRAY['d', 'e', 'f'], '{"g":["h","i"]}');
CREATE INDEX ON expression USING ybgin (tsvector_to_array(v)); -- test ambuild
CREATE INDEX ON expression USING ybgin (array_to_tsvector(a)); -- test ambuild
CREATE INDEX ON expression USING ybgin (
    jsonb_to_tsvector('simple', j, '["string"]')); -- test ambuild
INSERT INTO expression VALUES
    (to_tsvector('simple', 'a a'), ARRAY['d', 'd'], '{"g":"g"}'); -- test aminsert
EXPLAIN (costs off) SELECT count(*) FROM expression WHERE tsvector_to_array(v) && ARRAY['b'];
                              QUERY PLAN
-----------------------------------------------------------------------
 Aggregate
   ->  Index Scan using expression_tsvector_to_array_idx on expression
         Index Cond: (tsvector_to_array(v) && '{b}'::text[])
(3 rows)

SELECT count(*) FROM expression WHERE tsvector_to_array(v) && ARRAY['b'];
 count
-------
     1
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM expression WHERE array_to_tsvector(a) @@ 'e';
                              QUERY PLAN
-----------------------------------------------------------------------
 Aggregate
   ->  Index Scan using expression_array_to_tsvector_idx on expression
         Index Cond: (array_to_tsvector(a) @@ '''e'''::tsquery)
(3 rows)

SELECT count(*) FROM expression WHERE array_to_tsvector(a) @@ 'e';
 count
-------
     1
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM expression
    WHERE jsonb_to_tsvector('simple', j, '["string"]') @@ 'h';
                                                QUERY PLAN
----------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using expression_jsonb_to_tsvector_idx on expression
         Index Cond: (jsonb_to_tsvector('simple'::regconfig, j, '["string"]'::jsonb) @@ '''h'''::tsquery)
(3 rows)

SELECT count(*) FROM expression
    WHERE jsonb_to_tsvector('simple', j, '["string"]') @@ 'h';
 count
-------
     1
(1 row)

--
-- Partial index
--
INSERT INTO partial VALUES
    (to_tsvector('simple', 'a a'), ARRAY['d', 'e', 'f'], '{"g":["h","i"]}');
CREATE INDEX ON partial USING ybgin (v) WHERE v @@ 'c'; -- test ambuild
CREATE INDEX ON partial USING ybgin (a) WHERE j @> '{"g":["i"]}'; -- test ambuild
CREATE INDEX ON partial USING ybgin (j) WHERE a && ARRAY['f']; -- test ambuild
INSERT INTO partial VALUES
    (to_tsvector('simple', 'a b c'), ARRAY['d', 'd'], '{"g":"g"}'); -- test aminsert
EXPLAIN (costs off) SELECT count(*) FROM partial WHERE v @@ 'b';
                   QUERY PLAN
-------------------------------------------------
 Finalize Aggregate
   ->  Seq Scan on partial
         Storage Filter: (v @@ '''b'''::tsquery)
         Partial Aggregate: true
(4 rows)

EXPLAIN (costs off) SELECT count(*) FROM partial WHERE v @@ 'c';
                      QUERY PLAN
------------------------------------------------------
 Aggregate
   ->  Index Only Scan using partial_v_idx on partial
(2 rows)

SELECT count(*) FROM partial WHERE v @@ 'c';
ERROR:  unsupported ybgin index scan
DETAIL:  ybgin index method does not support non-default search mode: everything.
EXPLAIN (costs off) SELECT count(*) FROM partial WHERE a && ARRAY['e'];
              QUERY PLAN
--------------------------------------
 Aggregate
   ->  Seq Scan on partial
         Filter: (a && '{e}'::text[])
(3 rows)

EXPLAIN (costs off) SELECT count(*) FROM partial
    WHERE a && ARRAY['e'] and j @> '{"g":["i"]}';
                   QUERY PLAN
-------------------------------------------------
 Aggregate
   ->  Index Scan using partial_a_idx on partial
         Index Cond: (a && '{e}'::text[])
(3 rows)

SELECT count(*) FROM partial
    WHERE a && ARRAY['e'] and j @> '{"g":["i"]}';
 count
-------
     1
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM partial
    WHERE j @? '$.g[*] ? (@ == "h")';
                           QUERY PLAN                           
----------------------------------------------------------------
 Finalize Aggregate
   ->  Seq Scan on partial
         Storage Filter: (j @? '$."g"[*]?(@ == "h")'::jsonpath)
         Partial Aggregate: true
(4 rows)

EXPLAIN (costs off) SELECT count(*) FROM partial
    WHERE j @? '$.g[*] ? (@ == "h")' and a && ARRAY['f'];
                         QUERY PLAN
------------------------------------------------------------
 Aggregate
   ->  Index Scan using partial_j_idx on partial
         Index Cond: (j @? '$."g"[*]?(@ == "h")'::jsonpath)
(3 rows)

SELECT count(*) FROM partial
    WHERE j @? '$.g[*] ? (@ == "h")' and a && ARRAY['f'];
 count
-------
     1
(1 row)

-- Don't clean up the tables as they'll be used in later tests.
--
-- Try creating ybgin index on temp table.
--
CREATE TEMP TABLE vectors (i serial PRIMARY KEY, v tsvector);
CREATE INDEX ON vectors USING ybgin (v);
ERROR:  access method "ybgin" only supported for indexes using Yugabyte storage
-- Cleanup
DISCARD TEMP;
RESET enable_seqscan;
RESET enable_bitmapscan;
