Parsed test spec with 2 sessions

starting permutation: s1_begin s1_tab_lookup s2_auth s2_truncate s1_commit s2_reset
step s1_begin: BEGIN;
step s1_tab_lookup: SELECT count(*) >= 0 FROM truncate_tab;
?column?
--------
t       
(1 row)

step s2_auth: SET ROLE regress_truncate_conflict;
step s2_truncate: TRUNCATE truncate_tab;
ERROR:  permission denied for table truncate_tab
step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s1_begin s2_auth s2_truncate s1_tab_lookup s1_commit s2_reset
step s1_begin: BEGIN;
step s2_auth: SET ROLE regress_truncate_conflict;
step s2_truncate: TRUNCATE truncate_tab;
ERROR:  permission denied for table truncate_tab
step s1_tab_lookup: SELECT count(*) >= 0 FROM truncate_tab;
?column?
--------
t       
(1 row)

step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s1_begin s2_auth s1_tab_lookup s2_truncate s1_commit s2_reset
step s1_begin: BEGIN;
step s2_auth: SET ROLE regress_truncate_conflict;
step s1_tab_lookup: SELECT count(*) >= 0 FROM truncate_tab;
?column?
--------
t       
(1 row)

step s2_truncate: TRUNCATE truncate_tab;
ERROR:  permission denied for table truncate_tab
step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s2_auth s2_truncate s1_begin s1_tab_lookup s1_commit s2_reset
step s2_auth: SET ROLE regress_truncate_conflict;
step s2_truncate: TRUNCATE truncate_tab;
ERROR:  permission denied for table truncate_tab
step s1_begin: BEGIN;
step s1_tab_lookup: SELECT count(*) >= 0 FROM truncate_tab;
?column?
--------
t       
(1 row)

step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s1_begin s1_tab_lookup s2_grant s2_auth s2_truncate s1_commit s2_reset
step s1_begin: BEGIN;
step s1_tab_lookup: SELECT count(*) >= 0 FROM truncate_tab;
?column?
--------
t       
(1 row)

step s2_grant: GRANT TRUNCATE ON truncate_tab TO regress_truncate_conflict;
step s2_auth: SET ROLE regress_truncate_conflict;
step s2_truncate: TRUNCATE truncate_tab; <waiting ...>
step s1_commit: COMMIT;
step s2_truncate: <... completed>
step s2_reset: RESET ROLE;

starting permutation: s1_begin s2_grant s2_auth s2_truncate s1_tab_lookup s1_commit s2_reset
step s1_begin: BEGIN;
step s2_grant: GRANT TRUNCATE ON truncate_tab TO regress_truncate_conflict;
step s2_auth: SET ROLE regress_truncate_conflict;
step s2_truncate: TRUNCATE truncate_tab;
step s1_tab_lookup: SELECT count(*) >= 0 FROM truncate_tab;
?column?
--------
t       
(1 row)

step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s1_begin s2_grant s2_auth s1_tab_lookup s2_truncate s1_commit s2_reset
step s1_begin: BEGIN;
step s2_grant: GRANT TRUNCATE ON truncate_tab TO regress_truncate_conflict;
step s2_auth: SET ROLE regress_truncate_conflict;
step s1_tab_lookup: SELECT count(*) >= 0 FROM truncate_tab;
?column?
--------
t       
(1 row)

step s2_truncate: TRUNCATE truncate_tab; <waiting ...>
step s1_commit: COMMIT;
step s2_truncate: <... completed>
step s2_reset: RESET ROLE;

starting permutation: s2_grant s2_auth s2_truncate s1_begin s1_tab_lookup s1_commit s2_reset
step s2_grant: GRANT TRUNCATE ON truncate_tab TO regress_truncate_conflict;
step s2_auth: SET ROLE regress_truncate_conflict;
step s2_truncate: TRUNCATE truncate_tab;
step s1_begin: BEGIN;
step s1_tab_lookup: SELECT count(*) >= 0 FROM truncate_tab;
?column?
--------
t       
(1 row)

step s1_commit: COMMIT;
step s2_reset: RESET ROLE;
