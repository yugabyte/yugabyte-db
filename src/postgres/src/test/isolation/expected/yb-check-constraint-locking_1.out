unused step name: s2_select
unused step name: s2_upd_pk_date_added
unused step name: s2_upd_pk_product_id
unused step name: s2_upd_price
Parsed test spec with 2 sessions

starting permutation: s1_select s1_serializable_txn s2_serializable_txn s1_upd_price s2_upd_disc_price s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)

step s1_serializable_txn: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
step s2_serializable_txn: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
step s1_upd_price: UPDATE products SET price = 3 WHERE product_id = 1;
step s2_upd_disc_price: UPDATE products SET discounted_price = 5 WHERE product_id = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_upd_disc_price: <... completed>
ERROR:  new row for relation "products" violates check constraint "products_check1"
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|    3|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)


starting permutation: s1_select s1_serializable_txn s2_serializable_txn s1_upd_pk_date_added s2_upd_date_expires s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)

step s1_serializable_txn: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
step s2_serializable_txn: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
step s1_upd_pk_date_added: UPDATE products SET date_added = '2022-06-01 01:00:00' WHERE product_id = 1;
step s2_upd_date_expires: UPDATE products SET date_expires = '2022-05-01 02:00:00' WHERE product_id = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_upd_date_expires: <... completed>
ERROR:  new row for relation "products" violates check constraint "products_check"
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Wed Jun 01 01:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)


starting permutation: s1_select s1_serializable_txn s2_serializable_txn s1_upd_price s2_insert_on_conflict1 s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)

step s1_serializable_txn: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
step s2_serializable_txn: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
step s1_upd_price: UPDATE products SET price = 3 WHERE product_id = 1;
step s2_insert_on_conflict1:
    INSERT INTO products VALUES(1,'2022-01-01 05:00:00', 'fish', 11, 2, '2022-12-30 23:59:59')
    ON CONFLICT(product_id, date_added) DO UPDATE SET discounted_price = 5;
 <waiting ...>
step s1_commit: COMMIT;
step s2_insert_on_conflict1: <... completed>
ERROR:  new row for relation "products" violates check constraint "products_check1"
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|    3|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)


starting permutation: s1_select s1_serializable_txn s2_serializable_txn s1_upd_pk_date_added s2_insert_on_conflict2 s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)

step s1_serializable_txn: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
step s2_serializable_txn: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
step s1_upd_pk_date_added: UPDATE products SET date_added = '2022-06-01 01:00:00' WHERE product_id = 1;
step s2_insert_on_conflict2:
    INSERT INTO products VALUES(1,'2022-01-01 05:00:00', 'fish', 11, 2, '2022-12-30 23:59:59')
    ON CONFLICT(product_id, date_added) DO UPDATE SET date_expires = '2022-05-01 02:00:00';
 <waiting ...>
step s1_commit: COMMIT;
step s2_insert_on_conflict2: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|fish|   11|               2|Fri Dec 30 23:59:59 2022 PST
         1|Wed Jun 01 01:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(2 rows)


starting permutation: s1_select s1_serializable_txn s2_serializable_txn s1_upd_date_expires s2_insert_on_conflict3 s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)

step s1_serializable_txn: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
step s2_serializable_txn: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
step s1_upd_date_expires: UPDATE products SET date_expires = '2022-05-01 01:00:00' WHERE product_id = 1;
step s2_insert_on_conflict3:
    INSERT INTO products VALUES(1,'2022-01-01 05:00:00', 'fish', 11, 2, '2022-12-30 23:59:59')
    ON CONFLICT(product_id, date_added) DO UPDATE SET date_added = '2022-05-01 02:00:00';
 <waiting ...>
step s1_commit: COMMIT;
step s2_insert_on_conflict3: <... completed>
ERROR:  new row for relation "products" violates check constraint "products_check"
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sun May 01 01:00:00 2022 PDT
(1 row)


starting permutation: s1_repeatable_read_txn s1_select s2_repeatable_read_txn s1_upd_price s2_upd_disc_price s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)

step s2_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s1_upd_price: UPDATE products SET price = 3 WHERE product_id = 1;
step s2_upd_disc_price: UPDATE products SET discounted_price = 5 WHERE product_id = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_upd_disc_price: <... completed>
ERROR:  could not serialize access due to concurrent update (yb_max_query_layer_retries set to 0 are exhausted)
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|    3|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)


starting permutation: s1_repeatable_read_txn s1_select s2_repeatable_read_txn s1_upd_pk_date_added s2_upd_date_expires s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)

step s2_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s1_upd_pk_date_added: UPDATE products SET date_added = '2022-06-01 01:00:00' WHERE product_id = 1;
step s2_upd_date_expires: UPDATE products SET date_expires = '2022-05-01 02:00:00' WHERE product_id = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_upd_date_expires: <... completed>
ERROR:  could not serialize access due to concurrent update (yb_max_query_layer_retries set to 0 are exhausted)
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Wed Jun 01 01:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)


starting permutation: s1_repeatable_read_txn s1_select s2_repeatable_read_txn s1_upd_price s2_insert_on_conflict1 s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)

step s2_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s1_upd_price: UPDATE products SET price = 3 WHERE product_id = 1;
step s2_insert_on_conflict1:
    INSERT INTO products VALUES(1,'2022-01-01 05:00:00', 'fish', 11, 2, '2022-12-30 23:59:59')
    ON CONFLICT(product_id, date_added) DO UPDATE SET discounted_price = 5;
 <waiting ...>
step s1_commit: COMMIT;
step s2_insert_on_conflict1: <... completed>
ERROR:  could not serialize access due to concurrent update (yb_max_query_layer_retries set to 0 are exhausted)
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|    3|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)


starting permutation: s1_repeatable_read_txn s1_select s2_repeatable_read_txn s1_upd_date_expires s2_insert_on_conflict3 s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)

step s2_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s1_upd_date_expires: UPDATE products SET date_expires = '2022-05-01 01:00:00' WHERE product_id = 1;
step s2_insert_on_conflict3:
    INSERT INTO products VALUES(1,'2022-01-01 05:00:00', 'fish', 11, 2, '2022-12-30 23:59:59')
    ON CONFLICT(product_id, date_added) DO UPDATE SET date_added = '2022-05-01 02:00:00';
 <waiting ...>
step s1_commit: COMMIT;
step s2_insert_on_conflict3: <... completed>
ERROR:  could not serialize access due to concurrent update (yb_max_query_layer_retries set to 0 are exhausted)
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sun May 01 01:00:00 2022 PDT
(1 row)


starting permutation: s2_enable_retries s1_read_committed_txn s1_select s2_read_committed_txn s1_upd_price s2_upd_disc_price s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_enable_retries: SET yb_max_query_layer_retries = 60;
step s1_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)

step s2_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_upd_price: UPDATE products SET price = 3 WHERE product_id = 1;
step s2_upd_disc_price: UPDATE products SET discounted_price = 5 WHERE product_id = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_upd_disc_price: <... completed>
ERROR:  new row for relation "products" violates check constraint "products_check1"
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|    3|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)


starting permutation: s2_enable_retries s1_read_committed_txn s1_select s2_read_committed_txn s1_upd_pk_date_added s2_upd_date_expires s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_enable_retries: SET yb_max_query_layer_retries = 60;
step s1_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)

step s2_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_upd_pk_date_added: UPDATE products SET date_added = '2022-06-01 01:00:00' WHERE product_id = 1;
step s2_upd_date_expires: UPDATE products SET date_expires = '2022-05-01 02:00:00' WHERE product_id = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_upd_date_expires: <... completed>
ERROR:  new row for relation "products" violates check constraint "products_check"
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Wed Jun 01 01:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)


starting permutation: s2_enable_retries s1_read_committed_txn s1_select s2_read_committed_txn s1_upd_price s2_insert_on_conflict1 s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_enable_retries: SET yb_max_query_layer_retries = 60;
step s1_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)

step s2_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_upd_price: UPDATE products SET price = 3 WHERE product_id = 1;
step s2_insert_on_conflict1:
    INSERT INTO products VALUES(1,'2022-01-01 05:00:00', 'fish', 11, 2, '2022-12-30 23:59:59')
    ON CONFLICT(product_id, date_added) DO UPDATE SET discounted_price = 5;
 <waiting ...>
step s1_commit: COMMIT;
step s2_insert_on_conflict1: <... completed>
ERROR:  new row for relation "products" violates check constraint "products_check1"
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|    3|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)


starting permutation: s2_enable_retries s1_read_committed_txn s1_select s2_read_committed_txn s1_upd_pk_date_added s2_insert_on_conflict2 s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_enable_retries: SET yb_max_query_layer_retries = 60;
step s1_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)

step s2_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_upd_pk_date_added: UPDATE products SET date_added = '2022-06-01 01:00:00' WHERE product_id = 1;
step s2_insert_on_conflict2:
    INSERT INTO products VALUES(1,'2022-01-01 05:00:00', 'fish', 11, 2, '2022-12-30 23:59:59')
    ON CONFLICT(product_id, date_added) DO UPDATE SET date_expires = '2022-05-01 02:00:00';
 <waiting ...>
step s1_commit: COMMIT;
step s2_insert_on_conflict2: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|fish|   11|               2|Fri Dec 30 23:59:59 2022 PST
         1|Wed Jun 01 01:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(2 rows)


starting permutation: s2_enable_retries s1_read_committed_txn s1_select s2_read_committed_txn s1_upd_date_expires s2_insert_on_conflict3 s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_enable_retries: SET yb_max_query_layer_retries = 60;
step s1_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sat Dec 31 23:59:59 2022 PST
(1 row)

step s2_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_upd_date_expires: UPDATE products SET date_expires = '2022-05-01 01:00:00' WHERE product_id = 1;
step s2_insert_on_conflict3:
    INSERT INTO products VALUES(1,'2022-01-01 05:00:00', 'fish', 11, 2, '2022-12-30 23:59:59')
    ON CONFLICT(product_id, date_added) DO UPDATE SET date_added = '2022-05-01 02:00:00';
 <waiting ...>
step s1_commit: COMMIT;
step s2_insert_on_conflict3: <... completed>
ERROR:  new row for relation "products" violates check constraint "products_check"
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price|date_expires
----------+------------------------+----+-----+----------------+----------------------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1|Sun May 01 01:00:00 2022 PDT
(1 row)
