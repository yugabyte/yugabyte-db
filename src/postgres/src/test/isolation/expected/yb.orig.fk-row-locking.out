unused step name: s2_select
Parsed test spec with 2 sessions

starting permutation: s1_priority s2_priority s1_serializable_txn s1_fk_pkey_insert s2_update s1_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_priority: SET yb_transaction_priority_lower_bound = .9;
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_priority: SET yb_transaction_priority_upper_bound= .1;
step s1_serializable_txn: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
step s1_fk_pkey_insert:
  INSERT INTO fk_pkey_table VALUES(1, 1, '2022-01-01 05:00:00');

step s2_update: UPDATE products SET price = 2 WHERE product_id = 1;
step s1_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|    2|               1
(1 row)


starting permutation: s1_priority s2_priority s1_repeatable_read_txn s1_fk_pkey_insert s2_update s1_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_priority: SET yb_transaction_priority_lower_bound = .9;
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_priority: SET yb_transaction_priority_upper_bound= .1;
step s1_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s1_fk_pkey_insert:
  INSERT INTO fk_pkey_table VALUES(1, 1, '2022-01-01 05:00:00');

step s2_update: UPDATE products SET price = 2 WHERE product_id = 1;
step s1_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|    2|               1
(1 row)


starting permutation: s1_priority s2_priority s1_read_committed_txn s1_fk_pkey_insert s2_update s1_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_priority: SET yb_transaction_priority_lower_bound = .9;
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_priority: SET yb_transaction_priority_upper_bound= .1;
step s1_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_fk_pkey_insert:
  INSERT INTO fk_pkey_table VALUES(1, 1, '2022-01-01 05:00:00');

step s2_update: UPDATE products SET price = 2 WHERE product_id = 1;
step s1_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|    2|               1
(1 row)


starting permutation: s1_priority s2_priority s1_serializable_txn s2_serializable_txn s1_fk_pkey_insert s2_update s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_priority: SET yb_transaction_priority_lower_bound = .9;
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_priority: SET yb_transaction_priority_upper_bound= .1;
step s1_serializable_txn: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
step s2_serializable_txn: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
step s1_fk_pkey_insert:
  INSERT INTO fk_pkey_table VALUES(1, 1, '2022-01-01 05:00:00');

step s2_update: UPDATE products SET price = 2 WHERE product_id = 1;
step s1_commit: COMMIT;
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|    2|               1
(1 row)


starting permutation: s1_priority s2_priority s1_repeatable_read_txn s2_repeatable_read_txn s1_fk_pkey_insert s2_update s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_priority: SET yb_transaction_priority_lower_bound = .9;
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_priority: SET yb_transaction_priority_upper_bound= .1;
step s1_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s2_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s1_fk_pkey_insert:
  INSERT INTO fk_pkey_table VALUES(1, 1, '2022-01-01 05:00:00');

step s2_update: UPDATE products SET price = 2 WHERE product_id = 1;
step s1_commit: COMMIT;
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|    2|               1
(1 row)


starting permutation: s1_priority s2_priority s1_read_committed_txn s2_read_committed_txn s1_fk_pkey_insert s2_update s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_priority: SET yb_transaction_priority_lower_bound = .9;
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_priority: SET yb_transaction_priority_upper_bound= .1;
step s1_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s2_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_fk_pkey_insert:
  INSERT INTO fk_pkey_table VALUES(1, 1, '2022-01-01 05:00:00');

step s2_update: UPDATE products SET price = 2 WHERE product_id = 1;
step s1_commit: COMMIT;
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|    2|               1
(1 row)


starting permutation: s1_priority s2_priority s1_serializable_txn s2_serializable_txn s1_select_for_key_share s2_update s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_priority: SET yb_transaction_priority_lower_bound = .9;
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_priority: SET yb_transaction_priority_upper_bound= .1;
step s1_serializable_txn: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
step s2_serializable_txn: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
step s1_select_for_key_share: SELECT * FROM products FOR KEY SHARE;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1
(1 row)

step s2_update: UPDATE products SET price = 2 WHERE product_id = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_update: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|    2|               1
(1 row)


starting permutation: s1_priority s2_priority s1_read_committed_txn s2_read_committed_txn s1_select_for_key_share s2_update s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_priority: SET yb_transaction_priority_lower_bound = .9;
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_priority: SET yb_transaction_priority_upper_bound= .1;
step s1_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s2_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_select_for_key_share: SELECT * FROM products FOR KEY SHARE;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1
(1 row)

step s2_update: UPDATE products SET price = 2 WHERE product_id = 1;
step s1_commit: COMMIT;
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|    2|               1
(1 row)


starting permutation: s1_priority s2_priority s1_repeatable_read_txn s2_repeatable_read_txn s1_select_for_key_share s2_update s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_priority: SET yb_transaction_priority_lower_bound = .9;
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_priority: SET yb_transaction_priority_upper_bound= .1;
step s1_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s2_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s1_select_for_key_share: SELECT * FROM products FOR KEY SHARE;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1
(1 row)

step s2_update: UPDATE products SET price = 2 WHERE product_id = 1;
step s1_commit: COMMIT;
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|    2|               1
(1 row)


starting permutation: s1_priority s2_priority s1_read_committed_txn s2_read_committed_txn s1_select_for_share s2_update s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_priority: SET yb_transaction_priority_lower_bound = .9;
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_priority: SET yb_transaction_priority_upper_bound= .1;
step s1_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s2_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_select_for_share: SELECT * FROM products FOR SHARE;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1
(1 row)

step s2_update: UPDATE products SET price = 2 WHERE product_id = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_update: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|    2|               1
(1 row)


starting permutation: s1_priority s2_priority s1_repeatable_read_txn s2_repeatable_read_txn s1_select_for_share s2_update s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_priority: SET yb_transaction_priority_lower_bound = .9;
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_priority: SET yb_transaction_priority_upper_bound= .1;
step s1_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s2_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s1_select_for_share: SELECT * FROM products FOR SHARE;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1
(1 row)

step s2_update: UPDATE products SET price = 2 WHERE product_id = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_update: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|    2|               1
(1 row)


starting permutation: s1_priority s2_priority s1_read_committed_txn s2_read_committed_txn s1_select_for_no_key_update s2_update s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_priority: SET yb_transaction_priority_lower_bound = .9;
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_priority: SET yb_transaction_priority_upper_bound= .1;
step s1_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s2_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_select_for_no_key_update: SELECT * FROM products FOR NO KEY UPDATE;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1
(1 row)

step s2_update: UPDATE products SET price = 2 WHERE product_id = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_update: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|    2|               1
(1 row)


starting permutation: s1_priority s2_priority s1_repeatable_read_txn s2_repeatable_read_txn s1_select_for_no_key_update s2_update s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_priority: SET yb_transaction_priority_lower_bound = .9;
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_priority: SET yb_transaction_priority_upper_bound= .1;
step s1_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s2_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s1_select_for_no_key_update: SELECT * FROM products FOR NO KEY UPDATE;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1
(1 row)

step s2_update: UPDATE products SET price = 2 WHERE product_id = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_update: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|    2|               1
(1 row)


starting permutation: s1_priority s2_priority s1_read_committed_txn s2_read_committed_txn s1_select_for_update s2_update s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_priority: SET yb_transaction_priority_lower_bound = .9;
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_priority: SET yb_transaction_priority_upper_bound= .1;
step s1_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s2_read_committed_txn: BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
step s1_select_for_update: SELECT * FROM products FOR UPDATE;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1
(1 row)

step s2_update: UPDATE products SET price = 2 WHERE product_id = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_update: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|    2|               1
(1 row)


starting permutation: s1_priority s2_priority s1_repeatable_read_txn s2_repeatable_read_txn s1_select_for_update s2_update s1_commit s2_commit s1_select
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1_priority: SET yb_transaction_priority_lower_bound = .9;
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s2_priority: SET yb_transaction_priority_upper_bound= .1;
step s1_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s2_repeatable_read_txn: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s1_select_for_update: SELECT * FROM products FOR UPDATE;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|   10|               1
(1 row)

step s2_update: UPDATE products SET price = 2 WHERE product_id = 1; <waiting ...>
step s1_commit: COMMIT;
step s2_update: <... completed>
step s2_commit: COMMIT;
step s1_select: SELECT * FROM products;
product_id|date_added              |name|price|discounted_price
----------+------------------------+----+-----+----------------
         1|Sat Jan 01 05:00:00 2022|oats|    2|               1
(1 row)
