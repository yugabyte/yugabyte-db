Parsed test spec with 2 sessions

starting permutation: s1a s1b s2a s2b s1c s1d s2c
s1: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
s2: NOTICE:  priorities don't exist for read committed isolation transations, the transaction will wait for conflicting transactions to commit before proceeding
DETAIL:  This also applies to other isolation levels if using Wait-on-Conflict concurrency control.
step s1a: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s1b: SELECT * FROM foo WHERE k = 1 FOR UPDATE;
k|v
-+-
1|0
(1 row)

step s2a: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
step s2b: update foo set v=10 where k=1; <waiting ...>
s1: NOTICE:  found wait event Timeout YBTxnConflictBackoff
step s1c:
  DO $$DECLARE r record;
  BEGIN
      WHILE true LOOP
          BEGIN
              SELECT wait_event_type, wait_event, state INTO STRICT r FROM pg_stat_activity WHERE query = 'update foo set v=10 where k=1;';

              IF r.wait_event_type = 'Timeout' THEN
                  IF r.wait_event = 'YBTxnConflictBackoff' THEN
                      -- NOTE: this message won't be visible in the test output until we get commit `ebd4992821` from upstream
                      RAISE NOTICE 'found wait event % %', r.wait_event_type, r.wait_event;
                      RETURN;
                  END IF;
              END IF;

              IF r.wait_event_type = 'Client' THEN
                  IF r.wait_event = 'ClientRead' THEN
                      RAISE EXCEPTION 's2 appears to have timed out: % state: %', r.wait_event, r.state;
                  END IF;
              END IF;


              -- We found the query, but it is not yet waiting due to a transaction conflict
              SELECT i into r from pg_stat_clear_snapshot() i;

          EXCEPTION
              WHEN NO_DATA_FOUND THEN
                  RAISE EXCEPTION 'expected update statement to be running';
          END;
      END LOOP;
  END$$;

step s1d: COMMIT;
step s2b: <... completed>
step s2c: COMMIT;
