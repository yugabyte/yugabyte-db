Parsed test spec with 2 sessions

starting permutation: s1_begin s1_lock s2_auth s2_vacuum s1_commit s2_reset
step s1_begin: BEGIN;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
step s2_auth: SET ROLE regress_vacuum_conflict;
s2: WARNING:  skipping "vacuum_tab" --- only table or database owner can vacuum it
step s2_vacuum: VACUUM vacuum_tab;
step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s1_begin s2_auth s2_vacuum s1_lock s1_commit s2_reset
step s1_begin: BEGIN;
step s2_auth: SET ROLE regress_vacuum_conflict;
s2: WARNING:  skipping "vacuum_tab" --- only table or database owner can vacuum it
step s2_vacuum: VACUUM vacuum_tab;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s1_begin s2_auth s1_lock s2_vacuum s1_commit s2_reset
step s1_begin: BEGIN;
step s2_auth: SET ROLE regress_vacuum_conflict;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
s2: WARNING:  skipping "vacuum_tab" --- only table or database owner can vacuum it
step s2_vacuum: VACUUM vacuum_tab;
step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s2_auth s2_vacuum s1_begin s1_lock s1_commit s2_reset
step s2_auth: SET ROLE regress_vacuum_conflict;
s2: WARNING:  skipping "vacuum_tab" --- only table or database owner can vacuum it
step s2_vacuum: VACUUM vacuum_tab;
step s1_begin: BEGIN;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s1_begin s1_lock s2_auth s2_analyze s1_commit s2_reset
step s1_begin: BEGIN;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
step s2_auth: SET ROLE regress_vacuum_conflict;
s2: WARNING:  skipping "vacuum_tab" --- only table or database owner can analyze it
step s2_analyze: ANALYZE vacuum_tab;
step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s1_begin s2_auth s2_analyze s1_lock s1_commit s2_reset
step s1_begin: BEGIN;
step s2_auth: SET ROLE regress_vacuum_conflict;
s2: WARNING:  skipping "vacuum_tab" --- only table or database owner can analyze it
step s2_analyze: ANALYZE vacuum_tab;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s1_begin s2_auth s1_lock s2_analyze s1_commit s2_reset
step s1_begin: BEGIN;
step s2_auth: SET ROLE regress_vacuum_conflict;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
s2: WARNING:  skipping "vacuum_tab" --- only table or database owner can analyze it
step s2_analyze: ANALYZE vacuum_tab;
step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s2_auth s2_analyze s1_begin s1_lock s1_commit s2_reset
step s2_auth: SET ROLE regress_vacuum_conflict;
s2: WARNING:  skipping "vacuum_tab" --- only table or database owner can analyze it
step s2_analyze: ANALYZE vacuum_tab;
step s1_begin: BEGIN;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s1_begin s2_grant s1_lock s2_auth s2_vacuum s1_commit s2_reset
step s1_begin: BEGIN;
step s2_grant: ALTER TABLE vacuum_tab OWNER TO regress_vacuum_conflict;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
step s2_auth: SET ROLE regress_vacuum_conflict;
step s2_vacuum: VACUUM vacuum_tab; <waiting ...>
step s1_commit: COMMIT;
step s2_vacuum: <... completed>
step s2_reset: RESET ROLE;

starting permutation: s1_begin s2_grant s2_auth s2_vacuum s1_lock s1_commit s2_reset
step s1_begin: BEGIN;
step s2_grant: ALTER TABLE vacuum_tab OWNER TO regress_vacuum_conflict;
step s2_auth: SET ROLE regress_vacuum_conflict;
step s2_vacuum: VACUUM vacuum_tab;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s1_begin s2_grant s2_auth s1_lock s2_vacuum s1_commit s2_reset
step s1_begin: BEGIN;
step s2_grant: ALTER TABLE vacuum_tab OWNER TO regress_vacuum_conflict;
step s2_auth: SET ROLE regress_vacuum_conflict;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
step s2_vacuum: VACUUM vacuum_tab; <waiting ...>
step s1_commit: COMMIT;
step s2_vacuum: <... completed>
step s2_reset: RESET ROLE;

starting permutation: s2_grant s2_auth s2_vacuum s1_begin s1_lock s1_commit s2_reset
step s2_grant: ALTER TABLE vacuum_tab OWNER TO regress_vacuum_conflict;
step s2_auth: SET ROLE regress_vacuum_conflict;
step s2_vacuum: VACUUM vacuum_tab;
step s1_begin: BEGIN;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s1_begin s2_grant s1_lock s2_auth s2_analyze s1_commit s2_reset
step s1_begin: BEGIN;
step s2_grant: ALTER TABLE vacuum_tab OWNER TO regress_vacuum_conflict;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
step s2_auth: SET ROLE regress_vacuum_conflict;
step s2_analyze: ANALYZE vacuum_tab; <waiting ...>
step s1_commit: COMMIT;
step s2_analyze: <... completed>
step s2_reset: RESET ROLE;

starting permutation: s1_begin s2_grant s2_auth s2_analyze s1_lock s1_commit s2_reset
step s1_begin: BEGIN;
step s2_grant: ALTER TABLE vacuum_tab OWNER TO regress_vacuum_conflict;
step s2_auth: SET ROLE regress_vacuum_conflict;
step s2_analyze: ANALYZE vacuum_tab;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
step s1_commit: COMMIT;
step s2_reset: RESET ROLE;

starting permutation: s1_begin s2_grant s2_auth s1_lock s2_analyze s1_commit s2_reset
step s1_begin: BEGIN;
step s2_grant: ALTER TABLE vacuum_tab OWNER TO regress_vacuum_conflict;
step s2_auth: SET ROLE regress_vacuum_conflict;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
step s2_analyze: ANALYZE vacuum_tab; <waiting ...>
step s1_commit: COMMIT;
step s2_analyze: <... completed>
step s2_reset: RESET ROLE;

starting permutation: s2_grant s2_auth s2_analyze s1_begin s1_lock s1_commit s2_reset
step s2_grant: ALTER TABLE vacuum_tab OWNER TO regress_vacuum_conflict;
step s2_auth: SET ROLE regress_vacuum_conflict;
step s2_analyze: ANALYZE vacuum_tab;
step s1_begin: BEGIN;
step s1_lock: LOCK vacuum_tab IN SHARE UPDATE EXCLUSIVE MODE;
step s1_commit: COMMIT;
step s2_reset: RESET ROLE;
