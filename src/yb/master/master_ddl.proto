// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

syntax = "proto2";

package yb.master;

option java_package = "org.yb.master";

import "yb/common/common.proto";
import "yb/common/common_types.proto";
import "yb/common/wire_protocol.proto";
import "yb/docdb/docdb.proto";
import "yb/master/catalog_entity_info.proto";
import "yb/master/master_types.proto";
import "yb/rpc/service.proto";

message TablegroupIdentifierPB {
  // The tablegroup ID to fetch info.
  optional bytes id = 1;

  // The tablegroup name to fetch info.
  optional string name = 2;

  // The namespace that the tablegroup is in
  optional bytes namespace_id = 3;
}

message UDTypeIdentifierPB {
  // The table ID to fetch info.
  optional bytes type_id = 1;

  // The table name to fetch info.
  optional string type_name = 2;

  // The table namespace (if empty - using default namespace).
  optional NamespaceIdentifierPB namespace = 3;
}

message UDTypeInfoPB {
  optional bytes id = 1;
  optional string name = 2;
  repeated string field_names = 3;
  repeated QLTypePB field_types = 4;
  optional NamespaceIdentifierPB namespace = 5;
}

// Create table request (including index table)
message CreateTableRequestPB {
  reserved 4, 32;

  required string name = 1;
  optional SchemaPB schema = 2;

  // Specifies number of tablets to create. If it's not set here
  // 'SchemaPB::TablePropertiesPB::num_tablets' from 'schema' field will be used.
  optional int32 num_tablets = 3;

  optional PartitionSchemaPB partition_schema = 5;
  optional ReplicationInfoPB replication_info = 6;
  optional TableType table_type = 7 [ default = DEFAULT_TABLE_TYPE ];
  optional NamespaceIdentifierPB namespace = 8;

  // For index table.
  optional IndexInfoPB index_info = 16;
  optional bytes indexed_table_id = 9; // Indexed table id of this index.
  optional bool is_local_index = 10 [ default = false ];  // Is a local index?
  optional bool is_unique_index = 11 [ default = false ]; // Is a unique index?
  optional bool skip_index_backfill = 18 [ default = false ]; // Skip online schema migration for
                                                              // index?
  optional bool is_backfill_deferred = 23 [ default = false ]; // Defer backfill for batching later?

  // For RBAC.
  optional string creator_role_name = 12;

  // For Postgres:
  optional bytes table_id = 13; // id to assign to this table.
  optional bool is_pg_catalog_table = 14 [ default = false ]; // Is this a sys catalog table?
  optional bool is_pg_shared_table = 15 [ default = false ];  // Is this a shared table?

  // Is this a colocated table? This field is only applicable for a colocated database.
  optional bool is_colocated_via_database = 17 [ default = true ];

  // This is only applicable for tablegroups. Eventually colocated will be deprecated.
  optional bytes tablegroup_id = 19;

  // Colocation ID to distinguish a table within a colocation group.
  // Auto-generated by catalog manager if not specified.
  // Only makes sense for colocated tables.
  optional uint32 colocation_id = 25;

  // For YSQL tables, transaction used by this DDL. If aborted, table will be removed.
  optional TransactionMetadataPB transaction = 20;

  // For YSQL tables, this denotes the tablespace that this table is associated with.
  optional bytes tablespace_id = 21;

  // This field should be used to create or restore table with a fixed set of partitions.
  repeated PartitionPB partitions = 22;

  optional bool is_matview = 26;

  // In case the table was rewritten, explicitly store the TableId containing the PG table OID
  // (as the table's TableId no longer matches).
  optional bytes pg_table_id = 24;

  repeated StatefulServiceKind hosted_stateful_services = 27;

  optional bool ysql_yb_ddl_rollback_enabled = 28 [ default = false ];

  // Used during table rewrite - the TableId of the old DocDB table that is being rewritten.
  optional bytes old_rewrite_table_id = 29;

  optional bool is_clone = 30;

  // Set to true when the table is being re-written as part of a TRUNCATE operation.
  optional bool is_truncate = 31;

  // Set by DDL Replication to link the table to the original table in the source cluster.
  optional bytes xcluster_source_table_id = 33;
}

message CreateTableResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  optional bytes table_id = 2;
}

message IsCreateTableDoneRequestPB {
  required TableIdentifierPB table = 1;
}

message IsCreateTableDoneResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  // true if the create operation is completed, false otherwise
  optional bool done = 3;
}

message ListTablesRequestPB {
  // When used, only returns tables that satisfy a substring match on name_filter.
  optional string name_filter = 1;

  // Can be used to list tables for this one particular namespace.
  optional NamespaceIdentifierPB namespace = 2;

  // Exclude system tables.
  optional bool exclude_system_tables = 3 [default = false];

  // Can be used to filter tables based on RelationType
  repeated RelationType relation_type_filter = 4;

  optional bool include_not_running = 5;
}

message ListTablesResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  message ColocatedInfo {
    optional bool colocated = 1;
    optional bytes parent_table_id = 2;
  }

  message TableInfo {
    required bytes id = 1;
    required string name = 2;
    optional TableType table_type = 3;
    optional NamespaceIdentifierPB namespace = 4;
    optional RelationType relation_type = 5 [default = USER_TABLE_RELATION];
    optional SysTablesEntryPB.State state = 6;
    optional string pgschema_name = 7;
    optional ColocatedInfo colocated_info = 8;
    optional bool hidden = 9;
    optional string indexed_table_id = 10;
  }

  repeated TableInfo tables = 2;
}

message GetTableSchemaRequestPB {
  required TableIdentifierPB table = 1;
  optional bool include_hidden = 2;
  optional bool check_exists_only = 3;
}

message GetTableSchemaResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  // This is the schema that every TS should be able to understand
  // if your alter is keeping the schema compatible.
  // In case of an alter table in progress, this is the previous schema;
  // otherwise it is the latest schema.
  optional SchemaPB schema = 2;

  // Table schema version
  optional uint32 version = 9;

  // The table's partition schema.
  optional PartitionSchemaPB partition_schema = 5;

  optional ReplicationInfoPB replication_info = 3;

  // True if the create operation is completed, false otherwise.
  optional bool create_table_done = 6;

  // The table type.
  optional TableType table_type = 7;

  // Table identifier
  optional TableIdentifierPB identifier = 8;

  // Secondary indexes of the table.
  repeated IndexInfoPB indexes = 10;

  // For index table: [to be deprecated and replaced by "index_info"]
  optional bytes OBSOLETE_indexed_table_id = 11; // Indexed table id of this index.

  // For index table: information about this index.
  optional IndexInfoPB index_info = 12;

  // True if table is colocated (including tablegroups, excluding YSQL system tables).
  optional bool colocated = 13;

  optional bytes tablegroup_id = 16;

  optional bool is_compatible_with_previous_version = 14 [default = false];

  optional uint32 wal_retention_secs = 15;

  repeated YsqlDdlTxnVerifierStatePB ysql_ddl_txn_verifier_state = 17;

  // If the table is rewritten, this field explicitly stores the PG table id.
  optional bytes pg_table_id = 18;

  // Added on Oct 2024 (v2025.1). This will not be set on versions before this
  // change, and there is no direct AutoFlag protecting this, so use with
  // caution.
  optional bool is_backfilling = 19; // [default = false]
}

message GetTablegroupSchemaRequestPB {
  required TablegroupIdentifierPB tablegroup = 1;
}

message GetTablegroupSchemaResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  // List of all tables in this tablegroup.
  repeated GetTableSchemaResponsePB get_table_schema_response_pbs = 2;
}

message GetColocatedTabletSchemaRequestPB {
  required TableIdentifierPB parent_colocated_table = 1;
}

message GetColocatedTabletSchemaResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  // List of all colocated user tables in this colocated database.
  repeated GetTableSchemaResponsePB get_table_schema_response_pbs = 2;
}

message TruncateTableRequestPB {
  repeated bytes table_ids = 1;
}

message TruncateTableResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;
}

message IsTruncateTableDoneRequestPB {
  optional bytes table_id = 1;
}

message IsTruncateTableDoneResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  // true if the truncate operation is completed, false otherwise
  optional bool done = 2;
}

message BackfillIndexRequestPB {
  // The index to backfill. Used for YSQL
  optional TableIdentifierPB index_identifier = 1;
}

message BackfillIndexResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  // The indexed table to backfill.
  optional TableIdentifierPB table_identifier = 2;
}

message LaunchBackfillIndexForTableRequestPB {
  // The indexed table identifier. Used for YCQL tables from yb-admin.
  optional TableIdentifierPB table_identifier = 1;
}

message LaunchBackfillIndexForTableResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;
}

message GetBackfillJobsRequestPB {
  // The indexed table identifier. Used for YCQL tables from yb-admin.
  optional TableIdentifierPB table_identifier = 1;
}

message GetBackfillJobsResponsePB {
  repeated BackfillJobPB backfill_jobs = 1;
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 2;
}

message GetBackfillStatusRequestPB {
  // A list of index tables whose backfill status should be returned. Either table_id or
  // a pair of table_name and namespace should be specified to identify a table.
  repeated TableIdentifierPB index_tables = 1;
}

message IndexStatusPB {
  enum BackfillStatus {
    BACKFILL_UNKNOWN = 0; // Unspecified state.
    BACKFILL_SUCCESS = 1; // Backfill succeeded.
  }

  optional TableIdentifierPB index_table = 1;

  // Contains an error if it's not possible to get backfill_status and index permissions.
  optional AppStatusPB error = 2;

  // Backfill status for the specified index table on base of index permissions. Value absence means
  // either error field is specified, or backfill_status is not present in BackfillStatus enum.
  optional BackfillStatus backfill_status = 3;
}

message GetBackfillStatusResponsePB {
  optional MasterErrorPB error = 1;
  repeated IndexStatusPB index_status = 2;
}

// Delete table request (including index table).
message DeleteTableRequestPB {
  required TableIdentifierPB table = 1;
  optional bool is_index_table = 2 [ default = false ];
  optional TransactionMetadataPB transaction = 3;
  optional bool ysql_yb_ddl_rollback_enabled = 4 [ default = false ];
}

message DeleteTableResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  // table_id for the requested table.
  optional bytes table_id = 2;
  // Deleted table ids. Includes the requested table, and also
  // any index tables that it may have.
  repeated bytes deleted_table_ids = 4;

  // For index table, the indexed table of this index.
  optional TableIdentifierPB indexed_table = 3;
}

message IsDeleteTableDoneRequestPB {
  required bytes table_id = 1;
}

message IsDeleteTableDoneResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  // true if the delete operation is completed, false otherwise
  optional bool done = 2;
}

message AlterTableRequestPB {
  enum StepType {
    UNKNOWN = 0;
    ADD_COLUMN = 1;
    DROP_COLUMN = 2;
    RENAME_COLUMN = 3;
    SET_COLUMN_PG_TYPE = 5;

    // TODO(KUDU-861): this will subsume RENAME_COLUMN, but not yet implemented
    // on the master side.
    ALTER_COLUMN = 4;
  }
  message AddColumn {
    // The schema to add.
    // NOTE: the 'id' field of the schema should not be provided here --
    // the server will assign an ID.
    required ColumnSchemaPB schema = 1;
  }
  message DropColumn {
    // Name of the column to drop.
    required string name = 1;
  }
  message RenameColumn {
    // Name of the column to rename;
    required string old_name = 1;
    required string new_name = 2;
  }

  message SetColumnPgType {
    // Name of the column for which to update the pg_type_oid.
    required string name = 1;
    required uint32 pg_type_oid = 2;
  }

  message Step {
    optional StepType type = 1 [ default = UNKNOWN ];

    // Exactly one of the following must be set, based on 'type'
    optional AddColumn add_column = 2;
    optional DropColumn drop_column = 3;
    optional RenameColumn rename_column = 4;
    optional SetColumnPgType set_column_pg_type = 5;
  }

  required TableIdentifierPB table = 1;
  repeated Step alter_schema_steps = 2;
  optional string new_table_name = 3;
  optional NamespaceIdentifierPB new_namespace = 4;
  optional TablePropertiesPB alter_properties = 5;
  optional uint32 wal_retention_secs = 6;

  // If set to true, SendAlterTableRequest will be sent even if no changes are specified in this
  // request.
  // This is useful to trigger index permissions update.
  optional bool force_send_alter_request = 7 [default = false];

  // Replication information for this table.
  optional ReplicationInfoPB replication_info = 8;

  // This is the transaction performing the Alter operation. This is used by TServers to abort
  // any ongoing DML on the table other than this transaction.
  optional TransactionMetadataPB transaction = 9;

  // If set, updates the pgschema_name in SchemaPB.
  optional string pgschema_name = 10;

  // Used for YSQL to notify DocDB of DDL changes that affect only PG metadata
  optional bool increment_schema_version = 11 [default = false];

  // If set, YB-Master will poll the status of 'transaction' and rollback the Alter if failed.
  optional bool ysql_yb_ddl_rollback_enabled = 12 [ default = false ];

  // For CDCSDK Stream creation with consistent snapshot
  optional bytes cdc_sdk_stream_id = 13;
  optional bool cdc_sdk_require_history_cutoff = 14;
}

message AlterTableResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  optional uint32 schema_version = 2;
}

message IsAlterTableDoneRequestPB {
  required TableIdentifierPB table = 1;
}

message IsAlterTableDoneResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  // this is the current schema, or the 'new' schema version if an alter is in progress
  optional uint32 schema_version = 2;

  // true if the alter operation is completed, false otherwise
  optional bool done = 3;
}

message GetTableDiskSizeRequestPB {
  // GetTableDiskSizePB used for YSQL \d+ command
  optional TableIdentifierPB table = 1;
}

message GetTableDiskSizeResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  // Size is 0 for colocated tables
  optional int64 size = 2;
  optional int32 num_missing_tablets = 3;
}

// ============================================================================
//  Namespace  (default namespace = ANY placement)
// ============================================================================
// Database type is added to metadata entries such that PGSQL clients cannot delete or connect to
// CQL database_type and vice versa.
message CreateNamespaceRequestPB {
  // Namespace name.
  optional string name = 1;

  // Database type.
  optional YQLDatabase database_type = 2 [ default = YQL_DATABASE_CQL ];

  // For RBAC.
  optional string creator_role_name = 3;

  // For Postgres:
  optional bytes namespace_id = 4; // id to assign to this namespace.
  optional bytes source_namespace_id = 5; // namespace id of the source database to copy from.
  optional uint32 next_pg_oid = 6; // Next oid to assign. Ignored when source_namespace_id is given
                                   // and the next_pg_oid from source namespace will be used.
 // DDL Dependent upon Transaction success (abort removes). Used by YSQL.
  optional TransactionMetadataPB transaction = 8;

  // True if the namespace is colocated.
  optional bool colocated = 7 [ default = false ];
}

message CreateNamespaceResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  optional bytes id = 2;
}

message IsCreateNamespaceDoneRequestPB {
  optional NamespaceIdentifierPB namespace = 1;
}

message IsCreateNamespaceDoneResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  // true if the create operation is completed, false otherwise
  optional bool done = 2;
}

// Database type is added to metadata entries such that PGSQL clients cannot delete or connect to
// CQL database_type and vice versa.
message DeleteNamespaceRequestPB {
  optional NamespaceIdentifierPB namespace = 1;

  // Database type.
  optional YQLDatabase database_type = 2 [ default = YQL_DATABASE_CQL ];
}
// Fails if the namespace is NOT empty

message DeleteNamespaceResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;
}

message IsDeleteNamespaceDoneRequestPB {
  optional NamespaceIdentifierPB namespace = 1;
}

message IsDeleteNamespaceDoneResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  // true if the delete operation completed, false otherwise
  optional bool done = 2;
}

message AlterNamespaceRequestPB {
  optional NamespaceIdentifierPB namespace = 1;

  // New name for the namespace in the alter operation.
  optional string new_name = 2;
}

message AlterNamespaceResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;
}

message ListNamespacesRequestPB {
  optional YQLDatabase database_type = 1 [ default = YQL_DATABASE_CQL ];
  optional bool include_nonrunning = 2;
}

message ListNamespacesResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  repeated NamespaceIdentifierPB namespaces = 2;

  repeated int32 states = 3;

  /* We use int32 because the repeated bool type is bugged.
  See https://github.com/yugabyte/yugabyte-db/issues/15868 */
  repeated int32 colocated = 4;
}

message GetNamespaceInfoRequestPB {
  optional NamespaceIdentifierPB namespace = 1;
}

message GetNamespaceInfoResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  optional NamespaceIdentifierPB namespace = 2;
  optional bool colocated = 3;
  // This denotes if a colocated database is a legacy colocated database.
  optional bool legacy_colocated_database = 4;
}

// ============================================================================
//  Tablegroup
// ============================================================================

message CreateTablegroupRequestPB {
  required bytes id = 1;
  required bytes namespace_id = 2;
  optional string namespace_name = 3;

  // These two fields ensure that YB-Master will poll the status of 'transaction' and delete the
  // tablegroup if aborted.
  optional TransactionMetadataPB transaction = 5;
  optional bool ysql_yb_ddl_rollback_enabled = 6 [ default = false ];

  // This denotes the tablespace that this tablegroup is associated with.
  optional bytes tablespace_id = 4;
}

message CreateTablegroupResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  optional bytes parent_table_id = 2;
  optional bytes parent_table_name = 3;
}

message DeleteTablegroupRequestPB {
  required bytes id = 1;

  // Deprecated namespace_id.
  reserved 2;

  // These two fields ensure that YB-Master will first mark the tablegroup for deletion, poll the
  // status of 'transaction' and rollback the marker if failed. Otherwise deletion of the tablegroup
  // will be initiated upon receipt of this request.
  optional TransactionMetadataPB transaction = 3;
  optional bool ysql_yb_ddl_rollback_enabled = 4 [ default = false ];
}

message DeleteTablegroupResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  optional bytes parent_table_id = 2;
}

message ListTablegroupsRequestPB {
  optional bytes namespace_id = 1;
}

message ListTablegroupsResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  repeated TablegroupIdentifierPB tablegroups = 2;
}

// ============================================================================
//  (User-Defined) Type
// ============================================================================

message CreateUDTypeRequestPB {
  optional NamespaceIdentifierPB namespace = 1;
  optional string name = 2;
  repeated string field_names = 3;
  repeated QLTypePB field_types = 4;
}

message CreateUDTypeResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;
  optional bytes id = 2;
}

message DeleteUDTypeRequestPB {
  optional UDTypeIdentifierPB type = 1;
}

message DeleteUDTypeResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;
}

message ListUDTypesRequestPB {
  optional NamespaceIdentifierPB namespace = 1;
}

message ListUDTypesResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;

  repeated UDTypeInfoPB udtypes = 2;
}

message GetUDTypeInfoRequestPB {
  optional UDTypeIdentifierPB type = 1;
}

message GetUDTypeInfoResponsePB {
  // The error, if an error occurred with this request.
  optional MasterErrorPB error = 1;
  optional UDTypeInfoPB udtype = 2;
}

// ============================================================================
//  YSQL DDL Atomicity
// ============================================================================

message ReportYsqlDdlTxnStatusRequestPB {
  // The transaction whose status is being reported.
  optional bytes transaction_id = 1;

  // Whether the above transaction is committed or aborted.
  optional bool is_committed = 2;
}

message ReportYsqlDdlTxnStatusResponsePB {
  optional MasterErrorPB error = 1;
}

message IsYsqlDdlVerificationDoneRequestPB {
  optional TransactionMetadataPB transaction = 1;
}

message IsYsqlDdlVerificationDoneResponsePB {
  optional MasterErrorPB error = 1;

  optional bool done = 2;
}

// ============================================================================
// Table/Object Locks
// ============================================================================

message AcquireObjectLocksGlobalRequestPB {
  optional bytes txn_id = 1;
  optional uint64 txn_reuse_version = 2;
  optional uint32 subtxn_id = 3;
  optional bytes session_host_uuid = 4;
  repeated docdb.ObjectLockPB object_locks = 5;
}

message AcquireObjectLocksGlobalResponsePB {
  optional MasterErrorPB error = 1;
}

message ReleaseObjectLocksGlobalRequestPB {
  optional bytes txn_id = 1;
  optional uint64 txn_reuse_version = 2;
  optional uint32 subtxn_id = 3;
  optional bytes session_host_uuid = 4;
  repeated docdb.ObjectLockPB object_locks = 5;
  // When set, releases locks on all objects held against the given session id.
  optional bool release_all_locks = 6;
}

message ReleaseObjectLocksGlobalResponsePB {
  optional MasterErrorPB error = 1;
}

service MasterDdl {
  option (yb.rpc.custom_service_name) = "yb.master.MasterService";

  rpc CreateTable(CreateTableRequestPB) returns (CreateTableResponsePB);
  rpc IsCreateTableDone(IsCreateTableDoneRequestPB) returns (IsCreateTableDoneResponsePB);

  rpc ListTables(ListTablesRequestPB) returns (ListTablesResponsePB);
  rpc GetTableSchema(GetTableSchemaRequestPB) returns (GetTableSchemaResponsePB);
  rpc GetTablegroupSchema(GetTablegroupSchemaRequestPB)
      returns (GetTablegroupSchemaResponsePB);
  rpc GetColocatedTabletSchema(GetColocatedTabletSchemaRequestPB)
      returns (GetColocatedTabletSchemaResponsePB);

  rpc TruncateTable(TruncateTableRequestPB) returns (TruncateTableResponsePB);
  rpc IsTruncateTableDone(IsTruncateTableDoneRequestPB) returns (IsTruncateTableDoneResponsePB);

  rpc BackfillIndex(BackfillIndexRequestPB) returns (BackfillIndexResponsePB);
  rpc LaunchBackfillIndexForTable(LaunchBackfillIndexForTableRequestPB)
          returns (LaunchBackfillIndexForTableResponsePB);
  rpc GetBackfillJobs(GetBackfillJobsRequestPB) returns (GetBackfillJobsResponsePB);
  rpc GetBackfillStatus(GetBackfillStatusRequestPB) returns (GetBackfillStatusResponsePB);

  rpc DeleteTable(DeleteTableRequestPB) returns (DeleteTableResponsePB);
  rpc IsDeleteTableDone(IsDeleteTableDoneRequestPB) returns (IsDeleteTableDoneResponsePB);

  rpc AlterTable(AlterTableRequestPB) returns (AlterTableResponsePB);
  rpc IsAlterTableDone(IsAlterTableDoneRequestPB) returns (IsAlterTableDoneResponsePB);

  rpc CreateNamespace(CreateNamespaceRequestPB) returns (CreateNamespaceResponsePB);
  rpc IsCreateNamespaceDone(IsCreateNamespaceDoneRequestPB)
      returns (IsCreateNamespaceDoneResponsePB);
  rpc DeleteNamespace(DeleteNamespaceRequestPB) returns (DeleteNamespaceResponsePB);
  rpc IsDeleteNamespaceDone(IsDeleteNamespaceDoneRequestPB)
      returns (IsDeleteNamespaceDoneResponsePB);
  rpc AlterNamespace(AlterNamespaceRequestPB) returns (AlterNamespaceResponsePB);
  rpc ListNamespaces(ListNamespacesRequestPB) returns (ListNamespacesResponsePB);
  rpc GetNamespaceInfo(GetNamespaceInfoRequestPB) returns (GetNamespaceInfoResponsePB);

  rpc GetTableDiskSize(GetTableDiskSizeRequestPB) returns (GetTableDiskSizeResponsePB);

  // For Tablegroup:
  rpc CreateTablegroup(CreateTablegroupRequestPB) returns (CreateTablegroupResponsePB);
  rpc DeleteTablegroup(DeleteTablegroupRequestPB) returns (DeleteTablegroupResponsePB);
  rpc ListTablegroups(ListTablegroupsRequestPB) returns (ListTablegroupsResponsePB);

  rpc CreateUDType(CreateUDTypeRequestPB) returns (CreateUDTypeResponsePB);
  rpc DeleteUDType(DeleteUDTypeRequestPB) returns (DeleteUDTypeResponsePB);
  rpc ListUDTypes(ListUDTypesRequestPB) returns (ListUDTypesResponsePB);
  rpc GetUDTypeInfo(GetUDTypeInfoRequestPB) returns (GetUDTypeInfoResponsePB);

  rpc ReportYsqlDdlTxnStatus(ReportYsqlDdlTxnStatusRequestPB) returns
      (ReportYsqlDdlTxnStatusResponsePB);
  rpc IsYsqlDdlVerificationDone(IsYsqlDdlVerificationDoneRequestPB) returns
      (IsYsqlDdlVerificationDoneResponsePB);

  rpc AcquireObjectLocksGlobal(AcquireObjectLocksGlobalRequestPB)
      returns (AcquireObjectLocksGlobalResponsePB);
  rpc ReleaseObjectLocksGlobal(ReleaseObjectLocksGlobalRequestPB)
      returns (ReleaseObjectLocksGlobalResponsePB);
}
