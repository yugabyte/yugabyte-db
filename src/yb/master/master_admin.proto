// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

syntax = "proto2";

package yb.master;

option java_package = "org.yb.master";

import "yb/common/common_net.proto";
import "yb/master/catalog_entity_info.proto";
import "yb/master/master_types.proto";
import "yb/rpc/service.proto";
import "yb/tablet/tablet_types.proto";

// TODO: rename to FlushOrCompact TablesRequestPB
// https://github.com/YugaByte/yugabyte-db/issues/729
message FlushTablesRequestPB {
  repeated TableIdentifierPB tables = 1;

  // Whether we want to compact the tablets instead of flushing them.
  optional bool is_compaction = 2;

  // Whether we want to include index tables in this flush. If there are index tables in the tables
  // field this field must be set to false, otherwise the request will fail.
  optional bool add_indexes = 3;

  // Whether the operation only applies to regular RocksDB but not intents RocksDB.
  optional bool regular_only = 4;
}

message FlushTablesResponsePB {
  optional MasterErrorPB error = 1;

  optional bytes flush_request_id = 2;
}

message IsFlushTablesDoneRequestPB {
  optional bytes flush_request_id = 1;
}

message IsFlushTablesDoneResponsePB {
  optional MasterErrorPB error = 1;

  // true if the flush tables operation is completed, false otherwise.
  optional bool done = 2;

  // true if the flush tables operation is successful.
  optional bool success = 3;
}

message FlushSysCatalogRequestPB {
}

message FlushSysCatalogResponsePB {
  optional MasterErrorPB error = 1;
}

message CompactSysCatalogRequestPB {
}

message CompactSysCatalogResponsePB {
  optional MasterErrorPB error = 1;
}

message GetCompactionStatusRequestPB {
  optional TableIdentifierPB table = 1;
  optional bool show_tablets = 2;
}

message TabletReplicaFullCompactionStatus {
  optional bytes ts_id = 1;
  optional bytes tablet_id = 2;
  // Raw representation of a HybridTime.
  optional fixed64 last_full_compaction_time = 3;
  optional tablet.FullCompactionState full_compaction_state = 4;
}

message GetCompactionStatusResponsePB {
  optional MasterErrorPB error = 1;

  // Time when an admin compaction was last requested by the user.a
  // Raw representation of a HybridTime.
  optional fixed64 last_request_time = 2;

  // Time when the most recent full compaction was completed.
  // Raw representation of a HybridTime.
  optional fixed64 last_full_compaction_time = 3;

  // Overall full compaction state of the table.
  optional tablet.FullCompactionState full_compaction_state = 4;

  // Full compaction statuses of all tablet replicas.
  repeated TabletReplicaFullCompactionStatus replica_statuses = 5;
}

message IsInitDbDoneRequestPB {
}

message IsInitDbDoneResponsePB {
  optional MasterErrorPB error = 1;

  // Someone started running initdb, as indicated by the existence of template1.pg_proc.
  optional bool pg_proc_exists = 2;

  // This is true if the master ran initdb and it finished, successfully or not.
  optional bool done = 4;

  // If this is set to a non-empty string, initdb has failed.
  optional string initdb_error = 5;
}

message SplitTabletRequestPB {
  required bytes tablet_id = 1;
}

message SplitTabletResponsePB {
  optional MasterErrorPB error = 1;
}

message CreateTransactionStatusTableRequestPB {
  required string table_name = 1;
  optional ReplicationInfoPB replication_info = 2;
}

message CreateTransactionStatusTableResponsePB {
  optional MasterErrorPB error = 1;
}

message AddTransactionStatusTabletRequestPB {
  required bytes table_id = 1;
}

message AddTransactionStatusTabletResponsePB {
  optional MasterErrorPB error = 1;
}

message DeleteNotServingTabletRequestPB {
  required bytes tablet_id = 1;
}

message DeleteNotServingTabletResponsePB {
  optional MasterErrorPB error = 1;
}

message DisableTabletSplittingRequestPB {
  optional uint64 disable_duration_ms = 1;
  optional string feature_name = 2;
}

message DisableTabletSplittingResponsePB {
  optional MasterErrorPB error = 1;
}

message IsTabletSplittingCompleteRequestPB {
  optional bool wait_for_parent_deletion = 1;
}

message IsTabletSplittingCompleteResponsePB {
  optional MasterErrorPB error = 1;
  optional bool is_tablet_splitting_complete = 2;
}

message DdlLogRequestPB {
}

message DdlLogResponsePB {
  optional MasterErrorPB error = 1;
  repeated DdlLogEntryPB entries = 2;
}

message StartYsqlMajorCatalogUpgradeRequestPB {}

message StartYsqlMajorCatalogUpgradeResponsePB {
  optional MasterErrorPB error = 1;
}

message IsYsqlMajorCatalogUpgradeDoneRequestPB {}

message IsYsqlMajorCatalogUpgradeDoneResponsePB {
  optional MasterErrorPB error = 1;
  optional bool done = 2;
}

message FinalizeYsqlMajorCatalogUpgradeRequestPB {}

message FinalizeYsqlMajorCatalogUpgradeResponsePB {
  optional MasterErrorPB error = 1;
}

message RollbackYsqlMajorCatalogVersionRequestPB {}

message RollbackYsqlMajorCatalogVersionResponsePB {
  optional MasterErrorPB error = 1;
}

message CheckIfPitrActiveRequestPB {}

message CheckIfPitrActiveResponsePB {
  optional MasterErrorPB error = 1;
  optional bool is_pitr_active = 2;
}

message AccessYsqlBackendsManagerTestRegisterRequestPB {
  // Read mode: if value is unset, this mode is used.
  // Write mode: if value is set, it will be written to the register.
  optional int32 value = 1;
}

message AccessYsqlBackendsManagerTestRegisterResponsePB {
  optional MasterErrorPB error = 1;
  // Read mode: value is read from the register.
  // Write mode: value is read from the register before write.
  optional int32 value = 2; // required
}

message WaitForYsqlBackendsCatalogVersionRequestPB {
  optional uint32 database_oid = 1; // required
  optional uint64 catalog_version = 2; // required
  optional bytes requestor_ts_uuid = 3; // required
  optional int32 requestor_pg_backend_pid = 4; // required
}

message WaitForYsqlBackendsCatalogVersionResponsePB {
  optional MasterErrorPB error = 1;
  // Number of YSQL backends (across all tservers) that have not reached the requested catalog
  // version.  If the field is -1, the counting is in-progress.
  optional int32 num_lagging_backends = 2 [default = -1];
}

message AreNodesSafeToTakeDownRequestPB {
  // UUIDs of the tservers being taken down.
  repeated bytes tserver_uuids = 1;

  // UUIDs of the masters being taken down.
  repeated bytes master_uuids = 2;

  optional int64 follower_lag_bound_ms = 3;
}

message AreNodesSafeToTakeDownResponsePB {
  optional MasterErrorPB error = 1;
}

message GetMasterHeartbeatDelaysRequestPB { }

message GetMasterHeartbeatDelaysResponsePB {
  message MasterHeartbeatDelay {
    optional bytes master_uuid = 1;
    optional int64 last_heartbeat_delta_ms = 2;
  }

  optional MasterErrorPB error = 1;
  repeated MasterHeartbeatDelay heartbeat_delay = 2;
}

message DumpSysCatalogEntriesRequestPB {
  optional SysRowEntryType entry_type = 1;
  optional string entity_id_filter = 2;
}

message SysCatalogEntryDumpPB {
  optional SysRowEntryType entry_type = 1;
  optional string entity_id = 2;
  optional string pb_debug_string = 3;
}

message DumpSysCatalogEntriesResponsePB {
  optional MasterErrorPB error = 1;
  repeated SysCatalogEntryDumpPB entries = 2;
}

message WriteSysCatalogEntryRequestPB {
  optional SysRowEntryType entry_type = 1;
  optional string entity_id = 2;
  optional string pb_debug_string = 3;

  enum WriteOp {
    SYS_CATALOG_INSERT = 1;
    SYS_CATALOG_UPDATE = 2;
    SYS_CATALOG_DELETE = 3;
  }

  optional WriteOp op_type = 4;
}

message WriteSysCatalogEntryResponsePB {
  optional MasterErrorPB error = 1;
}

service MasterAdmin {
  option (yb.rpc.custom_service_name) = "yb.master.MasterService";

  rpc FlushTables(FlushTablesRequestPB) returns (FlushTablesResponsePB);
  rpc IsFlushTablesDone(IsFlushTablesDoneRequestPB) returns (IsFlushTablesDoneResponsePB);

  rpc FlushSysCatalog(FlushSysCatalogRequestPB) returns (FlushSysCatalogResponsePB);
  rpc CompactSysCatalog(CompactSysCatalogRequestPB) returns (CompactSysCatalogResponsePB);

  rpc GetCompactionStatus(GetCompactionStatusRequestPB) returns (GetCompactionStatusResponsePB);

  rpc IsInitDbDone(IsInitDbDoneRequestPB) returns (IsInitDbDoneResponsePB);

  rpc SplitTablet(SplitTabletRequestPB) returns (SplitTabletResponsePB);
  rpc CreateTransactionStatusTable(CreateTransactionStatusTableRequestPB)
      returns (CreateTransactionStatusTableResponsePB);
  rpc AddTransactionStatusTablet(AddTransactionStatusTabletRequestPB)
      returns (AddTransactionStatusTabletResponsePB);
  rpc DeleteNotServingTablet(DeleteNotServingTabletRequestPB)
      returns (DeleteNotServingTabletResponsePB);

  rpc DisableTabletSplitting(DisableTabletSplittingRequestPB)
      returns (DisableTabletSplittingResponsePB);
  rpc IsTabletSplittingComplete(IsTabletSplittingCompleteRequestPB)
      returns (IsTabletSplittingCompleteResponsePB);

  rpc AreNodesSafeToTakeDown(AreNodesSafeToTakeDownRequestPB)
      returns (AreNodesSafeToTakeDownResponsePB);
  rpc GetMasterHeartbeatDelays(GetMasterHeartbeatDelaysRequestPB)
      returns (GetMasterHeartbeatDelaysResponsePB);

  rpc DdlLog(DdlLogRequestPB) returns (DdlLogResponsePB);

  rpc StartYsqlMajorCatalogUpgrade(StartYsqlMajorCatalogUpgradeRequestPB)
      returns (StartYsqlMajorCatalogUpgradeResponsePB);
  rpc IsYsqlMajorCatalogUpgradeDone(IsYsqlMajorCatalogUpgradeDoneRequestPB)
      returns (IsYsqlMajorCatalogUpgradeDoneResponsePB);
  rpc FinalizeYsqlMajorCatalogUpgrade(FinalizeYsqlMajorCatalogUpgradeRequestPB)
      returns (FinalizeYsqlMajorCatalogUpgradeResponsePB);
  rpc RollbackYsqlMajorCatalogVersion(RollbackYsqlMajorCatalogVersionRequestPB)
      returns (RollbackYsqlMajorCatalogVersionResponsePB);

  rpc CheckIfPitrActive(CheckIfPitrActiveRequestPB)
      returns (CheckIfPitrActiveResponsePB);

  rpc AccessYsqlBackendsManagerTestRegister(AccessYsqlBackendsManagerTestRegisterRequestPB)
      returns (AccessYsqlBackendsManagerTestRegisterResponsePB);
  rpc WaitForYsqlBackendsCatalogVersion(WaitForYsqlBackendsCatalogVersionRequestPB)
      returns (WaitForYsqlBackendsCatalogVersionResponsePB);

  rpc DumpSysCatalogEntries(DumpSysCatalogEntriesRequestPB)
      returns (DumpSysCatalogEntriesResponsePB);
  rpc WriteSysCatalogEntry(WriteSysCatalogEntryRequestPB)
      returns (WriteSysCatalogEntryResponsePB);
}
