// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

syntax = "proto2";

package yb.master;

option java_package = "org.yb.master";

import "yb/common/wire_protocol.proto";
import "yb/master/catalog_entity_info.proto";
import "yb/master/master_types.proto";

message BackupRowEntryPB {
  optional SysRowEntry entry = 1;

  // Other per-object backup related properties.

  // Used to disambiguate in case YSQL tables in different schema have same name.
  optional bytes pg_schema_name = 2; // For 'entry.type' == TABLE only.
}

////////////////////////////////////////////////////////////
// RPCs
////////////////////////////////////////////////////////////

message CreateSnapshotRequestPB {
  repeated TableIdentifierPB tables = 1;

  // Can be removed once 2024.2 is out of support (usage removed in D37010).
  optional bool DEPRECATED_transaction_aware = 2 [default = true];

  // Automatically add table indexes into the snapshot.
  optional bool add_indexes = 3 [default = false];

  // Interpet this snapshot as imported:
  // Snapshot will be created as COMPLETE and no tablet operations will be performed.
  optional bool imported = 4;

  optional bytes schedule_id = 5; // Create snapshot to this schedule. Other fields are ignored.

  // Automatically add used User Defined Types into the snapshot.
  // This is for YCQL only. For YSQL it's no-op currently because
  // YSQL does not use SysUDTypeEntryPB records in the SysCatalog.
  optional bool add_ud_types = 6 [default = false];

  // Number of hours the snapshot needs to be kept around
  // before it is deleted. Set to -1 to retain indefinitely until
  // an explicit delete_snapshot.
  optional int32 retention_duration_hours = 7;
}

message CreateSnapshotResponsePB {
  optional MasterErrorPB error = 1;

  optional bytes snapshot_id = 2;
}

message SnapshotInfoPB {
  optional bytes id = 1;
  // Detailed snapshot entries.
  optional SysSnapshotEntryPB entry = 2;

  optional int64 format_version = 3 [ default = 1 ];

  // Stored extended info about snapshot (1) namespaces (2) tables (3) tablets
  // instead of 'SysRowEntry entry.entries'.
  repeated BackupRowEntryPB backup_entries = 4;
}

message TabletRestorationPB {
  optional bytes id = 1;
  optional SysSnapshotEntryPB.State state = 2;
}

message MasterRestorationMetadataPB {
  optional bytes id = 1;
  optional SysRowEntryType type = 2;
}

message SysRestorationEntryPB {
  optional SysSnapshotEntryPB.State state = 1 [ default = UNKNOWN ];
  repeated TabletRestorationPB tablet_restorations = 2;
  optional bytes snapshot_id = 8;
  optional bytes schedule_id = 4;
  optional bool is_sys_catalog_restored = 5;
  optional fixed64 restore_at_ht = 6;
  optional int64 version = 7;
  // Time when restoration finished. Computed on master after received response from the last
  // tablet.
  optional fixed64 complete_time_ht = 3;
  repeated MasterRestorationMetadataPB master_metadata = 9;
}

message RestorationInfoPB {
  optional bytes id = 1;
  // Detailed snapshot entries.
  optional SysRestorationEntryPB entry = 2;
}

message ListSnapshotsDetailOptionsPB {
  // Defaults are set to true to support backwards compatibility.
  optional bool show_namespace_details = 1 [default = true];
  optional bool show_udtype_details = 2 [default = true];
  optional bool show_table_details = 3 [default = true];
  optional bool show_tablet_details = 4 [default = true];
}

message ListSnapshotsRequestPB {
  optional bytes snapshot_id = 2;
  optional bool list_deleted_snapshots = 3;
  optional bool prepare_for_backup = 4;
  optional ListSnapshotsDetailOptionsPB detail_options = 5;
}

message ListSnapshotsResponsePB {
  optional MasterErrorPB error = 1;
  // Reserved for non-transactional snapshot deprecated field 'current_snapshot_id'.
  reserved 2;
  repeated SnapshotInfoPB snapshots = 3;
}

message RestoreSnapshotRequestPB {
  optional bytes snapshot_id = 2;
  optional fixed64 restore_ht = 3; // Absolute Timing Option: Max HybridTime, in Micros.
}

message RestoreSnapshotResponsePB {
  optional MasterErrorPB error = 1;
  optional bytes restoration_id = 2; // 16 bytes UUID
}

message DeleteSnapshotRequestPB {
  optional bytes snapshot_id = 2;
}

message DeleteSnapshotResponsePB {
  optional MasterErrorPB error = 1;
}

message AbortSnapshotRestoreRequestPB {
  optional bytes restoration_id = 1; // 16 bytes UUID
}

message AbortSnapshotRestoreResponsePB {
  optional MasterErrorPB error = 1;
}

message ListSnapshotRestorationsRequestPB {
  optional bytes snapshot_id = 1; // 16 bytes UUID
  optional bytes restoration_id = 2; // 16 bytes UUID
}

message ListSnapshotRestorationsResponsePB {
  optional AppStatusPB status = 1;

  repeated RestorationInfoPB restorations = 2;
}

// ID mapping pair: old ID (object ID on external cluster) TO new ID
// (same object ID on this cluster)
message IdPairPB {
  optional bytes old_id = 1;
  optional bytes new_id = 2;
}

message ImportSnapshotMetaRequestPB {
  optional SnapshotInfoPB snapshot = 1;
}

message ImportSnapshotMetaResponsePB {
  enum TableType {
    TABLE = 0;
    COLOCATED_TABLE = 1;
    PARENT_COLOCATED_TABLE = 2;
  }

  optional MasterErrorPB error = 1;

  // Per table IDs mapping (IDs on external cluster TO IDs on this cluster).
  message TableMetaPB {
    optional IdPairPB namespace_ids = 1;
    optional IdPairPB table_ids = 2;
    repeated IdPairPB tablets_ids = 3;
    optional TableType table_type = 4 [ default = TABLE ];
    repeated IdPairPB ud_types_ids = 5;
  }

  repeated TableMetaPB tables_meta = 3;
}

message TableIdentifiersPB {
  repeated TableIdentifierPB tables = 1;
}

message SnapshotScheduleFilterPB {
  oneof filter {
    TableIdentifiersPB tables = 1;
  }
}

message SnapshotScheduleOptionsPB {
  optional SnapshotScheduleFilterPB filter = 1;
  optional uint64 interval_sec = 2; // interval for taking snapshot in seconds.
  optional uint64 retention_duration_sec = 3; // how long store snapshots in seconds.
  optional fixed64 delete_time = 4; // hybrid time when this schedule was deleted.
  repeated fixed64 restoration_times = 5; // list of all restorations of this schedule.
}

message CreateSnapshotScheduleRequestPB {
  optional SnapshotScheduleOptionsPB options = 1;
}

message CreateSnapshotScheduleResponsePB {
  optional MasterErrorPB error = 1;

  optional bytes snapshot_schedule_id = 2;
}

message ListSnapshotSchedulesRequestPB {
  // When snapshot_schedule_id is not specified, all schedules are listed.
  optional bytes snapshot_schedule_id = 1;
}

message SnapshotScheduleInfoPB {
  optional bytes id = 1;
  optional SnapshotScheduleOptionsPB options = 2;
  repeated SnapshotInfoPB snapshots = 3;
}

message ListSnapshotSchedulesResponsePB {
  optional MasterErrorPB error = 1;

  repeated SnapshotScheduleInfoPB schedules = 2;
}

message DeleteSnapshotScheduleRequestPB {
  optional bytes snapshot_schedule_id = 1;
}

message DeleteSnapshotScheduleResponsePB {
  optional MasterErrorPB error = 1;
}

message EditSnapshotScheduleRequestPB {
  optional bytes snapshot_schedule_id = 1;
  optional uint64 interval_sec = 2;
  optional uint64 retention_duration_sec = 3;
}

message EditSnapshotScheduleResponsePB {
  optional MasterErrorPB error = 1;
  optional SnapshotScheduleInfoPB schedule = 2;
}

message RestoreSnapshotScheduleRequestPB {
  optional bytes snapshot_schedule_id = 1;
  optional fixed64 restore_ht = 2; // Absolute Timing Option: Max HybridTime, in Micros.
}

message RestoreSnapshotScheduleResponsePB {
  optional MasterErrorPB error = 1;
  optional bytes snapshot_id = 2;
  optional bytes restoration_id = 3; // 16 bytes UUID
}

message CloneNamespaceRequestPB {
  optional NamespaceIdentifierPB source_namespace = 1;
  optional fixed64 restore_ht = 2;
  optional string target_namespace_name = 3;
  optional string pg_source_owner = 4;
  optional string pg_target_owner = 5;
}

message CloneNamespaceResponsePB {
  optional MasterErrorPB error = 1;
  // If the call returned without error, then these are the fields to pass to ListClones.
  optional string source_namespace_id = 2;
  optional uint32 seq_no = 3;
}

message ListClonesRequestPB {
  optional string source_namespace_id = 1;
  optional uint32 seq_no = 2;
}

message ListClonesResponsePB {
  optional MasterErrorPB error = 1;
  repeated SysCloneStatePB entries = 2;
}

service MasterBackup {
  // Client->Master RPCs
  rpc CreateSnapshot(CreateSnapshotRequestPB) returns (CreateSnapshotResponsePB);
  rpc ListSnapshots(ListSnapshotsRequestPB) returns (ListSnapshotsResponsePB);
  rpc ListSnapshotRestorations(ListSnapshotRestorationsRequestPB)
      returns (ListSnapshotRestorationsResponsePB);
  rpc RestoreSnapshot(RestoreSnapshotRequestPB) returns (RestoreSnapshotResponsePB);
  rpc DeleteSnapshot(DeleteSnapshotRequestPB) returns (DeleteSnapshotResponsePB);
  rpc AbortSnapshotRestore(AbortSnapshotRestoreRequestPB) returns (AbortSnapshotRestoreResponsePB);
  rpc ImportSnapshotMeta(ImportSnapshotMetaRequestPB) returns (ImportSnapshotMetaResponsePB);
  rpc CreateSnapshotSchedule(CreateSnapshotScheduleRequestPB)
      returns (CreateSnapshotScheduleResponsePB);
  rpc ListSnapshotSchedules(ListSnapshotSchedulesRequestPB)
      returns (ListSnapshotSchedulesResponsePB);
  rpc DeleteSnapshotSchedule(DeleteSnapshotScheduleRequestPB)
      returns (DeleteSnapshotScheduleResponsePB);
  rpc EditSnapshotSchedule(EditSnapshotScheduleRequestPB) returns (EditSnapshotScheduleResponsePB);
  rpc RestoreSnapshotSchedule(RestoreSnapshotScheduleRequestPB)
      returns (RestoreSnapshotScheduleResponsePB);
  rpc CloneNamespace(CloneNamespaceRequestPB)
      returns (CloneNamespaceResponsePB);
  rpc ListClones(ListClonesRequestPB) returns (ListClonesResponsePB);
}
