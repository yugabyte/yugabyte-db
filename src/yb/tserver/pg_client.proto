// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

syntax = "proto3";

package yb.tserver;

option java_package = "org.yb.tserver";

import "yb/common/common.proto";
import "yb/common/common_net.proto";
import "yb/common/pgsql_protocol.proto";
import "yb/common/transaction.proto";
import "yb/common/value.proto";
import "yb/common/wire_protocol.proto";
import "yb/master/catalog_entity_info.proto";
import "yb/master/master_ddl.proto";
import "yb/master/master_types.proto";
import "yb/rpc/lightweight_message.proto";
import "yb/tablet/tablet.proto";

service PgClientService {
  rpc Heartbeat(PgHeartbeatRequestPB) returns (PgHeartbeatResponsePB);

  rpc AlterDatabase(PgAlterDatabaseRequestPB) returns (PgAlterDatabaseResponsePB);
  rpc AlterTable(PgAlterTableRequestPB) returns (PgAlterTableResponsePB);
  rpc BackfillIndex(PgBackfillIndexRequestPB) returns (PgBackfillIndexResponsePB);
  rpc CreateDatabase(PgCreateDatabaseRequestPB) returns (PgCreateDatabaseResponsePB);
  rpc CreateReplicationSlot(PgCreateReplicationSlotRequestPB)
      returns (PgCreateReplicationSlotResponsePB);
  rpc CreateSequencesDataTable(PgCreateSequencesDataTableRequestPB)
      returns (PgCreateSequencesDataTableResponsePB);
  rpc CreateTable(PgCreateTableRequestPB) returns (PgCreateTableResponsePB);
  rpc CreateTablegroup(PgCreateTablegroupRequestPB) returns (PgCreateTablegroupResponsePB);
  rpc DropDatabase(PgDropDatabaseRequestPB) returns (PgDropDatabaseResponsePB);
  rpc DropReplicationSlot(PgDropReplicationSlotRequestPB) returns (PgDropReplicationSlotResponsePB);
  rpc DropTable(PgDropTableRequestPB) returns (PgDropTableResponsePB);
  rpc DropTablegroup(PgDropTablegroupRequestPB) returns (PgDropTablegroupResponsePB);
  rpc FinishTransaction(PgFinishTransactionRequestPB) returns (PgFinishTransactionResponsePB);
  rpc GetCatalogMasterVersion(PgGetCatalogMasterVersionRequestPB)
      returns (PgGetCatalogMasterVersionResponsePB);
  rpc GetDatabaseInfo(PgGetDatabaseInfoRequestPB) returns (PgGetDatabaseInfoResponsePB);
  rpc GetLockStatus(PgGetLockStatusRequestPB) returns (PgGetLockStatusResponsePB);
  rpc GetReplicationSlot(PgGetReplicationSlotRequestPB) returns (PgGetReplicationSlotResponsePB);
  rpc IsInitDbDone(PgIsInitDbDoneRequestPB) returns (PgIsInitDbDoneResponsePB);
  rpc ListLiveTabletServers(PgListLiveTabletServersRequestPB)
      returns (PgListLiveTabletServersResponsePB);
  rpc ListReplicationSlots(PgListReplicationSlotsRequestPB)
      returns (PgListReplicationSlotsResponsePB);
  rpc GetIndexBackfillProgress(PgGetIndexBackfillProgressRequestPB)
      returns (PgGetIndexBackfillProgressResponsePB);
  rpc OpenTable(PgOpenTableRequestPB) returns (PgOpenTableResponsePB);
  rpc GetTablePartitionList(PgGetTablePartitionListRequestPB)
      returns (PgGetTablePartitionListResponsePB);
  rpc Perform(PgPerformRequestPB) returns (PgPerformResponsePB) {
    option (yb.rpc.lightweight_method).sides = PROXY;
  };
  rpc ReserveOids(PgReserveOidsRequestPB) returns (PgReserveOidsResponsePB);
  rpc RollbackToSubTransaction(PgRollbackToSubTransactionRequestPB)
      returns (PgRollbackToSubTransactionResponsePB);

  rpc TabletServerCount(PgTabletServerCountRequestPB) returns (PgTabletServerCountResponsePB);
  rpc TruncateTable(PgTruncateTableRequestPB) returns (PgTruncateTableResponsePB);
  rpc ValidatePlacement(PgValidatePlacementRequestPB)
      returns (PgValidatePlacementResponsePB);
  rpc GetTableDiskSize(PgGetTableDiskSizeRequestPB)
      returns (PgGetTableDiskSizeResponsePB);
  rpc WaitForBackendsCatalogVersion(PgWaitForBackendsCatalogVersionRequestPB)
      returns (PgWaitForBackendsCatalogVersionResponsePB);

  rpc InsertSequenceTuple(PgInsertSequenceTupleRequestPB) returns (PgInsertSequenceTupleResponsePB);
  rpc UpdateSequenceTuple(PgUpdateSequenceTupleRequestPB) returns (PgUpdateSequenceTupleResponsePB);
  rpc FetchSequenceTuple(PgFetchSequenceTupleRequestPB) returns (PgFetchSequenceTupleResponsePB);
  rpc ReadSequenceTuple(PgReadSequenceTupleRequestPB) returns (PgReadSequenceTupleResponsePB);
  rpc DeleteSequenceTuple(PgDeleteSequenceTupleRequestPB) returns (PgDeleteSequenceTupleResponsePB);
  rpc DeleteDBSequences(PgDeleteDBSequencesRequestPB) returns (PgDeleteDBSequencesResponsePB);
  rpc CheckIfPitrActive(PgCheckIfPitrActiveRequestPB) returns (PgCheckIfPitrActiveResponsePB);
  rpc IsObjectPartOfXRepl(PgIsObjectPartOfXReplRequestPB)
      returns (PgIsObjectPartOfXReplResponsePB);
  rpc GetTserverCatalogVersionInfo(PgGetTserverCatalogVersionInfoRequestPB)
      returns (PgGetTserverCatalogVersionInfoResponsePB);
  rpc CancelTransaction(PgCancelTransactionRequestPB) returns (PgCancelTransactionResponsePB);
  rpc ActiveSessionHistory(PgActiveSessionHistoryRequestPB)
      returns (PgActiveSessionHistoryResponsePB);
  rpc GetActiveTransactionList(PgGetActiveTransactionListRequestPB)
      returns (PgGetActiveTransactionListResponsePB);

  rpc GetTableKeyRanges(PgGetTableKeyRangesRequestPB) returns (PgGetTableKeyRangesResponsePB);

  rpc GetNewObjectId(PgGetNewObjectIdRequestPB)
      returns (PgGetNewObjectIdResponsePB);

  rpc TabletsMetadata(PgTabletsMetadataRequestPB) returns (PgTabletsMetadataResponsePB);

  rpc ServersMetrics(PgServersMetricsRequestPB) returns (PgServersMetricsResponsePB);

  rpc ListClones(PgListClonesRequestPB) returns (PgListClonesResponsePB);

  // DEPRECATED: GetReplicationSlot RPC is a superset of this GetReplicationSlotStatus.
  // So GetReplicationSlot should be used everywhere.
  rpc GetReplicationSlotStatus(PgGetReplicationSlotStatusRequestPB)
      returns (PgGetReplicationSlotStatusResponsePB);
  // DEPRECATED
  rpc SetActiveSubTransaction(PgSetActiveSubTransactionRequestPB)
      returns (PgSetActiveSubTransactionResponsePB);

  rpc FetchData(PgFetchDataRequestPB) returns (PgFetchDataResponsePB) {
    option (yb.rpc.lightweight_method).sides = PROXY;
  };

  rpc YCQLStatementStats(PgYCQLStatementStatsRequestPB)
      returns (PgYCQLStatementStatsResponsePB);

  rpc CronSetLastMinute(PgCronSetLastMinuteRequestPB)
      returns (PgCronSetLastMinuteResponsePB);

  rpc CronGetLastMinute(PgCronGetLastMinuteRequestPB)
  returns (PgCronGetLastMinuteResponsePB);

  rpc AcquireAdvisoryLock(PgAcquireAdvisoryLockRequestPB)
      returns (PgAcquireAdvisoryLockResponsePB);
  rpc ReleaseAdvisoryLock(PgReleaseAdvisoryLockRequestPB)
      returns (PgReleaseAdvisoryLockResponsePB);

  rpc ExportTxnSnapshot(PgExportTxnSnapshotRequestPB)
      returns (PgExportTxnSnapshotResponsePB);

  rpc ImportTxnSnapshot(PgImportTxnSnapshotRequestPB)
      returns (PgImportTxnSnapshotResponsePB);
}

// TODO: Remove the OptionalUint32PB helper message after updating protobuf generator to allow
// 'optional' in proto3
message OptionalFixed64PB {
  fixed64 value = 1;
}

message OptionalUint32PB {
  uint32 value = 1;
}

message OptionalUint64PB {
  uint64 value = 1;
}

message PgHeartbeatRequestPB {
  uint64 session_id = 1;
  uint32 pid = 2;
}

message PgHeartbeatResponsePB {
  AppStatusPB status = 1;
  uint64 session_id = 2;
  bytes instance_id = 3;
}

message PgObjectIdPB {
  uint32 database_oid = 1;
  uint32 object_oid = 2;
}

message PgAlterDatabaseRequestPB {
  uint64 session_id = 1;
  string database_name = 2;
  uint32 database_oid = 3;
  string new_name = 4;
  AshMetadataPB ash_metadata = 5;
}

message PgAlterDatabaseResponsePB {
  AppStatusPB status = 1;
}

message PgBackfillIndexRequestPB {
  uint64 session_id = 1;
  PgObjectIdPB table_id = 2;
  AshMetadataPB ash_metadata = 3;
}

message PgBackfillIndexResponsePB {
  AppStatusPB status = 1;
}

message PgRenameColumnPB {
  string old_name = 1;
  string new_name = 2;
}

message PgRenameTablePB {
  string database_name = 1;
  string table_name = 2;
  string schema_name = 3;
}

// Available replica identity modes for use in CDC
enum PgReplicaIdentityType {
  // Entire updated row as new image, only key as old image for DELETE
  // The name DEFAULT is taken from PG, however it is not the default replica identity mode
  DEFAULT = 0;

  // Both old and new images of the entire row
  FULL = 1;

  // No old image for any operation
  NOTHING = 2;

  // YB specific options

  // Only the changed columns as new image, no old image except DELETE
  // This is the default replica identity mode in YSQL
  CHANGE = 3;
}

message PgReplicaIdentityPB {
  PgReplicaIdentityType replica_identity = 1;
}

message PgAlterTableRequestPB {
  uint64 session_id = 1;
  bool use_transaction = 2;
  PgObjectIdPB table_id = 3;
  repeated PgCreateColumnPB add_columns = 4;
  repeated PgRenameColumnPB rename_columns = 5;
  repeated string drop_columns = 6;
  PgRenameTablePB rename_table = 7;
  bool increment_schema_version = 8;
  PgReplicaIdentityPB replica_identity = 9;
  AshMetadataPB ash_metadata = 10;
}

message PgAlterTableResponsePB {
  AppStatusPB status = 1;
}

message PgCreateDatabaseRequestPB {
  uint64 session_id = 1;
  bool use_transaction = 2;
  string database_name = 3;
  uint32 database_oid = 4;
  uint32 source_database_oid = 5;
  uint32 next_oid = 6;
  bool colocated = 7;
  fixed64 clone_time = 8;
  string source_database_name = 9;
  string source_owner = 10;
  string target_owner = 11;
  AshMetadataPB ash_metadata = 12;
}

message PgCreateDatabaseResponsePB {
  AppStatusPB status = 1;
}

message PgCreateSequencesDataTableRequestPB {
}

// proto2 version of the CDCSDKSnapshotOption enum from yb/common/common_types.proto
enum PgReplicationSlotSnapshotActionPB {
  // Invalid, should not be used. This is only present here to keep the same enum tags between the
  // proto2 (this) and the proto3 versions.
  REPLICATION_SLOT_UNKNOWN_SNAPSHOT = 0;
  // Client does not wish to consume snapshot.
  REPLICATION_SLOT_NOEXPORT_SNAPSHOT = 1;
  // Client wishes to consume snapshot from the source universe.
  REPLICATION_SLOT_USE_SNAPSHOT = 2;
}

// proto2 version of the ReplicationSlotLsnType enum from yb/common/common_types.proto
enum PGReplicationSlotLsnType {
  ReplicationSlotLsnTypePg_UNDEFINED = 0;
  ReplicationSlotLsnTypePg_SEQUENCE = 1;
  ReplicationSlotLsnTypePg_HYBRID_TIME = 2;
}

message PgCreateReplicationSlotRequestPB {
  uint64 session_id = 1;
  uint32 database_oid = 2;
  string replication_slot_name = 3;
  PgReplicationSlotSnapshotActionPB snapshot_action = 4;
  string output_plugin_name = 5;
  AshMetadataPB ash_metadata = 6;
  PGReplicationSlotLsnType lsn_type = 7;
}

message PgCreateReplicationSlotResponsePB {
  AppStatusPB status = 1;
  bytes stream_id = 2;
  uint64 cdcsdk_consistent_snapshot_time = 3;
}

message PgCreateSequencesDataTableResponsePB {
  AppStatusPB status = 1;
}

message PgCreateColumnPB {
  string attr_name = 1;
  int32 attr_num = 2;
  int32 attr_ybtype = 3;
  bool is_hash = 4;
  bool is_range = 5;
  int32 sorting_type = 6;
  int32 attr_pgoid = 7;
  QLValuePB attr_missing_val = 8;
}

message PgCreateSplitBoundaryPB {
  repeated QLValuePB values = 1;
}

message PgCreateTableRequestPB {
  uint64 session_id = 1;

  bool use_transaction = 2;
  PgObjectIdPB table_id = 3;
  string database_name = 4;
  string table_name = 5;
  int32 num_tablets = 6;
  bool is_pg_catalog_table = 7;
  bool is_shared_table = 8;
  bool if_not_exist = 9;

  bool is_colocated_via_database = 10;
  PgObjectIdPB tablegroup_oid = 11;
  // Auto-generated by catalog manager if not specified.
  // Only makes sense for colocated tables.
  // Note: proto3 v3.15 includes an "optional" keyword as a syntactic sugar for this oneof wrapper.
  oneof optional_colocation_id {
    uint32 colocation_id = 20;
  }

  PgObjectIdPB tablespace_oid = 12;
  repeated PgCreateColumnPB create_columns = 13;
  repeated PgCreateSplitBoundaryPB split_bounds = 14;

  // Actual for index only.
  PgObjectIdPB base_table_id = 15;
  bool is_unique_index = 16;
  bool skip_index_backfill = 17;

  bool is_matview = 21;
  // Used during a table rewrite operation to explicitly store the PG table oid.
  PgObjectIdPB pg_table_oid = 18;
  string schema_name = 19;
  // Used during a table rewrite operation to store the relfilenode OID that maps to the old
  // DocDB table.
  PgObjectIdPB old_relfilenode_oid = 22;
  // Set to true when the table is being re-written as part of a TRUNCATE operation.
  bool is_truncate = 23;

  PgVectorIdxOptionsPB vector_idx_options = 24;

  AshMetadataPB ash_metadata = 25;
}

message PgCreateTableResponsePB {
  AppStatusPB status = 1;
}

message PgCreateTablegroupRequestPB {
  uint64 session_id = 1;

  string database_name = 2;

  PgObjectIdPB tablegroup_id = 3;
  PgObjectIdPB tablespace_id = 4;

  AshMetadataPB ash_metadata = 5;
}

message PgCreateTablegroupResponsePB {
  AppStatusPB status = 1;
}

message PgDropDatabaseRequestPB {
  uint64 session_id = 1;
  string database_name = 3;
  uint32 database_oid = 4;
  AshMetadataPB ash_metadata = 5;
}

message PgDropDatabaseResponsePB {
  AppStatusPB status = 1;
}

message PgDropReplicationSlotRequestPB {
  uint64 session_id = 1;
  string replication_slot_name = 2;
  AshMetadataPB ash_metadata = 3;
}

message PgDropReplicationSlotResponsePB {
  AppStatusPB status = 1;
}

message PgDropTableRequestPB {
  uint64 session_id = 1;
  PgObjectIdPB table_id = 2;
  bool index = 3;
  AshMetadataPB ash_metadata = 4;
}

message PgDropTableResponsePB {
  AppStatusPB status = 1;
  master.TableIdentifierPB indexed_table = 2;
}

message PgDropTablegroupRequestPB {
  uint64 session_id = 1;
  PgObjectIdPB tablegroup_id = 2;
  AshMetadataPB ash_metadata = 3;
}

message PgDropTablegroupResponsePB {
  AppStatusPB status = 1;
}

message PgGetCatalogMasterVersionRequestPB {
}

message PgFinishTransactionRequestPB {
  message DdlModePB {
    // This transaction contains changes to the DocDB schema protobufs.
    bool has_docdb_schema_changes = 1;
    OptionalUint32PB silently_altered_db = 2;
  }

  uint64 session_id = 1;
  bool commit = 2;
  DdlModePB ddl_mode = 3;

  AshMetadataPB ash_metadata = 4;
}

message PgFinishTransactionResponsePB {
  AppStatusPB status = 1;
}

message PgGetCatalogMasterVersionResponsePB {
  AppStatusPB status = 1;
  uint64 version = 2;
}

message PgGetDatabaseInfoRequestPB {
  uint32 oid = 1;
}

message PgGetDatabaseInfoResponsePB {
  AppStatusPB status = 1;

  master.GetNamespaceInfoResponsePB info = 2;
}

message PgIsInitDbDoneRequestPB {
}

message PgIsInitDbDoneResponsePB {
  AppStatusPB status = 1;
  bool done = 2;
}

message PgGetLockStatusRequestPB {
  // The table to scan. If unset, scan all tables
  bytes table_id = 1;

  // If set, only read the locks associated with this txn_id and ignore the fields
  // min_txn_age_ms and max_num_txns.
  bytes transaction_id = 2;

  // Return lock statuses of transactions with age >= 'min_txn_age_ms'
  uint32 min_txn_age_ms = 3;

  // Limit number of old transactions whose lock info is retrieved.
  uint32 max_num_txns = 4;

  // Limit number of locks returned per transaction at each tablet
  uint32 max_txn_locks_per_tablet = 5;

  AshMetadataPB ash_metadata = 6;
}

message PgGetLockStatusResponsePB {
  AppStatusPB status = 1;

  message NodeLockStatusResponsePB {
    bytes permanent_uuid = 1;

    repeated TabletLockInfoPB tablet_lock_infos = 2;
  }

  repeated NodeLockStatusResponsePB node_locks = 2;

  message TransactionList {
    repeated bytes transaction_ids = 1;
  }

  // Map of transactions keyed by the host node uuid.
  map<string, TransactionList> transactions_by_node = 3;
}

message PgGetReplicationSlotRequestPB {
  string replication_slot_name = 1;

  /* TODO(#20368): Introduce ability to acquire the slot. */

  AshMetadataPB ash_metadata = 2;
}

message PgGetReplicationSlotResponsePB {
  AppStatusPB status = 1;
  PgReplicationSlotInfoPB replication_slot_info = 2;
}

enum ReplicationSlotStatus {
  ACTIVE = 0;
  INACTIVE = 1;
}

message PgGetReplicationSlotStatusRequestPB {
  string replication_slot_name = 1;
}

message PgGetReplicationSlotStatusResponsePB {
  AppStatusPB status = 1;

  ReplicationSlotStatus replication_slot_status = 2;
}

message PgListLiveTabletServersRequestPB {
  bool primary_only = 1;
  AshMetadataPB ash_metadata = 2;
}

message PgLiveTabletServerPB {
  string uuid = 1;
  string hostname = 2;
  string placement_uuid = 3;
  string cloud = 4;
  string region = 5;
  string zone = 6;
  bool is_primary = 7;
  string public_ip = 8;
  uint32 pg_port = 9;
}

message PgGetIndexBackfillProgressRequestPB {
  repeated PgObjectIdPB index_ids = 1;
  AshMetadataPB ash_metadata = 2;
}

message PgGetIndexBackfillProgressResponsePB {
  AppStatusPB status = 1;
  // The ordering of the indexes' results here is expected to be the same as the ordering in the
  // corresponding request PB (PgGetIndexBackfillProgressRequestPB).
  repeated uint64 rows_processed_entries = 2;
}

message PgListLiveTabletServersResponsePB {
  AppStatusPB status = 1;
  repeated PgLiveTabletServerPB servers = 2;
}

message PgListReplicationSlotsRequestPB {
  AshMetadataPB ash_metadata = 1;
}

message PgReplicationSlotInfoPB {
  string slot_name = 1;
  bytes stream_id = 2;
  uint32 database_oid = 3;
  ReplicationSlotStatus replication_slot_status = 4;
  uint64 confirmed_flush_lsn = 5;
  uint64 restart_lsn = 6;
  uint32 xmin = 7;
  // This map stores the replica identity for each table in the stream at the time of stream
  // creation. The key for this map is table_oid and the value is replica identity for that table.
  map<uint32, PgReplicaIdentityPB> replica_identity_map = 8;
  uint64 record_id_commit_time_ht = 9;
  uint64 last_pub_refresh_time = 10;
  string output_plugin_name = 11;
  PGReplicationSlotLsnType yb_lsn_type = 12;
}

message PgListReplicationSlotsResponsePB {
  AppStatusPB status = 1;
  repeated PgReplicationSlotInfoPB replication_slots = 2;
}

message PgOpenTableRequestPB {
  string table_id = 1;
  bool reopen = 2;
  fixed64 invalidate_cache_time_us = 3;
  // Allows a hidden table to be opened.
  // Hidden table is a dropped table retained in DocDB for PITR, CLONE, AS-OF.
  bool include_hidden = 4;
  AshMetadataPB ash_metadata = 5;
}

message PgTablePartitionsPB {
  uint32 version = 1;
  repeated bytes keys = 2;
}

message PgOpenTableResponsePB {
  AppStatusPB status = 1;

  master.GetTableSchemaResponsePB info = 2;
  PgTablePartitionsPB partitions = 3;
}

message PgGetTablePartitionListRequestPB {
  string table_id = 1;
  AshMetadataPB ash_metadata = 2;
}

message PgGetTablePartitionListResponsePB {
  AppStatusPB status = 1;
  PgTablePartitionsPB partitions = 2;
}

message PgPerformOpPB {
  oneof op {
    PgsqlWriteRequestPB write = 1;
    PgsqlReadRequestPB read = 2;
  }
  bool read_from_followers = 3;
}

enum ReadTimeManipulation {
  NONE = 0;
  RESTART = 1;
  ENSURE_READ_TIME_IS_SET = 2;
}

message PgPerformOptionsPB {
  message CachingInfoPB {
    uint32 key_group = 1;
    bytes key_value = 2;
    OptionalUint32PB lifetime_threshold_ms = 3;
  }

  // Cannot use IsolationLevel enum, since we cannot use proto2 enum in proto3 messages.
  // Replace with IsolationLevel after migration to proto3.
  uint32 isolation = 2;
  bool ddl_mode = 3;
  uint64 txn_serial_no = 4;
  uint64 read_time_serial_no = 20;

  // See ReadHybridTimePB for information about in_txn_limit_ht.
  OptionalFixed64PB in_txn_limit_ht = 5;
  bool use_existing_priority = 6;
  fixed64 priority = 7;
  bool restart_transaction = 8;
  bool defer_read_point = 9;
  ReadTimeManipulation read_time_manipulation = 10;
  ReadHybridTimePB read_time = 11;
  bool use_catalog_session = 12;
  bool force_global_transaction = 13;
  string namespace_id = 14;
  bool use_xcluster_database_consistency = 15;
  uint32 active_sub_transaction_id = 16;
  CachingInfoPB caching_info = 17;
  bool read_from_followers = 18;
  bool trace_requested = 19;
  bool yb_non_ddl_txn_for_sys_tables_allowed = 21;
  int64 pg_txn_start_us = 22;

  AshMetadataPB ash_metadata = 23;

  // When set,
  // - Sets the read time locally.
  // - Clamps the read uncertainty window.
  // See the commit desc for more info.
  bool clamp_uncertainty_window = 24;
}

message PgPerformRequestPB {
  uint64 session_id = 1;
  PgPerformOptionsPB options = 2;
  repeated PgPerformOpPB ops = 3;
  fixed64 write_time = 4;
}

message PgPerformResponsePB {
  AppStatusPB status = 1;
  repeated PgsqlResponsePB responses = 2;
  ReadHybridTimePB catalog_read_time = 3;
  fixed64 used_in_txn_limit_ht = 4;
}

message PgReserveOidsRequestPB {
  uint32 database_oid = 1;
  uint32 next_oid = 2;
  uint32 count = 3;
  AshMetadataPB ash_metadata = 4;
}

message PgReserveOidsResponsePB {
  AppStatusPB status = 1;

  uint32 begin_oid = 2;
  uint32 end_oid = 3;
}

message PgRollbackToSubTransactionRequestPB {
  uint64 session_id = 1;
  uint32 sub_transaction_id = 2;
  PgPerformOptionsPB options = 3;
  AshMetadataPB ash_metadata = 4;
}

message PgRollbackToSubTransactionResponsePB {
  AppStatusPB status = 1;
}

// DEPRECATED
message PgSetActiveSubTransactionRequestPB {
  uint64 session_id = 1;
  uint32 sub_transaction_id = 2;
  // Used to create transaction when we did not have one yet.
  PgPerformOptionsPB options = 3;
}

// DEPRECATED
message PgSetActiveSubTransactionResponsePB {
  AppStatusPB status = 1;
}

message PgTabletServerCountRequestPB {
  bool primary_only = 1;
  AshMetadataPB ash_metadata = 2;
}

message PgTabletServerCountResponsePB {
  AppStatusPB status = 1;
  int32 count = 2;
}

message PgTruncateTableRequestPB {
  uint64 session_id = 1;
  PgObjectIdPB table_id = 2;
  AshMetadataPB ash_metadata = 3;
}

message PgTruncateTableResponsePB {
  AppStatusPB status = 1;
}

message PgPlacementInfoPB {
  option deprecated = true;
  string cloud = 1;
  string region = 2;
  string zone = 3;
  int32 min_num_replicas = 4;
  int32 leader_preference = 5;
}

message PgValidatePlacementRequestPB {
  uint64 session_id = 1;
  int32 num_replicas = 2; /* deprecated, use replication_info */
  repeated PgPlacementInfoPB placement_infos = 3; /* deprecated, use replication_info */
  AshMetadataPB ash_metadata = 4;
  ReplicationInfoPB replication_info = 5;
}

message PgValidatePlacementResponsePB {
  AppStatusPB status = 1;
}

message PgInsertSequenceTupleRequestPB {
  uint64 session_id = 1;
  int64 db_oid = 2;
  int64 seq_oid = 3;
  uint64 ysql_catalog_version = 4;
  uint64 ysql_db_catalog_version = 7;
  int64 last_val = 5;
  bool is_called = 6;
  AshMetadataPB ash_metadata = 8;
}

message PgInsertSequenceTupleResponsePB {
  AppStatusPB status = 1;
}

message PgUpdateSequenceTupleRequestPB {
  uint64 session_id = 1;
  int64 db_oid = 2;
  int64 seq_oid = 3;
  uint64 ysql_catalog_version = 4;
  uint64 ysql_db_catalog_version = 10;
  int64 last_val = 5;
  bool is_called = 6;
  bool has_expected = 7;
  int64 expected_last_val = 8;
  bool expected_is_called = 9;
  AshMetadataPB ash_metadata = 11;
}

message PgUpdateSequenceTupleResponsePB {
  AppStatusPB status = 1;
  bool skipped = 2;
}

message PgFetchSequenceTupleRequestPB {
  uint64 session_id = 1;
  int64 db_oid = 2;
  int64 seq_oid = 3;
  uint64 ysql_catalog_version = 4;
  uint64 ysql_db_catalog_version = 10;
  // The number of values to fetch. If the cache method is connection, this quantity
  // of values will be returned to the connection. If the cache method is server,
  // this quantity will be retrieved from the master server when it is exhausted, and
  // only one value will be returned to the connection.
  uint32 fetch_count = 5;
  int64 inc_by = 6;
  int64 min_value = 7;
  int64 max_value = 8;
  bool cycle = 9;
  AshMetadataPB ash_metadata = 11;
}

message PgFetchSequenceTupleResponsePB {
  AppStatusPB status = 1;
  int64 first_value = 2;
  int64 last_value = 3;
}

message PgReadSequenceTupleRequestPB {
  uint64 session_id = 1;
  int64 db_oid = 2;
  int64 seq_oid = 3;
  uint64 ysql_catalog_version = 4;
  uint64 ysql_db_catalog_version = 5;
  uint64 read_time = 6;
  AshMetadataPB ash_metadata = 7;
}

message PgReadSequenceTupleResponsePB {
  AppStatusPB status = 1;
  int64 last_val = 2;
  bool is_called = 3;
}

message PgDeleteSequenceTupleRequestPB {
  uint64 session_id = 1;
  int64 db_oid = 2;
  int64 seq_oid = 3;
  AshMetadataPB ash_metadata = 4;
}

message PgDeleteSequenceTupleResponsePB {
  AppStatusPB status = 1;
}

message PgDeleteDBSequencesRequestPB {
  uint64 session_id = 1;
  int64 db_oid = 2;
  AshMetadataPB ash_metadata = 3;
}

message PgDeleteDBSequencesResponsePB {
  AppStatusPB status = 1;
}

message PgGetTableDiskSizeRequestPB {
  PgObjectIdPB table_id = 1;
  AshMetadataPB ash_metadata = 2;
}

message PgGetTableDiskSizeResponsePB {
  AppStatusPB status = 1;

  // size is 0 for colocated tables
  int64 size = 2;
  int32 num_missing_tablets = 3;
}

message PgCheckIfPitrActiveRequestPB {
  AshMetadataPB ash_metadata = 1;
}

message PgCheckIfPitrActiveResponsePB {
  bool is_pitr_active = 1;
  AppStatusPB status = 2;
}

message PgIsObjectPartOfXReplRequestPB {
  PgObjectIdPB table_id = 2;
  AshMetadataPB ash_metadata = 3;
}

message PgIsObjectPartOfXReplResponsePB {
  AppStatusPB status = 1;
  bool is_object_part_of_xrepl = 2;
}

message PgGetTserverCatalogVersionInfoRequestPB {
  // True if we only want to return the size of the catalog version map from tserver.
  bool size_only = 1;
  // If > 0, we ask for the catalog version of the given database from the tserver.
  // If == 0, we ask for the catalog version map of all databases from the tserver.
  uint32 db_oid = 2;
  AshMetadataPB ash_metadata = 3;
}

message PgGetTserverCatalogVersionInfoResponsePB {
  AppStatusPB status = 1;
  repeated TServerDBCatalogVersionInfo entries = 2;
  uint32 num_entries = 3;
}

message PgWaitForBackendsCatalogVersionRequestPB {
  uint64 session_id = 1;
  uint32 database_oid = 2;
  uint64 catalog_version = 3;
  int32 requestor_pg_backend_pid = 5;
  AshMetadataPB ash_metadata = 4;
}

message PgWaitForBackendsCatalogVersionResponsePB {
  AppStatusPB status = 1;
  // Number of YSQL backends (across all tservers) that have not reached the requested catalog
  // version.  If the field is -1, the counting is in-progress.
  int32 num_lagging_backends = 2;
}

message PgCancelTransactionRequestPB {
  bytes transaction_id = 1;

  // Populating the field is optional. When populated, the cancel request is sent to the specified
  // status tablet alone. If not, the request is forwarded to all tablet servers and is thereafter
  // broadcast to all status tablets hosted by the tablet server.
  bytes status_tablet_id = 2;
  AshMetadataPB ash_metadata = 3;
}

message PgCancelTransactionResponsePB {
  AppStatusPB status = 1;
}

message PgActiveSessionHistoryRequestPB {
  uint32 sample_size = 7;
  bool fetch_tserver_states = 1;
  bool fetch_flush_and_compaction_states = 2;
  bool fetch_cql_states = 3;
  bool ignore_ash_and_perform_calls = 4;
  bool fetch_raft_log_appender_states = 5;
  bool export_wait_state_code_as_string = 6;
}

message WaitStatesPB {
  repeated WaitStateInfoPB wait_states = 1;
  uint32 component = 2;
  float sample_weight = 3;
}

message PgActiveSessionHistoryResponsePB {
  AppStatusPB status = 1;
  WaitStatesPB tserver_wait_states = 2;
  // flush_and_compaction_wait_states and raft_log_appender_wait_states
  // are included in tserver_wait_states
  WaitStatesPB DEPRECATED_flush_and_compaction_wait_states = 3;
  WaitStatesPB DEPRECATED_raft_log_appender_wait_states = 4;
  WaitStatesPB cql_wait_states = 5;
}

message PgGetActiveTransactionListRequestPB {
  OptionalUint64PB session_id = 1;
  AshMetadataPB ash_metadata = 2;
}

message PgGetActiveTransactionListResponsePB {
  message EntryPB {
    uint64 session_id = 1;
    bytes txn_id = 2;
  }
  AppStatusPB status = 1;
  repeated EntryPB entries = 2;
}

message PgGetTableKeyRangesRequestPB {
  uint64 session_id = 1;
  PgObjectIdPB table_id = 2;
  bytes lower_bound_key = 3;
  bytes upper_bound_key = 4;
  uint64 max_num_ranges = 5;
  uint64 range_size_bytes = 6;
  bool is_forward = 7;
  uint32 max_key_length = 8;
  AshMetadataPB ash_metadata = 9;
}

message PgGetTableKeyRangesResponsePB {
  AppStatusPB status = 1;
  fixed64 current_ht = 2;
}

message PgGetNewObjectIdRequestPB {
  uint32 db_oid = 1;
  AshMetadataPB ash_metadata = 2;
}

message PgGetNewObjectIdResponsePB {
  AppStatusPB status = 1;
  uint32 new_oid = 2;
}

message PgFetchDataRequestPB {
  uint64 session_id = 1;
  uint64 data_id = 2;
}

message PgFetchDataResponsePB {
  AppStatusPB status = 1;
  uint32 sidecar = 2;
}

message PgYCQLStatementStatsRequestPB {
  AshMetadataPB ash_metadata = 1;
}

message PgYCQLStatementStatsResponsePB {
  AppStatusPB status = 1;
  repeated YCQLStatementStatsPB statements = 2;
}

message YCQLStatementStatsPB {
  int64 queryid = 1;
  string query = 2;
  bool is_prepared = 3;
  int64 calls = 4;
  // Time in ms
  double total_time = 5;
  double min_time = 6;
  double max_time = 7;
  double mean_time = 8;
  double stddev_time = 9;
  string keyspace = 10;
}

message PgTabletsMetadataRequestPB {
  AshMetadataPB ash_metadata = 1;
}

message PgTabletsMetadataResponsePB {
  AppStatusPB status = 1;
  repeated tablet.TabletStatusPB tablets = 2;
}

message PgServersMetricsRequestPB {
  AshMetadataPB ash_metadata = 1;
}

message PgServerMetricsInfoPB {
  string uuid = 1;
  repeated TserverMetricsInfoPB metrics = 2;
  PgMetricsInfoStatus status = 3;
  string error = 4;
}

enum PgMetricsInfoStatus {
  OK = 0;
  ERROR = 1;
}

message PgServersMetricsResponsePB {
  AppStatusPB status = 1;
  repeated PgServerMetricsInfoPB servers_metrics = 2;
}

message PgCronSetLastMinuteRequestPB {
  int64 last_minute = 1;
  AshMetadataPB ash_metadata = 2;
}

message PgCronSetLastMinuteResponsePB {
  AppStatusPB status = 1;
}

message PgCronGetLastMinuteRequestPB {
  AshMetadataPB ash_metadata = 1;
}

message PgCronGetLastMinuteResponsePB {
  int64 last_minute = 1;
  AppStatusPB status = 2;
}
message PgListClonesRequestPB{
  AshMetadataPB ash_metadata = 1;
}

message PgListClonesResponsePB {
  AppStatusPB status = 1;
  repeated PgDatabaseCloneInfoPB database_clones= 2;
}

message PgDatabaseCloneInfoPB {
  uint32 db_id = 1;
  string db_name = 2;
  uint32 parent_db_id = 3;
  string parent_db_name = 4;
  string state = 5;
  fixed64 as_of_time = 6;
  string failure_reason = 7;
}

//--------------------------------------------------------------------------------------------------
// Advisory lock - Acquire / Release locks.
//--------------------------------------------------------------------------------------------------
// Pg Advisory Lock - (dbid, classid, objid, objsubid).
message AdvisoryLockIdPB {
  uint32 classid = 1;
  uint32 objid = 2;
  uint32 objsubid = 3;
}

enum AdvisoryLockMode {
  LOCK_SHARE = 0;
  LOCK_EXCLUSIVE = 1;
}

message AdvisoryLockPB {
  AdvisoryLockIdPB lock_id = 2;
  AdvisoryLockMode lock_mode = 3;
}

message PgAcquireAdvisoryLockRequestPB {
  uint64 session_id = 1; // Set for both session and txn level locks.
  uint32 db_oid = 2;
  repeated AdvisoryLockPB locks = 3;
  bool wait = 4;
  bool session = 5; // Acquire lock in session level or transaction level.
  PgPerformOptionsPB options = 6; // Only set on txn level locks.
  AshMetadataPB ash_metadata = 7;
}

message PgAcquireAdvisoryLockResponsePB {
  AppStatusPB status = 1;
}

message PgReleaseAdvisoryLockRequestPB {
  // Only session advisory locks can be explicitly released. Transaction level locks are
  // released automatically once txn finishes.
  uint64 session_id = 1;
  uint32 db_oid = 2;
  repeated AdvisoryLockPB locks = 3;
  AshMetadataPB ash_metadata = 4;
}

message PgReleaseAdvisoryLockResponsePB {
  AppStatusPB status = 1;
}

message PgExportTxnSnapshotRequestPB {
  uint64 session_id = 1;
  PgTxnSnapshotPB snapshot = 2;
  PgPerformOptionsPB options = 3;
  AshMetadataPB ash_metadata = 4;
}

message PgExportTxnSnapshotResponsePB {
  AppStatusPB status = 1;
  string snapshot_id = 2;
}

message PgImportTxnSnapshotRequestPB {
  uint64 session_id = 1;
  string snapshot_id = 2;
  PgPerformOptionsPB options = 3;
  AshMetadataPB ash_metadata = 4;
}

message PgImportTxnSnapshotResponsePB {
  AppStatusPB status = 1;
  PgTxnSnapshotPB snapshot = 2;
}
