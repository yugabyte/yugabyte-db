// tslint:disable
/**
 * Yugabyte Cloud
 * YugabyteDB as a Service
 *
 * The version of the OpenAPI document: v1
 * Contact: support@yugabyte.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
import type { AxiosInstance } from 'axios';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  ApiError,
  XClusterNamespaceMetrics,
  XClusterReplicationGroups,
} from '../models';

export interface GetXclusterReplicationNamespacesInfoForQuery {
  replication_id: string;
}

/**
 * Retrieve the list of databases on which restore is run in the YugabyteDB cluster.
 * Get list of all xCluster replication group ids
 */

export const getXclusterReplicationIDsAxiosRequest = (
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<XClusterReplicationGroups>(
    {
      url: '/xcluster_metrics',
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getXclusterReplicationIDsQueryKey = (
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/xcluster_metrics`,
  pageParam,
];


export const useGetXclusterReplicationIDsInfiniteQuery = <T = XClusterReplicationGroups, Error = ApiError>(
  options?: {
    query?: UseInfiniteQueryOptions<XClusterReplicationGroups, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getXclusterReplicationIDsQueryKey(pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<XClusterReplicationGroups, Error, T>(
    queryKey,
    () => getXclusterReplicationIDsAxiosRequest(customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetXclusterReplicationIDsQuery = <T = XClusterReplicationGroups, Error = ApiError>(
  options?: {
    query?: UseQueryOptions<XClusterReplicationGroups, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getXclusterReplicationIDsQueryKey(version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<XClusterReplicationGroups, Error, T>(
    queryKey,
    () => getXclusterReplicationIDsAxiosRequest(customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Retrieve the list of namespaces and tables involved in the replication group
 * identified by the given replication ID.
 * Get list of all xCluster replication group namespace and table details
 */

export const getXclusterReplicationNamespacesInfoAxiosRequest = (
  requestParameters: GetXclusterReplicationNamespacesInfoForQuery,
  customAxiosInstance?: AxiosInstance
) => {
  return Axios<XClusterNamespaceMetrics>(
    {
      url: '/xcluster_namespace_details/{replication_id}'.replace(`{${'replication_id'}}`, encodeURIComponent(String(requestParameters.replication_id))),
      method: 'GET',
      params: {
      }
    },
    customAxiosInstance
  );
};

export const getXclusterReplicationNamespacesInfoQueryKey = (
  requestParametersQuery: GetXclusterReplicationNamespacesInfoForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/xcluster_namespace_details/{replication_id}`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetXclusterReplicationNamespacesInfoInfiniteQuery = <T = XClusterNamespaceMetrics, Error = ApiError>(
  params: GetXclusterReplicationNamespacesInfoForQuery,
  options?: {
    query?: UseInfiniteQueryOptions<XClusterNamespaceMetrics, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  pageParam = -1,
  version = 1,
) => {
  const queryKey = getXclusterReplicationNamespacesInfoQueryKey(params, pageParam, version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useInfiniteQuery<XClusterNamespaceMetrics, Error, T>(
    queryKey,
    () => getXclusterReplicationNamespacesInfoAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetXclusterReplicationNamespacesInfoQuery = <T = XClusterNamespaceMetrics, Error = ApiError>(
  params: GetXclusterReplicationNamespacesInfoForQuery,
  options?: {
    query?: UseQueryOptions<XClusterNamespaceMetrics, Error, T>;
    customAxiosInstance?: AxiosInstance;
  },
  version = 1,
) => {
  const queryKey = getXclusterReplicationNamespacesInfoQueryKey(params,  version);
  const { query: queryOptions, customAxiosInstance } = options ?? {};

  const query = useQuery<XClusterNamespaceMetrics, Error, T>(
    queryKey,
    () => getXclusterReplicationNamespacesInfoAxiosRequest(params, customAxiosInstance),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};






